<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的30岁</title>
      <link href="/2025/03/24/%E6%88%91%E7%9A%8430%E5%B2%81/"/>
      <url>/2025/03/24/%E6%88%91%E7%9A%8430%E5%B2%81/</url>
      
        <content type="html"><![CDATA[<p>这是我的30岁记录<br>1994年出生在河南开封的某一个村庄里面，父母和爷爷奶奶都是农民，小时候家里穷，</p><a id="more"></a><p>刚有个小妹妹又赶上计划生育，导致家里一贫如洗，生过妹妹之后，父母便考虑种菜，种植蘑菇，补贴家用，也正是当时父母的辛勤劳作才让我家盖了房子，一出生因为是男孩感觉在格外受到照顾，刚盖完房子经济更紧张了 我也要上学了，幼儿园半学期要100元，我们那个时候连50元都拿不出来，后来没办法过年的时候爸妈把家里养的猪卖了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录搭建github二级域名博客遇到的问题</title>
      <link href="/2025/03/24/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BAgithub%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2025/03/24/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BAgithub%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-推送失败本地预览没有问题-Deployer-not-found-git"><a href="#1-推送失败本地预览没有问题-Deployer-not-found-git" class="headerlink" title="1.推送失败本地预览没有问题 Deployer not found: git"></a>1.推送失败本地预览没有问题 <code>Deployer not found: git</code></h2><p><strong>提示<code>Deployer not found: git</code></strong></p><p>原因1、没有安装插件 该插件可以将本地代码 <code>build</code> 之后提交到你指定的 <code>github</code> 仓库分支</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>原因2、本地的hexo主题的 <code>_config.yml</code> 文件配置有问题<br>检查 <code>deploy</code> 字段有没有 问题</p><h2 id="2、-config-yml-文件配置-deploy-说明"><a href="#2、-config-yml-文件配置-deploy-说明" class="headerlink" title="2、_config.yml 文件配置  deploy 说明"></a>2、<code>_config.yml</code> 文件配置  <code>deploy</code> 说明</h2><p>  字段 <code>type</code> 提交工具 一般为 <code>git</code><br>  字段 <code>repo</code> 静态文件仓库地址 <code>git@github.com:仓库名/博客名字.github.io.git</code><br>  字段 <code>branch</code> 注意该字段 <strong>该字段是指执行 <code>hexo d</code> 命令后文件最后推送到远程库的分支</strong></p><p>  完整例子（<code>youranme</code> 为要替换自己的数据）：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:youranme&#x2F;youranme.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h2 id="3、如何解决在多台电脑上提交博客"><a href="#3、如何解决在多台电脑上提交博客" class="headerlink" title="3、如何解决在多台电脑上提交博客"></a>3、如何解决在多台电脑上提交博客</h2><p><strong>解决办法：利用 <code>github</code> 的分支</strong><br>github 新建分支 <code>newBranch</code> 并设置为默认分支<br>  (设置默认分支 当前代码库 -&gt; setting -&gt; Branchs -&gt; Default branch 选择分支 -&gt; 点击 Update)</p><h4 id="1）、首先将本地远程库克隆到本地-此时的本地仓库默认指向的是-newBranch"><a href="#1）、首先将本地远程库克隆到本地-此时的本地仓库默认指向的是-newBranch" class="headerlink" title="1）、首先将本地远程库克隆到本地 (此时的本地仓库默认指向的是 newBranch)"></a>1）、首先将本地远程库克隆到本地 (此时的本地仓库默认指向的是 <code>newBranch</code>)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure><h4 id="2）、然后此时仓库有两个分支-newBranch-和-master"><a href="#2）、然后此时仓库有两个分支-newBranch-和-master" class="headerlink" title="2）、然后此时仓库有两个分支 newBranch 和 master ;"></a>2）、然后此时仓库有两个分支 <code>newBranch</code> 和 <code>master</code> ;</h4><p>在当前克隆下来的文件夹里面执行 (需要安装 <code>hexo</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="3）、在新电脑上-生成-ssh"><a href="#3）、在新电脑上-生成-ssh" class="headerlink" title="3）、在新电脑上 生成 ssh ;"></a>3）、在新电脑上 生成 <code>ssh</code> ;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;github账号&#39;</span><br></pre></td></tr></table></figure><p><code>ssh</code> 值在 <code>/用户/当前账户名/.ssh/id_rsa.pub</code> 的文件内</p><h4 id="4）、将值新建到-guhub-的-ssh-keys"><a href="#4）、将值新建到-guhub-的-ssh-keys" class="headerlink" title="4）、将值新建到 guhub 的 ssh keys:"></a>4）、将值新建到 <code>guhub</code> 的 <code>ssh keys</code>:</h4><p>github账户 -&gt; setting -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key、</p><h4 id="5）、设置本地账户信息"><a href="#5）、设置本地账户信息" class="headerlink" title="5）、设置本地账户信息"></a>5）、设置本地账户信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email youeremail@example.com</span><br></pre></td></tr></table></figure><h2 id="6、将-hexo-当前目录下的文件-全部提交到远程库-newBranch"><a href="#6、将-hexo-当前目录下的文件-全部提交到远程库-newBranch" class="headerlink" title="6、将 hexo 当前目录下的文件 全部提交到远程库 newBranch"></a>6、将 hexo 当前目录下的文件 全部提交到远程库 <code>newBranch</code></h2><h4 id="1）、本地预览"><a href="#1）、本地预览" class="headerlink" title="1）、本地预览"></a>1）、本地预览</h4><p>新建博文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#39;newBlogTitle&#39;</span><br></pre></td></tr></table></figure><p>生成静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g  &#x2F;&#x2F; 生成文件</span><br></pre></td></tr></table></figure><p>预览静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s  &#x2F;&#x2F; 预览静态文件 访问localhost:4000</span><br></pre></td></tr></table></figure><h4 id="2）、将修改的文件提交的远程仓库"><a href="#2）、将修改的文件提交的远程仓库" class="headerlink" title="2）、将修改的文件提交的远程仓库"></a>2）、将修改的文件提交的远程仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#39;提交备注&#39;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="3）、发布到远程仓库"><a href="#3）、发布到远程仓库" class="headerlink" title="3）、发布到远程仓库"></a>3）、发布到远程仓库</h4><p>执行以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>此时会将博客的静态文件推送到 <code>master</code> 分支，<br>同时访问 <a href="https://mogugit.github.io/">https://mogugit.github.io/</a> 也就能看到更新的内容</p><h2 id="7、更换电脑之后，只需要将远程仓库的分支克隆下来-在-github-中添加-ssh-就可以了"><a href="#7、更换电脑之后，只需要将远程仓库的分支克隆下来-在-github-中添加-ssh-就可以了" class="headerlink" title="7、更换电脑之后，只需要将远程仓库的分支克隆下来 在 github 中添加 ssh 就可以了"></a>7、更换电脑之后，只需要将远程仓库的分支克隆下来 在 <code>github</code> 中添加 <code>ssh</code> 就可以了</h2><p>每次更新文件只需要执行 步骤 8,9 就好了</p><p>如果代码提交错误 那就回滚代码；<br>首先通过 <code>git log</code> 获取相应的版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>回滚</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><p>从新推送到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f -u origin 分支名称</span><br></pre></td></tr></table></figure><p>重新更新 代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="8、博客使用的图片可以使用免费的图床"><a href="#8、博客使用的图片可以使用免费的图床" class="headerlink" title="8、博客使用的图片可以使用免费的图床"></a>8、<a href="https://zhuanlan.zhihu.com/p/35270383" target="_blank" rel="noopener">博客使用的图片可以使用免费的图床</a></h2><p><strong><a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a></strong></p><p>  简介：支持免注册上传图片，永久存储，支持HTTPS加密访问和调用图片，提供多种图片链接格式，成立于2011年</p><p>  限制：最大10M<br><strong><a href="https://portal.qiniu.com" target="_blank" rel="noopener">七牛云</a></strong></p><p>简介：注册认证后有10G永久免费空间，每月10G国内和10G国外流量，速度相当快，七牛云是国内专业CDN服务商，插件支持比较多，有免费ssl证书，但https流量收费<br><strong>注意：七牛云30天后会回收测试域名，因此你<code>必须要绑定自己的已备案的域名</code></strong></p><p>图片上传限制：无</p><p><strong><a href="http://sbimg.cn" target="_blank" rel="noopener">公益图床</a></strong></p><p>长期保存需要注册使用，这个图床服务器在国内应该还用了cdn，总之速度非常快</p><p>其他的可以<a href="https://zhuanlan.zhihu.com/p/35270383" target="_blank" rel="noopener">参考这里</a></p>]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> probelm </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作git commit提交规范</title>
      <link href="/2022/09/02/%E5%B7%A5%E4%BD%9Cgit-commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
      <url>/2022/09/02/%E5%B7%A5%E4%BD%9Cgit-commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h4 id="git-提交规范"><a href="#git-提交规范" class="headerlink" title="git 提交规范"></a>git 提交规范</h4><p><strong>规范的优势</strong></p><ol><li>版本回退可以快速定位到指定版本</li><li>清晰明了知道每次提交的内容</li><li>统一规范</li></ol><p><strong>commit 提交格式</strong><br>  commit 提交包括三个部分 <code>Header</code>, <code>Body</code>和 <code>Footer</code>;<br>  其中 <code>Header</code> 是必须的, <code>Body</code>和<code>Footer</code>是可忽略。<br>范例如下：</p><a id="more"></a><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">type</span>&gt;（scope）: &lt;subject&gt;</span><br><span class="line"><span class="comment">// 空行必须</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="comment">// 空行必须</span></span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p><strong>Header</strong><br>Header部分只有一行，包括<code>type</code>（必需）,<code>scope</code>(可忽略)和 <code>subject</code>(必需)；<br> <code>type</code> 包括一下9个类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">feat: 新功能（feature）；</span><br><span class="line">fix: 修补BUG；</span><br><span class="line">docs: 文档（documentation）；</span><br><span class="line">style: 样式修改（不影响代码运行的样式修改）；</span><br><span class="line">refactor: 已有功能重构（既不是新增，也不是修改BUG）；</span><br><span class="line">chore: 构建过程，辅助工具变更；</span><br><span class="line">revert: 撤销，版本回退；</span><br><span class="line">perf: 性能优化；</span><br><span class="line">test: 测试相关；</span><br><span class="line">improvement: 改进；</span><br><span class="line">build: 打包相关，比如buil工具变更；</span><br><span class="line">cli: 持续集成；</span><br></pre></td></tr></table></figure><p><code>scope</code> 影响范围，比如：数据层，控制层，试视图层：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all: 表示影响面大，比如修改了网络请求框架，会影响整个程序；</span><br><span class="line">module: 表示影响某个模块，跟某些模块相关，比如登录，用户管理等；</span><br><span class="line">location: 表示影响较小，只有某个小功能影响；</span><br></pre></td></tr></table></figure><p><code>subject</code> 简述本次提交的改动。</p><p><strong>Body</strong><br><code>Body</code>是对本次提交的详细描述，可以分为很多行。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xx&#x2F;xxx.xx 修改内容</span><br><span class="line">xx&#x2F;xxx.xx 修改内容</span><br></pre></td></tr></table></figure><p><strong>Footer</strong><br>Footer 适用于 不兼容变更，关闭需求和Bug；</p><ul><li>关闭需求  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close bugID, 需求ID,...</span><br></pre></td></tr></table></figure></li><li>不兼容变动 如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: 项目webpack升级到4.0版本</span><br><span class="line">xx插件替换成xx插件</span><br></pre></td></tr></table></figure></li></ul><p>使用范例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">revert: feat(xx模块): 回退当前版本667ec到 sssee2</span><br><span class="line"></span><br><span class="line">因为某次提交失误，造成xxx问题</span><br><span class="line">xxx.vue</span><br><span class="line">xxx.js</span><br><span class="line"></span><br><span class="line">closes xxx</span><br></pre></td></tr></table></figure><p>范例2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chore(项目组件, 项目构建): 增加公用组件库xxx和xxx公用一套组件</span><br><span class="line"></span><br><span class="line">为了解决xx问题， 引入公用组件库，使用方式见xx.md文档</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git commit </tag>
            
            <tag> 提交规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用＜details＞标签在网页里面添加脚注</title>
      <link href="/2020/12/25/%E4%BD%BF%E7%94%A8%EF%BC%9Cdetails%EF%BC%9E%E6%A0%87%E7%AD%BE%E5%9C%A8%E7%BD%91%E9%A1%B5%E9%87%8C%E9%9D%A2%E6%B7%BB%E5%8A%A0%E8%84%9A%E6%B3%A8/"/>
      <url>/2020/12/25/%E4%BD%BF%E7%94%A8%EF%BC%9Cdetails%EF%BC%9E%E6%A0%87%E7%AD%BE%E5%9C%A8%E7%BD%91%E9%A1%B5%E9%87%8C%E9%9D%A2%E6%B7%BB%E5%8A%A0%E8%84%9A%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<p>使用 <code>details</code> 标签可以为文章添加相应注解<br>代码：</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    details, summary &#123;</span><br><span class="line">      display: inline;</span><br><span class="line">      vertical-align: super;</span><br><span class="line"><span class="css">      <span class="selector-tag">font-size</span>: 0<span class="selector-class">.75em</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    summary &#123;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &#123;</span></span><br><span class="line">      display: contents;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">      content: " [";</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">      content: "]";</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  The most cited work in history, for example, is a 1951 paper</span><br><span class="line">   <span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">summary</span>&gt;</span>1<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">      Lowry, O. H., Rosebrough, N. J., Farr, A. L. &amp; Randall, R. J. J. Biol. Chem. 193, 265–275 (1951).</span><br><span class="line">   <span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line">describing an assay to determine the amount of protein in a solution.</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：<br><a href="https://imgchr.com/i/rRBzkt" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/25/rRBzkt.gif" alt="rRBzkt.gif"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 网页注脚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现深度克隆/拷贝,解决循环引用</title>
      <link href="/2020/10/29/%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86-%E6%8B%B7%E8%B4%9D-%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/"/>
      <url>/2020/10/29/%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86-%E6%8B%B7%E8%B4%9D-%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>基础版(不能解决循环引用)</strong><br>基础版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 如果参数为空则直接返回,如果为日期/正则 则也直接返回；</span></span><br><span class="line">  <span class="keyword">if</span>( obj == <span class="literal">null</span> ) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span>( obj <span class="keyword">instanceof</span> <span class="built_in">Date</span> ) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span>( obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span> ) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.constructor; <span class="comment">// 此时是为了获取 obj 的类型, 并且可以根据类型来新建相应的拷贝对象;</span></span><br><span class="line">  <span class="comment">// 根据上文的对象类型,来进行填充;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123; <span class="comment">// 过滤掉对象元属性上面的属性;</span></span><br><span class="line">      cloneObj[key] = deepClone(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>执行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> od = &#123;</span><br><span class="line">name: <span class="string">'张三'</span>,</span><br><span class="line">age: <span class="number">18</span>,</span><br><span class="line">address: &#123;</span><br><span class="line">province: <span class="string">'上海市'</span>,</span><br><span class="line">district: <span class="string">'浦东新区'</span></span><br><span class="line"> &#125;,</span><br><span class="line"> dateVal: dateVal: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-02-14'</span>).toLocaleString(),</span><br><span class="line"> re:<span class="keyword">new</span> <span class="built_in">RegExp</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cloneData = deepClone(od);</span><br><span class="line"><span class="built_in">console</span>.log(cloneData);</span><br><span class="line"><span class="comment">// cloneData 输出如下 &#123;address:&#123;province:"上海市",district:"浦东新区"&#125;,age:18,dateVal:"2020/2/14 上午8:00:00",name:"张三",re:/(?:)/,&#125;</span></span><br></pre></td></tr></table></figure><p>如果循环引用到导致爆栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果循环引用 会直接导致爆栈;</span></span><br><span class="line"><span class="keyword">let</span> od = &#123;</span><br><span class="line">name: <span class="string">'张三'</span>,</span><br><span class="line">age: <span class="number">18</span>,</span><br><span class="line">address: &#123;</span><br><span class="line">province: <span class="string">'上海市'</span>,</span><br><span class="line">district: <span class="string">'浦东新区'</span></span><br><span class="line"> &#125;,</span><br><span class="line"> dateVal: dateVal: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-02-14'</span>).toLocaleString(),</span><br><span class="line"> re:<span class="keyword">new</span> <span class="built_in">RegExp</span>()</span><br><span class="line">&#125;</span><br><span class="line">od.cloneSelf = cloneData</span><br><span class="line"><span class="keyword">var</span> cloneData = deepClone(od);</span><br><span class="line"><span class="comment">// VM6546:5 Uncaught RangeError: Maximum call stack size exceeded</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201028113031666.png#pic_center" alt="内存栈溢出"><br><strong>增强版(兼容循环引用)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该函数的关键点为 WeakMap, 主要是为了解决循环引用问题；</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj,hash = new WeakMap(</span>))</span>&#123;</span><br><span class="line">  <span class="comment">// 如果参数为空则直接返回,如果为日期/正则 则也直接返回；</span></span><br><span class="line">  <span class="keyword">if</span>( obj == <span class="literal">null</span> ) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span>( obj <span class="keyword">instanceof</span> <span class="built_in">Date</span> ) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span>( obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span> ) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span>(hash.has(obj)) <span class="keyword">return</span> hash.get(obj); <span class="comment">// 如果weakmap 中存在则直接返回; 解决 参数本身引用本身造成爆栈；</span></span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.constructor; <span class="comment">// 此时是为了获取 obj 的类型, 并且可以根据类型来新建相应的拷贝对象;</span></span><br><span class="line"></span><br><span class="line">  hash.set(obj, cloneObj); <span class="comment">// 将 obj 设置为对象则将对象放入 WeakMap 中, 拷贝的时候如果没有该值则直接从weakMap 中取就好了;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据上文的对象类型,来进行填充;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123; <span class="comment">// 过滤掉对象元属性上面的属相</span></span><br><span class="line">      cloneObj[key] = deepClone(obj[key], hash)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时循环引用则正常输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果循环引用 会直接导致爆栈;</span></span><br><span class="line"><span class="keyword">let</span> od = &#123;</span><br><span class="line">name: <span class="string">'张三'</span>,</span><br><span class="line">age: <span class="number">18</span>,</span><br><span class="line">address: &#123;</span><br><span class="line">province: <span class="string">'上海市'</span>,</span><br><span class="line">district: <span class="string">'浦东新区'</span></span><br><span class="line"> &#125;,</span><br><span class="line"> dateVal: dateVal: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-02-14'</span>).toLocaleString(),</span><br><span class="line"> re:<span class="keyword">new</span> <span class="built_in">RegExp</span>()</span><br><span class="line">&#125;</span><br><span class="line">od.cloneSelf = cloneData</span><br><span class="line"><span class="keyword">var</span> cloneData = deepClone(od);</span><br><span class="line"><span class="comment">// 输出如下</span></span><br><span class="line"><span class="comment">// &#123; address:&#123;province:"上海市",district:"浦东新区"&#125;,age:18,dateVal:"2020/2/14 上午8:00:00",name:"张三",re:/(?:)/, cloneSelf : [Circular] &#125;</span></span><br></pre></td></tr></table></figure><p><code>cloneSelf</code> 属性为一个循环嵌套属性；<br><img src="https://img-blog.csdnimg.cn/20201028115005889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dWd1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="循环嵌套"></p>]]></content>
      
      
      
        <tags>
            
            <tag> js应用技巧 </tag>
            
            <tag> js 对象深度克隆/拷贝 </tag>
            
            <tag> 深度克隆拷贝解决循环引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 设计模式-发布订阅与观察者模式</title>
      <link href="/2020/10/15/JS-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E4%B8%8E%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/10/15/JS-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E4%B8%8E%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS 设计模式之发布订阅模式</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布/订阅模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventEmit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._arr = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">EventEmit.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">callBack</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._arr.push(callBack)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">EventEmit.prototype.unon = <span class="function"><span class="keyword">function</span>(<span class="params">callBack</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._arr.filter(<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fn !== callBack)&#123;</span><br><span class="line">      <span class="keyword">return</span> fn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">EventEmit.prototype.emit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._arr.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">new</span> EventEmit();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">fn.on(<span class="function"><span class="keyword">function</span>(<span class="params">data,key</span>)</span>&#123;</span><br><span class="line">  obj[key] = data;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.keys(obj).length==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fn.emit(<span class="string">'张三'</span>, <span class="string">'name'</span> )</span><br><span class="line">fn.emit(<span class="number">18</span>,<span class="string">'age'</span>)</span><br></pre></td></tr></table></figure><p>JS 设计模式之观察者模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被观察者/服务</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Serve</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>._arr = []</span><br><span class="line">  &#125;</span><br><span class="line">  attch(callBack)&#123;</span><br><span class="line">    <span class="keyword">this</span>._arr.push(callBack)</span><br><span class="line">  &#125;</span><br><span class="line">  setState(val)&#123;</span><br><span class="line">    <span class="keyword">this</span>._arr.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">      fn.update(val)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = props;</span><br><span class="line">  &#125;</span><br><span class="line">  update(val)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name-'</span>,<span class="keyword">this</span>.state, <span class="string">'datra-'</span>,val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建观察者</span></span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observe(<span class="string">'name1'</span>)</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> Observe(<span class="string">'name2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建服务</span></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> Serve();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为服务添加观察者；</span></span><br><span class="line">server.attch(o1) <span class="comment">// name- name1 datra- asdfasd</span></span><br><span class="line">server.attch(o2) <span class="comment">// name- name2 datra- asdfasd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务运行观察者记录到</span></span><br><span class="line">server.setState(<span class="string">'asdfasd'</span>)</span><br></pre></td></tr></table></figure><p>发布/订阅模式和观察者模式的区别在于：</p><p><strong>发布订阅模式是发布和订阅相互独立的，耦合度较松；<br>观察者模式是将观察者耦合到服务内部，消息触发之后会通知/执行观察者的操作；</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 发布订阅 </tag>
            
            <tag> js应用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js - 回调函数的应用技巧之函数预处理</title>
      <link href="/2020/10/15/js-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B9%8B%E5%87%BD%E6%95%B0%E9%A2%84%E5%A4%84%E7%90%86/"/>
      <url>/2020/10/15/js-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B9%8B%E5%87%BD%E6%95%B0%E9%A2%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="回调函数的应用技巧之函数预处理"><a href="#回调函数的应用技巧之函数预处理" class="headerlink" title="回调函数的应用技巧之函数预处理"></a>回调函数的应用技巧之函数预处理</h4><p>函数前置</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前置函数 在当前函数执行前面增加一个函数实现再不更改原函数的情况下 对目标进行预处理;</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">callBack</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span>; <span class="comment">// 将 this 指向原函数；</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    callBack() <span class="comment">// 执行 前置函数</span></span><br><span class="line">    that.apply(that, <span class="built_in">arguments</span>) <span class="comment">// 执行原函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'原函数'</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'callBack'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为原函数增加前置函数 before</span></span><br><span class="line"><span class="keyword">let</span> newFn = fn.before(cb)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行函数</span></span><br><span class="line">newFn(<span class="number">123</span>) <span class="comment">// '原函数 123'</span></span><br></pre></td></tr></table></figure><p><strong>应用场景：在不更改原函数的情况下对目标进行预处理</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> js应用技巧 </tag>
            
            <tag> 函数回调应用 </tag>
            
            <tag> 前置函数 </tag>
            
            <tag> 函数预执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js - 回调函数的应用技巧之计数执行</title>
      <link href="/2020/10/15/js-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%89%A7%E8%A1%8C/"/>
      <url>/2020/10/15/js-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>在一些业务场景会有两个独立函数共同修改一个对象，而我们又不知道对象什么何时完成的时候，就要用回调函数来进行解决。</p><p>如：有两个单独文本文件，我们需要获取里面的内容来填充一个对象，我们在填充完成之后来获取对象。</p><p>获取文本文件并填充</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">acount, callBack</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">key, data</span>)</span>&#123;</span><br><span class="line">    obj[key] = data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计数自减</span></span><br><span class="line">    <span class="keyword">if</span>(--acount == <span class="number">0</span>)&#123;</span><br><span class="line">      callBack(obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'未执行完毕'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'获取完毕'</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置目标次数以及回调函数；</span></span><br><span class="line"><span class="keyword">let</span> newFn = <span class="keyword">new</span> fn(<span class="number">2</span>, getData);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据1: 张三</span></span><br><span class="line">fs.readFile(<span class="string">'./1.text'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  newFn(<span class="string">'name'</span>, data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据2: 18</span></span><br><span class="line">fs.readFile(<span class="string">'./2.text'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  newFn(<span class="string">'age'</span>, data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>应用场景为 需要多次调用、异步执行，但是不知道结果是否符合的情况下，可以指定次数来解决问题；</p>]]></content>
      
      
      
        <tags>
            
            <tag> js应用技巧 </tag>
            
            <tag> 函数回调应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数防抖与节流</title>
      <link href="/2020/10/14/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
      <url>/2020/10/14/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>在前端开发的过程中，经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。所以诞生了 <strong>防抖与节流函数</strong></p><p><strong>防抖（debounce）</strong></p><p><strong>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</strong></p><a id="more"></a><p>页面部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box"</span> style=<span class="string">"height:150px;line-height:150px;text-align:center; color: #fff;background-color:#ddd;font-size:80px;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    let num = 1;</span></span><br><span class="line"><span class="regexp">    let content = document.getElementById('box');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    function count() &#123;</span></span><br><span class="line"><span class="regexp">        content.innerHTML = num++;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">    content.onmousemove = count;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>在上述代码中，div 元素绑定了 mousemove 事件，当鼠标在 div（灰色）区域中移动的时候会持续地去触发该事件导致频繁执行函数。效果如下<br><img src="https://img-blog.csdnimg.cn/20201014111840294.png#pic_center" alt="连续变化"><br>可以看到，在没有通过其它操作的情况下，函数被频繁地执行导致页面上数据变化特别快。所以，接下来让我们来看看防抖和节流是如何去解决这个问题的。</p><p>防抖函数分为非立即执行版和立即执行版。</p><p>非立即执行版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非立即执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 返回函数的 this 指向为当前的操作对象;</span></span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    timeout &amp;&amp; clearInterval(timeout);</span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      func.apply(that, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非立即执行版的意思是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p><p>使用上述绑定 mousemove 事件的例子，通过上面的防抖函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content.onmousemove = debounce(count,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201014112052419.png#pic_center" alt="防抖操作"><br>可以看到，在触发事件后函数 1 秒后才执行，而如果我在触发事件后的 1 秒内又触发了事件，则会重新计算函数执行时间。</p><p>上述防抖函数的代码还需要注意的是 this 和 参数的传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br></pre></td></tr></table></figure><p>防抖函数的代码使用这两行代码来获取 this 和 参数，是为了让 debounce 函数最终返回的函数 this 指向不变以及依旧能接受到 e 参数。</p><p>立即执行版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带有首次执行 immediate</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">let</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">      timeout &amp;&amp; clearTimeout(timeout);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> nowRun = !timeout;</span><br><span class="line"></span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> timeout = <span class="literal">null</span>, wait)</span><br><span class="line">      nowRun &amp;&amp; func.apply(that, arg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>立即执行版的意思是触发事件后函数会立即执行，然后 n 秒内不触发事件才能继续执行函数的效果。</p><p><img src="https://img-blog.csdnimg.cn/20201014114444349.png#pic_center" alt="立即执行"><br>我们需要根据不同的场景来决定我们需要使用哪一个版本的防抖函数，一般来讲上述的防抖函数都能满足大部分的场景需求。但我们也可以将非立即执行版和立即执行版的防抖函数结合起来，最终实现防抖：</p><p>最终版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数防抖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>immediate true 表立即执行，false 表非立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> timeout;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">        timeout &amp;&amp; clearTimeout(timeout);</span><br><span class="line">        <span class="keyword">if</span>(immediate)&#123;</span><br><span class="line">          <span class="keyword">let</span> nowRun = !timeout;</span><br><span class="line">          timeout = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> timeout = <span class="literal">null</span>, wait)</span><br><span class="line">          nowRun &amp;&amp; func.apply(that, arg)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          timeout = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> func.apply(that, arg) , wait)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>节流（throttle）</strong></p><p><strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</strong>节流会稀释函数的执行频率。</p><p>对于节流，一般有两种方式可以实现，分别是时间戳版和定时器版。</p><p>时间戳版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content.onmousemove = throttle(count,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20201014114906732.png#pic_center" alt="时间戳"><br>可以看到，在持续触发事件的过程中，函数会立即执行，并且每 1s 执行一次。</p><p>定时器版:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式同上<br><img src="https://img-blog.csdnimg.cn/20201014115047206.png#pic_center" alt="定时器版"><br>可以看到，在持续触发事件的过程中，函数不会立即执行，并且每 1s 执行一次，在停止触发事件后，函数还会再执行一次。</p><p>我们应该可以很容易的发现，其实时间戳版和定时器版的节流函数的区别就是，<strong>时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候</strong>。</p><p>最终版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数节流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type 1 表时间戳版，2 表定时器版</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait ,type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type===<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type===<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> timeout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>(type===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">                func.apply(context, args);</span><br><span class="line">                previous = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type===<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">                timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    timeout = <span class="literal">null</span>;</span><br><span class="line">                    func.apply(context, args)</span><br><span class="line">                &#125;, wait)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：<br><a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/22</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/26</a></p><p><a href="https://www.jianshu.com/p/c8b86b09daf0" target="_blank" rel="noopener">函数防抖与节流</a></p><p><a href="https://underscorejs.net/docs/underscore.html" target="_blank" rel="noopener">underscore 源码</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js应用技巧 </tag>
            
            <tag> 防抖与节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+next 增加搜索功能</title>
      <link href="/2020/09/17/hexo-next-%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/09/17/hexo-next-%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="1、安装本地搜索插件-hexo-generator-search"><a href="#1、安装本地搜索插件-hexo-generator-search" class="headerlink" title="1、安装本地搜索插件 hexo-generator-search"></a>1、安装本地搜索插件 hexo-generator-search</h4><p>在博客根目录安装搜索插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装插件，用于生成博客索引数据（在博客根目录下执行下列命令）：</span><br><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><a id="more"></a><p>安装之后，会在站点目录的 <code>public</code> 文件夹下创建一个 <code>search.xml</code> 文件。（如果没有 <code>search.xml</code> 文件，请继续往下看）</p><h4 id="2、修改站点配置文件-如果上一步没有找到-search-xml文件-则可以跳过"><a href="#2、修改站点配置文件-如果上一步没有找到-search-xml文件-则可以跳过" class="headerlink" title="2、修改站点配置文件(如果上一步没有找到 search.xml文件 则可以跳过 )"></a>2、修改站点配置文件(如果上一步没有找到 <code>search.xml</code>文件 则可以跳过 )</h4><p>在主题配置文件中的 <code>_config.yml</code> 中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Search</span><br><span class="line">search:</span><br><span class="line">  path: .&#x2F;public&#x2F;search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><ul><li>path：索引文件的路径，相对于站点根目录</li><li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li><li>limit：限制搜索的条目数</li></ul><h4 id="3、主题配置文件"><a href="#3、主题配置文件" class="headerlink" title="3、主题配置文件"></a>3、主题配置文件</h4><p>在主题配置文件 <code>_config.yml</code> 中找到如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><p>确保 <code>enable</code> 设成 <code>true</code>。</p><p><code>top_n_per_article</code> 字段表示在每篇文章中显示的搜索结果数量，设成 <code>-1</code> 会显示每篇文章的所有搜索结果数量。</p><p>然后，重新部署网站即可愉快的使用本地搜索功能了。</p><p><img src="https://img-blog.csdnimg.cn/20200917110556774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dWd1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>以上就是在博客添加本地搜索~</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog 增加搜索功能 </tag>
            
            <tag> hexo搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python出现Could not find a version that satisfies the requirement openpyxl (from versions: )</title>
      <link href="/2020/09/14/Python%E5%87%BA%E7%8E%B0Could-not-find-a-version-that-satisfies-the-requirement-openpyxl-from-versions/"/>
      <url>/2020/09/14/Python%E5%87%BA%E7%8E%B0Could-not-find-a-version-that-satisfies-the-requirement-openpyxl-from-versions/</url>
      
        <content type="html"><![CDATA[<h5 id="一-环境"><a href="#一-环境" class="headerlink" title="一.环境"></a>一.环境</h5><p>使用python3.7时，用pip安装openpyxl出现如下错误：</p><a id="more"></a><p><a href="https://imgchr.com/i/wD5qh9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/14/wD5qh9.png" alt="wD5qh9.png"></a></p><h4 id="二-解决方案"><a href="#二-解决方案" class="headerlink" title="二. 解决方案"></a>二. 解决方案</h4><p>可能是python国内网络的问题，这时我们用国内的镜像源来加速。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br><span class="line"><span class="comment"># 这个是豆瓣源</span></span><br><span class="line"><span class="comment"># --trusted-host pypi.douban.com 这是为了获得ssl证书的认证，要不然会报错</span></span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/wD5OpR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/14/wD5OpR.png" alt="wD5OpR.png"></a></p><h4 id="三-pip和pip3的区别"><a href="#三-pip和pip3的区别" class="headerlink" title="三. pip和pip3的区别"></a>三. pip和pip3的区别</h4><p>其实这两个命令效果是一样的，没有区别：</p><p>比如安装库openpyxl，pip3 install openpyxl或者pip install openpyxl：只是当一台电脑同时有多个版本的Python的时候，用pip3就可以自动区分用Python3来安装库。是为了避免和Python2发生冲突的。<br>（2）如果你的电脑只安装了Python3，那么不管用pip还是pip3都一样的。<br>安装了python3之后，会有pip3<br>（1）使用pip install XXX ：<br>新安装的库会放在这个目录下面：python2.7/site-packages<br>（2）使用pip3 install XXX ：<br>新安装的库会放在这个目录下面：python3.7/site-packages<br>（3）如果使用python3执行程序，那么就不能importpython2.7/site-packages中的库。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python包安装源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的快速复制数组小秘密</title>
      <link href="/2020/09/11/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%8D%E5%88%B6%E6%95%B0%E7%BB%84%E5%B0%8F%E7%A7%98%E5%AF%86/"/>
      <url>/2020/09/11/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%8D%E5%88%B6%E6%95%B0%E7%BB%84%E5%B0%8F%E7%A7%98%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p><strong>方法1、arrayObject.slice(start,end) 快速深度复制一个多维数组</strong><br>关于 <a href="https://www.w3school.com.cn/js/jsref_slice_array.asp" target="_blank" rel="noopener"><code>slice(start,end)</code>方法说明</a></p><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">start</td><td align="left">必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td></tr><tr><td align="center">end</td><td align="left">可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td></tr></tbody></table><a id="more"></a><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>返回一个新的数组，包含从 <code>start</code> 到 <code>end</code> （不包括该元素）的 <code>arrayObject</code> 中的元素。<br>如果想删除数组中的一段元素，应该使用方法 <code>Array.splice()</code>。<br><strong><code>splice()  方法会直接对数组进行修改</code></strong>。</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> classArr= [</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'stundentA'</span>,</span><br><span class="line">age: <span class="number">18</span>,</span><br><span class="line">subject:[<span class="string">'科目一'</span>,<span class="string">'科目二'</span>,<span class="string">'科目三'</span>]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'stundentB'</span>,</span><br><span class="line">age: <span class="number">22</span>,</span><br><span class="line">subject:[<span class="string">'科目1'</span>,<span class="string">'科目2'</span>,<span class="string">'科目3'</span>]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'stundentC'</span>,</span><br><span class="line">age: <span class="number">21</span>,</span><br><span class="line">subject:[<span class="string">'科目A'</span>,<span class="string">'科目B'</span>,<span class="string">'科目C'</span>]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line"> <span class="keyword">var</span> copyArr = classArr.slice();</span><br><span class="line"></span><br><span class="line">classArr.splice(<span class="number">2</span>,<span class="number">1</span>); <span class="comment">// [&#123;name: 'stundentC',age: 21,subject:['科目A','科目B','科目C']&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(classArr) <span class="comment">// [[&#123;name: 'stundentA',age: 18,subject:['科目一','科目二','科目三']&#125;],[&#123;name: 'stundentB',age: 22,subject:['科目1','科目2','科目3']&#125;]]</span></span><br><span class="line"><span class="built_in">console</span>.log(copyArr) <span class="comment">// [[&#123;name: 'stundentA',age: 18,subject:['科目一','科目二','科目三']&#125;],[&#123;name: 'stundentB',age: 22,subject:['科目1','科目2','科目3']&#125;],[&#123;name: 'stundentC',age: 21,subject:['科目A','科目B','科目C']&#125;]]</span></span><br></pre></td></tr></table></figure><p><strong>方法2、使用es6的解构</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> classArr= [</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'stundentA'</span>,</span><br><span class="line">age: <span class="number">18</span>,</span><br><span class="line">subject:[<span class="string">'科目一'</span>,<span class="string">'科目二'</span>,<span class="string">'科目三'</span>]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'stundentB'</span>,</span><br><span class="line">age: <span class="number">22</span>,</span><br><span class="line">subject:[<span class="string">'科目1'</span>,<span class="string">'科目2'</span>,<span class="string">'科目3'</span>]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'stundentC'</span>,</span><br><span class="line">age: <span class="number">21</span>,</span><br><span class="line">subject:[<span class="string">'科目A'</span>,<span class="string">'科目B'</span>,<span class="string">'科目C'</span>]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> copyArr = [...classArr];</span><br><span class="line"> classArr.splice(<span class="number">2</span>,<span class="number">1</span>); <span class="comment">// [&#123;name: 'stundentC',age: 21,subject:['科目A','科目B','科目C']&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(classArr) <span class="comment">// [[&#123;name: 'stundentA',age: 18,subject:['科目一','科目二','科目三']&#125;],[&#123;name: 'stundentB',age: 22,subject:['科目1','科目2','科目3']&#125;]]</span></span><br><span class="line"> <span class="built_in">console</span>.log(copyArr) <span class="comment">// [[&#123;name: 'stundentA',age: 18,subject:['科目一','科目二','科目三']&#125;],[&#123;name: 'stundentB',age: 22,subject:['科目1','科目2','科目3']&#125;],[&#123;name: 'stundentC',age: 21,subject:['科目A','科目B','科目C']&#125;]]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> copy Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios 个人配置拦截器</title>
      <link href="/2020/08/06/axios-%E4%B8%AA%E4%BA%BA%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2020/08/06/axios-%E4%B8%AA%E4%BA%BA%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>个人配置 axios 拦截器</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line">Vue.component(Message.name, Message);</span><br><span class="line"><span class="keyword">let</span> sessionLoginId = sessionStorage.getItem(<span class="string">'LoginId'</span>) || <span class="string">''</span>;</span><br><span class="line">axios.interceptors.request.use(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.headers[<span class="string">'TIME_TOKEN'</span>] = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  res.headers[<span class="string">'Cache-Control'</span>] = <span class="string">'no-cache'</span>; <span class="comment">// 以秒为单位 no-cache</span></span><br><span class="line">  res.headers[<span class="string">'Token'</span>] = sessionLoginId;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res) <span class="keyword">return</span>;</span><br><span class="line">    res.headers[<span class="string">'content-type'</span>] = <span class="string">'application/json; charset=UTF-8'</span>;</span><br><span class="line">    <span class="keyword">if</span> (res.method === <span class="string">'get'</span>) &#123;</span><br><span class="line">      res.data = &#123;<span class="attr">unused</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 添加响应拦截器-错误处理</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="comment">// 无权限-40013  sessionId过期-40005 均跳转到登录</span></span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; err.response &amp;&amp; err.response.data.code === <span class="number">40005</span>) &#123;</span><br><span class="line">      location.href = err.response.data.extraInfo;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err &amp;&amp; err.response &amp;&amp; err.response.data.code === <span class="number">40013</span>) &#123;</span><br><span class="line">      Vue.prototype.$message(&#123;</span><br><span class="line">        message: err.response.data.msg || <span class="string">'系统异常，请联系管理员！'</span>,</span><br><span class="line">        type: <span class="string">'error'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        axios.get(<span class="string">'/admin/logout'</span>);</span><br><span class="line">        sessionStorage.clear();</span><br><span class="line">      &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> errRes = err.response.data.extraInfo || err.response.data.msg || <span class="string">'系统异常，请联系管理员！'</span>;</span><br><span class="line">      <span class="keyword">if</span> (errRes.length &gt;= <span class="number">40</span>) errRes = errRes.slice(<span class="number">0</span>, <span class="number">40</span>) + <span class="string">'...'</span>;</span><br><span class="line"></span><br><span class="line">      Vue.prototype.$message(&#123;</span><br><span class="line">        message: errRes,</span><br><span class="line">        type: <span class="string">'error'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseApi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.axios = axios;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记录配置拦截器;</p>]]></content>
      
      
      
        <tags>
            
            <tag> axios </tag>
            
            <tag> axios 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>startsWith() 使用</title>
      <link href="/2020/07/20/startsWith-%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/20/startsWith-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><code>startsWith()</code> 方法用于检测字符串是否以指定的子字符串开始。</p><p>如果是以指定的子字符串开头返回 <code>true</code>，否则 <code>false</code>。</p><p><code>startsWith()</code> 方法对大小写敏感。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello world"</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.startsWith(<span class="string">"Hello"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.startsWith(searchvalue, start)</span><br></pre></td></tr></table></figure><h5 id="参数值"><a href="#参数值" class="headerlink" title="参数值"></a>参数值</h5><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">searchvalue</td><td align="left">必需，要查找的字符串。</td></tr><tr><td align="left">start</td><td align="left">可选，查找的开始位置，默认为 0。</td></tr></tbody></table><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><table><thead><tr><th align="left">返回值</th></tr></thead><tbody><tr><td align="left">如果字符串是以指定的子字符串开头返回 true，否则 false。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello world"</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.startsWith(<span class="string">"o"</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> startsWith() </tag>
            
            <tag> js 实用方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转：http状态码诠释</title>
      <link href="/2020/06/22/%E8%BD%AC%EF%BC%9Ahttp%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A0%E9%87%8A/"/>
      <url>/2020/06/22/%E8%BD%AC%EF%BC%9Ahttp%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A0%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h4 id="一、http-状态码诠释"><a href="#一、http-状态码诠释" class="headerlink" title="一、http 状态码诠释"></a>一、http 状态码诠释</h4><p><a href="https://www.cnblogs.com/shanyou/archive/2012/05/06/2486134.html" target="_blank" rel="noopener">转自：HTTP协议状态码详解（HTTP Status Code）</a></p><p>使用ASP.NET/PHP/JSP或者javascript都会用到http的不同状态，一些常见的状态码为：<br>200 – 服务器成功返回网页 404 – 请求的网页不存在 503 – 服务不可用<br><strong>1、1xx（临时响应）</strong><br>表示临时响应并需要请求者继续执行操作的状态代码。</p><p>代码   说明</p><ul><li>100   （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</li><li>101   （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。<a id="more"></a></li></ul><p><strong>2、2xx （成功）</strong><br>表示成功处理了请求的状态代码。</p><p>代码   说明</p><ul><li>200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</li><li>201   （已创建）  请求成功并且服务器创建了新的资源。</li><li>202   （已接受）  服务器已接受请求，但尚未处理。</li><li>203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。</li><li>204   （无内容）  服务器成功处理了请求，但没有返回任何内容。</li><li>205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。</li><li>206   （部分内容）  服务器成功处理了部分 GET 请求。</li></ul><p><strong>3、3xx （重定向）</strong><br>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p><p>代码   说明</p><ul><li>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</li><li>301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</li><li>302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li><li>303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</li><li>304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</li><li>305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</li><li>307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li></ul><p><strong>4、4xx（请求错误）</strong><br>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p><p>代码   说明</p><ul><li>400   （错误请求） 服务器不理解请求的语法。</li><li>401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li>403   （禁止） 服务器拒绝请求。</li><li>404   （未找到） 服务器找不到请求的网页。</li><li>405   （方法禁用） 禁用请求中指定的方法。</li><li>406   （不接受） 无法使用请求的内容特性响应请求的网页。</li><li>407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</li><li>408   （请求超时）  服务器等候请求时发生超时。</li><li>409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</li><li>410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。</li><li>411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</li><li>412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</li><li>413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</li><li>414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</li><li>415   （不支持的媒体类型） 请求的格式不受请求页面的支持。</li><li>416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</li><li>417   （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</li></ul><p><strong>5、5xx（服务器错误）</strong><br>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p><p>代码   说明</p><ul><li>500   （服务器内部错误）  服务器遇到错误，无法完成请求。</li><li>501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</li><li>502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</li><li>503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</li><li>504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。</li><li>505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</li></ul><p><a href="https://tools.ietf.org/html/rfc6585" target="_blank" rel="noopener">RFC 6585</a> 最近刚刚发布，该文档描述了 4 个新的 HTTP 状态码。</p><p>HTTP 协议还在变化？是的，HTTP 协议一直在演变，新的状态码对于开发 REST 服务或者说是基于 HTTP 的服务非常有用，下面我们为你详细介绍这四个新的状态码以及是否应该使用。</p><h4 id="二、其他扩展"><a href="#二、其他扩展" class="headerlink" title="二、其他扩展"></a>二、其他扩展</h4><p><strong>428 Precondition Required (要求先决条件)</strong><br>先决条件是客户端发送 HTTP 请求时，如果想要请求能成功必须满足一些预设的条件。</p><p>一个好的例子就是 If-None-Match 头，经常在 GET 请求中使用，如果指定了 If-None-Match ，那么客户端只在响应中的 ETag 改变后才会重新接收回应。</p><p>先决条件的另外一个例子就是 If-Match 头，这个一般用在 PUT 请求上用于指示只更新没被改变的资源，这在多个客户端使用 HTTP 服务时用来防止彼此间不会覆盖相同内容。</p><p>当服务器端使用 <a href="https://tools.ietf.org/html/rfc6585#section-3" target="_blank" rel="noopener">428 Precondition Required</a> 状态码时，表示客户端必须发送上述的请求头才能执行请求，这个方法为服务器提供一种有效的方法来阻止 ‘lost update’ 问题。</p><p><strong>429 Too Many Requests (太多请求)</strong><br>当你需要限制客户端请求某个服务数量时，该状态码就很有用，也就是请求速度限制。</p><p>在此之前，有一些类似的状态码，例如 ‘509 Bandwidth Limit Exceeded’. Twitter 使用 420 （这不是HTTP定义的状态码）</p><p>如果你希望限制客户端对服务的请求数，可使用 <a href="https://dev.twitter.com/docs/error-codes-responses" target="_blank" rel="noopener">429 状态码</a>，同时包含一个 Retry-After 响应头用于告诉客户端多长时间后可以再次请求服务。</p><p><strong>431 Request Header Fields Too Large (请求头字段太大)</strong><br>某些情况下，客户端发送 HTTP 请求头会变得很大，那么服务器可发送 <a href="https://tools.ietf.org/html/rfc6585#section-5" target="_blank" rel="noopener">431 Request Header Fields Too Large</a> 来指明该问题。</p><p>我不太清楚为什么没有 430 状态码，而是直接从 429 跳到 431，我尝试搜索但没有结果。唯一的猜测是 430 Forbidden 跟 403 Forbidden 太像了，为了避免混淆才这么做的，天知道！</p><p><strong>511 Network Authentication Required (要求网络认证)</strong><br>对我来说这个状态码很有趣，如果你在开发一个 HTTP 服务器，你不一定需要处理该状态码，但如果你在编写 HTTP 客户端，那这个状态码就非常重要。</p><p>如果你频繁使用笔记本和智能手机，你可能会注意到大量的公用 WIFI 服务要求你必须接受一些协议或者必须登录后才能使用。</p><p>这是通过拦截HTTP流量，当用户试图访问网络返回一个重定向和登录，这很讨厌，但是实际情况就是这样的。</p><p>使用这些“拦截”客户端，会有一些讨厌的副作用。在 RFC 中有提到这两个的例子：</p><ul><li>如果你在登录WIFI前访问某个网站，网络设备将会拦截首个请求，这些设备往往也有自己的网站图标 ‘favicon.ico’。登录后您会发现，有一段时间内你访问的网站图标一直是WIFI登录网站的图标。</li><li>如果客户端使用HTTP请求来查找文档（可能是JSON），网络将会响应一个登录页，这样你的客户端就会解析错误并导致客户端运行异常，在现实中这种问题非常常见。<br>因此 511 状态码的提出就是为了解决这个问题。</li></ul><p>如果你正在编写 HTTP 的客户端，你最好还是检查 511 状态码以确认是否需要认证后才能访问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> http code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Qrcode 和 canvas 绘制带有 icon 的二维码</title>
      <link href="/2020/06/17/%E5%88%A9%E7%94%A8-Qrcode-%E5%92%8C-canvas-%E7%BB%98%E5%88%B6%E5%B8%A6%E6%9C%89-icon-%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>/2020/06/17/%E5%88%A9%E7%94%A8-Qrcode-%E5%92%8C-canvas-%E7%BB%98%E5%88%B6%E5%B8%A6%E6%9C%89-icon-%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h4 id="canvas生成二维码附带icon并实现下载"><a href="#canvas生成二维码附带icon并实现下载" class="headerlink" title="canvas生成二维码附带icon并实现下载"></a>canvas生成二维码附带icon并实现下载</h4><p>参考地址 <a href="https://blog.csdn.net/chy555chy/article/details/85785819" target="_blank" rel="noopener">https://blog.csdn.net/chy555chy/article/details/85785819</a></p><p>利用 <a href="https://github.com/soldair/node-qrcode" target="_blank" rel="noopener">qrcode</a> 生成二维码是不带 <code>icon</code> 的，去网上<a href="https://blog.csdn.net/chy555chy/article/details/85785819" target="_blank" rel="noopener">查找解决方案</a>需要修改源码。<br>所以只好自己开搞了<br>效果如下：<br><img src="https://s1.ax1x.com/2020/06/17/NEz2n0.png" alt="NEz2n0.png"><br>代码如下</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 二维码和icon --&gt;</span><br><span class="line">    &lt;img :src=<span class="string">"rediusIconSrc"</span> alt=<span class="string">"ICON"</span>&gt;</span><br><span class="line">    &lt;img :src=<span class="string">"qrCodeSrc"</span> alt=<span class="string">"qrcode"</span>&gt;</span><br><span class="line">    &lt;img :src=<span class="string">"iconCodeSrc"</span> alt=<span class="string">"IconAndQrcode"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"getQrcode"</span>&gt;下载&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import QRCode from 'qrcode'; /</span><span class="regexp">/ 需安装 qrcode 插件;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      qrCodeSrc: '',</span></span><br><span class="line"><span class="regexp">      rediusIconSrc: '',</span></span><br><span class="line"><span class="regexp">      iconCodeSrc: '',</span></span><br><span class="line"><span class="regexp">      qrCodeW: '200',</span></span><br><span class="line"><span class="regexp">      qrCodeH: '200',</span></span><br><span class="line"><span class="regexp">      codeContext: 'text123',</span></span><br><span class="line"><span class="regexp">      iconScale: 0.2 /</span><span class="regexp">/ icon 占二维码的比例;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  mounted() &#123;</span></span><br><span class="line"><span class="regexp">    this.getCanvas(this.codeContext);</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    getQrcode() &#123;</span></span><br><span class="line"><span class="regexp">      let _a = document.createElement('a');</span></span><br><span class="line"><span class="regexp">      _a.href = this.iconCodeSrc;</span></span><br><span class="line"><span class="regexp">      _a.download = '带有 icon 的二维码';</span></span><br><span class="line"><span class="regexp">      _a.click();</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    getCanvas(codeContext, option = &#123;errorCorrectionLevel: 'H', margin: 1&#125;) &#123;</span></span><br><span class="line">        // 配置参数 参考https://github.com/soldair/node-qrcode#options</span><br><span class="line">        <span class="comment">// var opts = &#123;</span></span><br><span class="line">        <span class="comment">//   errorCorrectionLevel: 'H', // 容错级别 low, medium, quartile, high or L, M, Q, H.</span></span><br><span class="line">        <span class="comment">//   type: 'image/jpeg', // 图片类型</span></span><br><span class="line">        <span class="comment">//   quality: 0.9, // 透明度 貌似没啥效果</span></span><br><span class="line">        <span class="comment">//   maskPattern: 1, // 遮罩图案</span></span><br><span class="line">        <span class="comment">//   margin: 1, // 二维码距离边框的距离 单位为4px 默认值1个单位</span></span><br><span class="line">        <span class="comment">//   color: &#123; // 二维码 码块的颜色</span></span><br><span class="line">        <span class="comment">//     dark: '#010599FF', // 默认值 #000000</span></span><br><span class="line">        <span class="comment">//     light: '#FFBF60FF' // 默认值 #ffffff</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">        QRCode.toDataURL(codeContext, option, (err, url) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">          <span class="comment">// 生成二维码图片地址</span></span><br><span class="line">          <span class="keyword">this</span>.qrCodeSrc = url;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 二维码 转化为 canvas 并将 icon 画入到 canvas 中，然后导出;</span></span><br><span class="line">          <span class="keyword">this</span>.addicon();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生成带边框及圆角的 icon 图片;</span></span><br><span class="line">    addicon(X = <span class="number">0</span>, Y = <span class="number">0</span>, W, H, radius = <span class="number">5</span>, birderW = <span class="number">2</span>, borderColor = <span class="string">'#fff'</span>, isbgColor = <span class="literal">true</span>, bgColor = <span class="string">'rgba(255,255,255, 1)'</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> c = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">        c.width = <span class="keyword">this</span>.qrCodeW * <span class="keyword">this</span>.iconScale;</span><br><span class="line">        c.height = <span class="keyword">this</span>.qrCodeH * <span class="keyword">this</span>.iconScale;</span><br><span class="line">        <span class="keyword">let</span> _w = W || c.width, _h = H || c.height;</span><br><span class="line">        <span class="keyword">let</span> ctx = c.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否设置背景颜色</span></span><br><span class="line">        <span class="keyword">if</span> (isbgColor) &#123;</span><br><span class="line">          ctx.fillStyle = bgColor;</span><br><span class="line">          ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, c.width, c.height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.drawRoundRect(ctx, X, Y, _w, _h, radius, birderW, borderColor);</span><br><span class="line">        <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 网络图片直接给地址;</span></span><br><span class="line">        img.src = <span class="string">'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2069790559,642682254&amp;fm=26&amp;gp=0.jpg'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是本地图片请使用 require() 引入;</span></span><br><span class="line">        <span class="comment">// img.src = require(src); // src 不能使变量 会查找不到;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解决 访问网络图片属于跨域操作 Failed to execute 'toDataURL' on 'HTMLCanvasElement': Tainted canvases may not be exported.</span></span><br><span class="line">        img.setAttribute(<span class="string">'crossOrigin'</span>, <span class="string">'Anonymous'</span>);</span><br><span class="line">        img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          ctx.clip();</span><br><span class="line">          ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">          ctx.restore();</span><br><span class="line">          <span class="keyword">this</span>.rediusIconSrc = c.toDataURL();</span><br><span class="line">          <span class="keyword">this</span>.mergeImg();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 圆角 icon 和 二维码 合并到一起;</span></span><br><span class="line">    mergeImg() &#123;</span><br><span class="line">      <span class="keyword">let</span> c = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">        c.width = <span class="keyword">this</span>.qrCodeW;</span><br><span class="line">        c.height = <span class="keyword">this</span>.qrCodeH;</span><br><span class="line">        <span class="keyword">let</span> ctx = c.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        <span class="keyword">let</span> bg = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">        <span class="keyword">let</span> icon = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">        bg.src = <span class="keyword">this</span>.qrCodeSrc;</span><br><span class="line">        icon.src = <span class="keyword">this</span>.rediusIconSrc;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> _bgLoad = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            bg.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> _iconLoad = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            icon.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Promise</span>.all([_bgLoad, _iconLoad]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> w = <span class="keyword">this</span>.qrCodeW;</span><br><span class="line">          <span class="keyword">let</span> h = <span class="keyword">this</span>.qrCodeH;</span><br><span class="line">          <span class="keyword">let</span> iconW = w * <span class="keyword">this</span>.iconScale;</span><br><span class="line">          <span class="keyword">let</span> iconH = h * <span class="keyword">this</span>.iconScale;</span><br><span class="line">          <span class="keyword">let</span> iconX = (w - iconW) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">let</span> iconY = (h - iconH) / <span class="number">2</span>;</span><br><span class="line">          <span class="comment">// 画二维码</span></span><br><span class="line">          ctx.drawImage(bg, <span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">          <span class="comment">// 画icon</span></span><br><span class="line">          ctx.drawImage(icon, iconX, iconY, iconW, iconH);</span><br><span class="line">          <span class="comment">// 转化为图片 src;</span></span><br><span class="line">          <span class="keyword">this</span>.iconCodeSrc = c.toDataURL();</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'error-'</span>, e);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 画圆角 ctx 上下文 x,y 起始位置 width,height icon的宽高 radius 圆角的角度 lineWidth 边框的宽度 lineColor 边框的颜色</span></span><br><span class="line">    drawRoundRect(ctx, x, y, width, height, radius, lineWidth, lineColor) &#123;</span><br><span class="line">      ctx.lineWidth = lineWidth;</span><br><span class="line">      ctx.strokeStyle = lineColor;</span><br><span class="line">      ctx.beginPath();</span><br><span class="line">      ctx.arc(x + radius, y + radius, radius, <span class="built_in">Math</span>.PI, <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span>);</span><br><span class="line">      ctx.lineTo(width - radius + x, y);</span><br><span class="line">      ctx.arc(width - radius + x, radius + y, radius, <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">      ctx.lineTo(width + x, height + y - radius);</span><br><span class="line">      ctx.arc(width - radius + x, height - radius + y, radius, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">2</span>);</span><br><span class="line">      ctx.lineTo(radius + x, height + y);</span><br><span class="line">      ctx.arc(radius + x, height - radius + y, radius, <span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">2</span>, <span class="built_in">Math</span>.PI);</span><br><span class="line">      ctx.closePath();</span><br><span class="line">      ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> qrcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用encodeURI和decodeURI转码和解码</title>
      <link href="/2020/06/02/%E4%BD%BF%E7%94%A8encodeURI%E5%92%8CdecodeURI%E8%BD%AC%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81/"/>
      <url>/2020/06/02/%E4%BD%BF%E7%94%A8encodeURI%E5%92%8CdecodeURI%E8%BD%AC%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><strong>encodeURI() 函数可把字符串作为 URI 进行编码。</strong></p><p><strong>语法:</strong><br>encodeURI(URIstring)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>URIstring</td><td>必需。一个字符串，含有 URI 或其他要编码的文本。</td></tr></tbody></table><p><strong>返回：</strong><br><code>URIstring</code> 的副本，其中的某些字符将被十六进制的转义序列进行替换。</p><p><strong>说明</strong><br>该方法不会对 <code>ASCII</code> 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： <code>- _ . ! ~ * &#39; ( )</code> 。</p><a id="more"></a><p>该方法的目的是对 <code>URI</code> 进行完整的编码，因此对以下在 <code>URI</code> 中具有特殊含义的 <code>ASCII</code> 标点符号，<code>encodeURI()</code> 函数是不会进行转义的：<code>;/?:@&amp;=+$,#</code><br><strong>可以<a href="https://blog.csdn.net/qq_39712029/article/details/81003518" target="_blank" rel="noopener">使用encodeURIComponent()和decodeURIComponent()</a>来进行转义</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D;&quot;张三&quot;;</span><br><span class="line"></span><br><span class="line">encodeURI(a)&#x2F;&#x2F; &quot;%E5%BC%A0%E4%B8%89&quot;</span><br></pre></td></tr></table></figure><p><strong>decodeURI() 函数可对 encodeURI() 函数编码过的 URI 进行解码。</strong></p><p><strong>语法</strong><br>decodeURI(URIstring)</p><p><strong>描述</strong><br>| 参数 | 描述 |<br>| ————- | ————- |<br>|URIstring |必需。一个字符串，含有 URI 或其他要解码的文本。|</p><p><strong>返回值</strong><br>URIstring 的副本，其中的十六进制转义序列将被它们表示的字符替换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var b &#x3D; encodeURI(&quot;张三&quot;)；&#x2F;&#x2F;%E5%BC%A0%E4%B8%89</span><br><span class="line">decodeURI(b) &#x2F;&#x2F;张三</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>commonjs使用 范例</title>
      <link href="/2020/06/02/commonjs%E4%BD%BF%E7%94%A8-%E8%8C%83%E4%BE%8B/"/>
      <url>/2020/06/02/commonjs%E4%BD%BF%E7%94%A8-%E8%8C%83%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>commonJS 规范  千言万语不如一行代码<br>例</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;example.js</span><br><span class="line">var n &#x3D; 1;</span><br><span class="line">function sayHello( name )&#123;</span><br><span class="line">var name &#x3D; name || &quot;Tom&quot;;</span><br><span class="line">return &quot;Hello~&quot;+name</span><br><span class="line">&#125;</span><br><span class="line">function addFn(val)&#123;</span><br><span class="line">    var val &#x3D; val.x+val.y;</span><br><span class="line">    return val</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D;&#123;</span><br><span class="line">n:n,</span><br><span class="line">sayHello:sayHello,</span><br><span class="line">addFn:addFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用requier()引入使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;main.js</span><br><span class="line">var example &#x3D; require(&#39;.&#x2F;example.js&#39;);</span><br><span class="line">var addNum &#x3D; &#123;</span><br><span class="line">&quot;x&quot;:10,</span><br><span class="line">&quot;y&quot;:5</span><br><span class="line">&#125;</span><br><span class="line">console.log( example )&#x2F;&#x2F;查看example输出的对外模块接口；</span><br><span class="line">console.log( example.n )&#x2F;&#x2F;1;</span><br><span class="line">console.log( example.sayHello(&quot;Jack&quot;) )&#x2F;&#x2F; &quot;Hello~ Jack&quot;;</span><br><span class="line">console.log( example.addFn(addNum) ) &#x2F;&#x2F;15;</span><br></pre></td></tr></table></figure><p> 参考地址：<a href="http://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">CommonJS规范</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原型，原型链和原型链继承</title>
      <link href="/2020/06/02/%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/"/>
      <url>/2020/06/02/%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>javaScript里面每一个方法都是一个原型对象(prototype)，该对象都是可扩展的，千言万语不如一行代码；<br>例：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 所需要的参数</span><br><span class="line">var lenoveObj &#x3D; &#123;</span><br><span class="line">    &quot;name&quot;:&#39;联想 Y100&#39;,</span><br><span class="line">    &quot;address&quot;:&quot;上海&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var dimension &#x3D; &quot;100&#96;&quot;;</span><br><span class="line"></span><br><span class="line">var huaweiObj &#x3D; &#123;</span><br><span class="line">    &quot;name&quot;:&#39;huawei P10&#39;,</span><br><span class="line">    &quot;address&quot;:&quot;上海&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var powerObj &#x3D; &#123;</span><br><span class="line">    &quot;capacity&quot;:&#39;10000mah&#39;,</span><br><span class="line">    &quot;runtime&quot;:&#39;5day&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var runsizeObj &#x3D; &#123;</span><br><span class="line">    &quot;name&quot;:&quot;lenove&quot;,</span><br><span class="line">    &quot;runsize&quot;:&quot;512M&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 构造函数</span><br><span class="line">var Commodity &#x3D; function(obj )&#123;</span><br><span class="line">    this.address &#x3D; obj.address;</span><br><span class="line">    this.name &#x3D; obj.name;</span><br><span class="line">    this.origin &#x3D; function( address )&#123;</span><br><span class="line">        console.log( &quot;address&quot;, this.address )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;扩展的方法 price()</span><br><span class="line">Commodity.prototype.price &#x3D; function(price)&#123;</span><br><span class="line">    console.log(&quot;price函数&quot;, price )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 需要继承构造函数的方法</span><br><span class="line">var Computer &#x3D; function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">Computer.prototype &#x3D; new Commodity(lenoveObj);</span><br><span class="line"></span><br><span class="line">Computer.prototype.__prototype__ &#x3D; Commodity.prototype;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 扩展的方法 runFn()</span><br><span class="line">Computer.prototype.runFn &#x3D; function(runsize)&#123;</span><br><span class="line">    console.log( &quot;runsize.runsize:&quot;+runsize.runsize )</span><br><span class="line">    console.log( &quot;this.pcWidth:&quot;+this.pcWidth )</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 扩展的属性 pcWidth</span><br><span class="line">Computer.prototype.pcWidth &#x3D; dimension;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 需要继承构造函数的方法</span><br><span class="line">var Phone &#x3D; function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 原型继承 并传入构造函数必要的参数</span><br><span class="line">Phone.prototype &#x3D; new Commodity(huaweiObj);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 原型链继承</span><br><span class="line">Phone.prototype.__prototype__ &#x3D; Commodity.prototype;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 继承之后扩展的方法 powerFn()</span><br><span class="line">Phone.prototype.powerFn &#x3D; function()&#123;</span><br><span class="line">    console.log(&quot;this.address&quot;,this.address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;扩展的属性 pingsize</span><br><span class="line">Phone.prototype.pingsize&#x3D;&quot;5&#96;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Phone</span><br><span class="line">var huawei &#x3D; new Phone();</span><br><span class="line">&#x2F;&#x2F;查看扩展属性</span><br><span class="line">console.log(&quot;huawei.name:&quot;,huawei.name);</span><br><span class="line">&#x2F;&#x2F;查看自带方法</span><br><span class="line">huawei.origin();</span><br><span class="line">&#x2F;&#x2F;查看构造函数的扩展方法</span><br><span class="line">huawei.price(&quot;5000&quot;)</span><br><span class="line">&#x2F;&#x2F;检测方法继承来源</span><br><span class="line">console.log(huawei instanceof Commodity ) &#x2F;&#x2F;判断  instanceof 该方法是否继承于某个构造函数</span><br><span class="line">&#x2F;&#x2F;查看继承后扩展的方法</span><br><span class="line">huawei.powerFn();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Computer</span><br><span class="line">var lenove &#x3D; new Computer();</span><br><span class="line">&#x2F;&#x2F;查看继承自Computer构造函数下的runFn方法 传参runsizeObj</span><br><span class="line">lenove.runFn(runsizeObj);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法失精问题</title>
      <link href="/2020/06/02/%E7%AE%97%E6%B3%95%E5%A4%B1%E7%B2%BE%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/02/%E7%AE%97%E6%B3%95%E5%A4%B1%E7%B2%BE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>浮点数在扩乘100倍时，会出现算法失精；<br>最简单的失精例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.1 + 0.2 &#x3D; 0.30000000000000004</span><br></pre></td></tr></table></figure><p>有时候在处理小数时也会出现这种情况<br>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.007*100 &#x3D; 0.7000000000000001</span><br></pre></td></tr></table></figure><p>处理办法就是：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;按照有效数字位数进行四舍五入，默认6位有效数字</span><br><span class="line">Math.signFigures &#x3D; function(num, rank &#x3D; 6) &#123;</span><br><span class="line">    if(!num) return(0);</span><br><span class="line">    const sign &#x3D; num &#x2F; Math.abs(num);</span><br><span class="line">    const number &#x3D; num * sign;</span><br><span class="line">    const temp &#x3D; rank - 1 - Math.floor(Math.log10(number));</span><br><span class="line">    let ans;</span><br><span class="line">    if (temp &gt; 0) &#123;</span><br><span class="line">        ans &#x3D; parseFloat(number.toFixed(temp));</span><br><span class="line">    &#125; else if (temp &lt; 0) &#123;</span><br><span class="line">        const temp &#x3D; Math.pow(10, temp);</span><br><span class="line">        ans &#x3D; Math.round(number &#x2F; temp) * temp;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ans &#x3D; Math.round(number);</span><br><span class="line">    &#125;</span><br><span class="line">    return (ans * sign);</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 实际运用</span><br><span class="line">0.56 * 100;                    &#x2F;&#x2F;56.00000000000001</span><br><span class="line">Math.signFigures(0.56 * 100);  &#x2F;&#x2F;56</span><br></pre></td></tr></table></figure><p>浮点数算法 <a href="https://blog.csdn.net/tercel_zhang/article/details/52537726" target="_blank" rel="noopener">https://blog.csdn.net/tercel_zhang/article/details/52537726</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bootstrap-table一个td使用多个数据</title>
      <link href="/2020/06/02/bootstrap-table%E4%B8%80%E4%B8%AAtd%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/06/02/bootstrap-table%E4%B8%80%E4%B8%AAtd%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>在bootstrap-table 里面在定义title 的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var bkDetTit &#x3D; [</span><br><span class="line">        &#123;</span><br><span class="line">        field:&#39;Number&#39;,</span><br><span class="line">        title:&#39;编号&#39;,</span><br><span class="line">        formatter: function( value, row, index )&#123;</span><br><span class="line">                return index + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            field:&#39;股票代码&#39;,</span><br><span class="line">            title:&#39;股票代码及行业&#39;,</span><br><span class="line">            formatter:function( value,row,index )&#123;</span><br><span class="line">            &#x2F;&#x2F;如何使用拿到的多个数据 直接返回拼接好的html;</span><br><span class="line">                var html &#x3D; &quot;&lt;span&gt;&quot;+row[&quot;股票代码&quot;]+&quot;&lt;&#x2F;span&gt;&lt;span&gt;&quot;+row[&quot;股票名称&quot;]+&quot;&lt;&#x2F;span&gt;&lt;span&gt;&quot;+row[&quot;所属行业&quot;]+&quot;&lt;&#x2F;span&gt;&quot;</span><br><span class="line">                return html;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            field:&#39;起始价格&#39;,</span><br><span class="line">            title:&#39;起始价格&#39;,</span><br><span class="line">            sortable:true</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            field:&#39;截止价格&#39;,</span><br><span class="line">            title:&#39;截止价格&#39;,</span><br><span class="line">            sortable:true</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>里面有<strong>formatter(value,row,index)</strong>方法可以用来返回多个需要的数据，其中里面有三个参数（value,row,index）;<br><strong>value: 返回该field对应的value</strong><br><strong>row: 是返回表格的所有数据</strong><br><strong>index:返回该行数据的下标</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js优化-事件委托</title>
      <link href="/2020/06/02/js%E4%BC%98%E5%8C%96-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
      <url>/2020/06/02/js%E4%BC%98%E5%8C%96-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<p><strong>概述：</strong></p><p>那什么叫事件委托呢？它还有一个名字叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。那这是什么意思呢？事件委托基本上，就是取快递来解释这个现象</p><p>有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。</p><p>这里其实还有2层意思的：</p><a id="more"></a><p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；</p><p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。</p><p><strong>为什么要用事件委托：</strong><br>一般来说，dom需要有事件处理程序，我们都会直接给它设事件处理程序就好了，那如果是很多的dom需要添加事件处理呢？比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件，那这么做会存在什么影响呢？</p><p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；</p><p>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了（内存不够用，是硬伤，哈哈），比如上面的100个li，就要占用100个内存空间，如果是1000个，10000个呢，那只能说呵呵了，如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）这一个对象进行操作，这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。</p><p><strong>事件委托的原理：</strong></p><p>事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div&gt;ul&gt;li&gt;a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a&gt;li&gt;ul&gt;div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。</p><p><strong>事件委托怎么实现：</strong><br>本文的核心部分，在介绍事件委托的方法之前，我们先来看一段一般方法的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id&#x3D;&quot;oul&quot;&gt;</span><br><span class="line">    &lt;li&gt;111&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;222&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;333&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;444&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>实现功能是点击li，弹出123：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oUl &#x3D; document.getElementById(&quot;oul&quot;);</span><br><span class="line">    var oLi &#x3D; oUl.getElementsByTagName(&#39;li&#39;);</span><br><span class="line">    for(var i&#x3D;0;i&lt;aLi.length;i++)&#123;</span><br><span class="line">        oLi[i].onclick &#x3D; function()&#123;</span><br><span class="line">            alert(123);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 上面的代码的意思很简单，相信很多人都是这么实现的，我们看看有多少次的dom操作，首先要找到ul，然后遍历li，然后点击li的时候，又要找一次目标的li的位置，才能执行最后的操作，每次点击都要找一次li；</p><p>那么我们用事件委托的方式做又会怎么样呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oUl &#x3D; document.getElementById(&quot;oul&quot;);</span><br><span class="line">   oUl.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(123);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发，当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办?<br>解决办法就是通过事件源 <a href="http://www.w3school.com.cn/jsref/event_target.asp" target="_blank" rel="noopener">event.target</a> 如果是ie则使用 event.srcElement 来代替event.target  定位到事件触发的节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj &#x3D; event.srcElement ? event.srcElement : event.target; &#x2F;&#x2F;兼容IE</span><br></pre></td></tr></table></figure><p>此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（看个人习惯）；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">　　var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">　　oUl.onclick &#x3D; function(ev)&#123;</span><br><span class="line">　　　　var ev &#x3D; ev || window.event;</span><br><span class="line">　　　　var target &#x3D; ev.target || ev.srcElement;</span><br><span class="line">　　　　if(target.nodeName.toLowerCase() &#x3D;&#x3D; &#39;li&#39;)&#123;</span><br><span class="line">　 　　　　　　 alert(123);</span><br><span class="line">　　　　　　　  alert(target.innerHTML);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样改下就只有点击li会触发事件了，且每次只执行一次dom操作，如果li数量很多的话，将大大减少dom的操作，优化的性能可想而知！</p><p>上面的例子是说li操作的是同样的效果，要是每个li被点击的效果都不一样，那么用事件委托还有用吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;add&quot; value&#x3D;&quot;添加&quot; &#x2F;&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;remove&quot; value&#x3D;&quot;删除&quot; &#x2F;&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;move&quot; value&#x3D;&quot;移动&quot; &#x2F;&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;select&quot; value&#x3D;&quot;选择&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var Add &#x3D; document.getElementById(&quot;add&quot;);</span><br><span class="line">    var Remove &#x3D; document.getElementById(&quot;remove&quot;);</span><br><span class="line">    var Move &#x3D; document.getElementById(&quot;move&quot;);</span><br><span class="line">    var Select &#x3D; document.getElementById(&quot;select&quot;);</span><br><span class="line"></span><br><span class="line">    Add.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(&#39;添加&#39;);</span><br><span class="line">    &#125;;</span><br><span class="line">    Remove.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(&#39;删除&#39;);</span><br><span class="line">    &#125;;</span><br><span class="line">    Move.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(&#39;移动&#39;);</span><br><span class="line">    &#125;;</span><br><span class="line">    Select.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(&#39;选择&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面实现的效果我就不多说了，很简单，4个按钮，点击每一个做不同的操作，那么至少需要4次dom操作，如果用事件委托，能进行优化吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oBox &#x3D; document.getElementById(&quot;box&quot;);</span><br><span class="line">    oBox.onclick &#x3D; function (ev) &#123;</span><br><span class="line">        var ev &#x3D; ev || window.event;</span><br><span class="line">        var target &#x3D; ev.target || ev.srcElement;</span><br><span class="line">        if(target.nodeName.toLocaleLowerCase() &#x3D;&#x3D; &#39;input&#39;)&#123;</span><br><span class="line">            switch(target.id)&#123;</span><br><span class="line">                case &#39;add&#39; :</span><br><span class="line">                    alert(&#39;添加&#39;);</span><br><span class="line">                    break;</span><br><span class="line">                case &#39;remove&#39; :</span><br><span class="line">                    alert(&#39;删除&#39;);</span><br><span class="line">                    break;</span><br><span class="line">                case &#39;move&#39; :</span><br><span class="line">                    alert(&#39;移动&#39;);</span><br><span class="line">                    break;</span><br><span class="line">                case &#39;select&#39; :</span><br><span class="line">                    alert(&#39;选择&#39;);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用事件委托就可以只用一次dom操作就能完成所有的效果，比上面的性能肯定是要好一些的</p><p> 现在讲的都是document加载完成的现有dom节点下的操作，那么如果是新增的节点，新增的节点会有事件吗？也就是说，一个新员工来了，他能收到快递吗？</p><p>看一下正常的添加节点的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;button&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;添加&quot; &#x2F;&gt;</span><br><span class="line">&lt;ul id&#x3D;&quot;ul1&quot;&gt;</span><br><span class="line">    &lt;li&gt;111&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;222&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;333&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;444&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>现在是移入li，li变红，移出li，li变白，这么一个效果，然后点击按钮，可以向ul中添加一个li子节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">     var oBtn &#x3D; document.getElementById(&quot;btn&quot;);</span><br><span class="line">     var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">     var aLi &#x3D; oUl.getElementsByTagName(&#39;li&#39;);</span><br><span class="line">     var num &#x3D; 4;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F;鼠标移入变红，移出变白</span><br><span class="line">     for(var i&#x3D;0; i&lt;aLi.length;i++)&#123;</span><br><span class="line">         aLi[i].onmouseover &#x3D; function()&#123;</span><br><span class="line">             this.style.background &#x3D; &#39;red&#39;;</span><br><span class="line">         &#125;;</span><br><span class="line">         aLi[i].onmouseout &#x3D; function()&#123;</span><br><span class="line">             this.style.background &#x3D; &#39;#fff&#39;;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     &#x2F;&#x2F;添加新节点</span><br><span class="line">     oBtn.onclick &#x3D; function()&#123;</span><br><span class="line">         num++;</span><br><span class="line">         var oLi &#x3D; document.createElement(&#39;li&#39;);</span><br><span class="line">         oLi.innerHTML &#x3D; 111*num;</span><br><span class="line">         oUl.appendChild(oLi);</span><br><span class="line">     &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这是一般的做法，但是你会发现，新增的li是没有事件的，说明添加子节点的时候，事件没有一起添加进去，这不是我们想要的结果，那怎么做呢？一般的解决方案会是这样，将for循环用一个函数包起来，命名为mHover，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oBtn &#x3D; document.getElementById(&quot;btn&quot;);</span><br><span class="line">    var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">    var aLi &#x3D; oUl.getElementsByTagName(&#39;li&#39;);</span><br><span class="line">    var num &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    function mHover () &#123;</span><br><span class="line">        &#x2F;&#x2F;鼠标移入变红，移出变白</span><br><span class="line">        for(var i&#x3D;0; i&lt;aLi.length;i++)&#123;</span><br><span class="line">            aLi[i].onmouseover &#x3D; function()&#123;</span><br><span class="line">                this.style.background &#x3D; &#39;red&#39;;</span><br><span class="line">            &#125;;</span><br><span class="line">            aLi[i].onmouseout &#x3D; function()&#123;</span><br><span class="line">                this.style.background &#x3D; &#39;#fff&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mHover ();</span><br><span class="line">    &#x2F;&#x2F;添加新节点</span><br><span class="line">    oBtn.onclick &#x3D; function()&#123;</span><br><span class="line">        num++;</span><br><span class="line">        var oLi &#x3D; document.createElement(&#39;li&#39;);</span><br><span class="line">        oLi.innerHTML &#x3D; 111*num;</span><br><span class="line">        oUl.appendChild(oLi);</span><br><span class="line">        mHover ();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然功能实现了，看着还挺好，但实际上无疑是又增加了一个dom操作，在优化性能方面是不可取的，那么有事件委托的方式，能做到优化吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oBtn &#x3D; document.getElementById(&quot;btn&quot;);</span><br><span class="line">    var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">    var aLi &#x3D; oUl.getElementsByTagName(&#39;li&#39;);</span><br><span class="line">    var num &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;事件委托，添加的子元素也有事件</span><br><span class="line">    oUl.onmouseover &#x3D; function(ev)&#123;</span><br><span class="line">        var ev &#x3D; ev || window.event;</span><br><span class="line">        var target &#x3D; ev.target || ev.srcElement;</span><br><span class="line">        if(target.nodeName.toLowerCase() &#x3D;&#x3D; &#39;li&#39;)&#123;</span><br><span class="line">            target.style.background &#x3D; &quot;red&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    oUl.onmouseout &#x3D; function(ev)&#123;</span><br><span class="line">        var ev &#x3D; ev || window.event;</span><br><span class="line">        var target &#x3D; ev.target || ev.srcElement;</span><br><span class="line">        if(target.nodeName.toLowerCase() &#x3D;&#x3D; &#39;li&#39;)&#123;</span><br><span class="line">            target.style.background &#x3D; &quot;#fff&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;添加新节点</span><br><span class="line">    oBtn.onclick &#x3D; function()&#123;</span><br><span class="line">        num++;</span><br><span class="line">        var oLi &#x3D; document.createElement(&#39;li&#39;);</span><br><span class="line">        oLi.innerHTML &#x3D; 111*num;</span><br><span class="line">        oUl.appendChild(oLi);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是用事件委托的方式，新添加的子元素是带有事件效果的，我们可以发现，当用事件委托的时候，根本就不需要去遍历元素的子节点，只需要给父级元素添加事件就好了，其他的都是在js里面的执行，这样可以大大的减少dom操作，这才是事件委托的精髓所在。</p><p> <strong>总结</strong>：</p><p>那什么样的事件可以用事件委托，什么样的事件不可以用呢？</p><p>适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。</p><p>值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。</p><p>不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>获取浏览器视口宽高以及元素宽高</title>
      <link href="/2020/06/02/%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%86%E5%8F%A3%E5%AE%BD%E9%AB%98%E4%BB%A5%E5%8F%8A%E5%85%83%E7%B4%A0%E5%AE%BD%E9%AB%98/"/>
      <url>/2020/06/02/%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%86%E5%8F%A3%E5%AE%BD%E9%AB%98%E4%BB%A5%E5%8F%8A%E5%85%83%E7%B4%A0%E5%AE%BD%E9%AB%98/</url>
      
        <content type="html"><![CDATA[<p>适用所有浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</span><br></pre></td></tr></table></figure><p>有三种方法能够确定浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）。</p><a id="more"></a><p>对于Internet Explorer9、Chrome、Firefox、Opera 以及 Safari：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.innerHeight; <span class="comment">// 浏览器窗口的内部高度</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth; <span class="comment">// 浏览器窗口的内部宽度</span></span><br></pre></td></tr></table></figure><p>对于 ie 8、7、6、5：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">document</span>.body.clientHeight</span><br><span class="line"><span class="built_in">document</span>.body.clientWidth</span><br></pre></td></tr></table></figure><p>获取页面总高度和宽度，以及scrollTop d的兼容处理；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clientWidth 处理兼容性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClient</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        width: <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">        height: <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// scrollTop兼容性处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取元素的宽高</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应的dom元素的宽高有以下几个常用的：</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"div"</span>).offsetHeight; <span class="comment">// 元素的实际高度</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"div"</span>).offsetWidth;  <span class="comment">// 元素的实际宽度</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"div"</span>).offsetLeft;  <span class="comment">// 元素的实际距离左边界的距离</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"div"</span>).offsetTop <span class="comment">// 元素的实际距离上边界的距离</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>传输中文的乱码的原因及解决方式（两次encodeURI()）转码</title>
      <link href="/2020/06/02/%E4%BC%A0%E8%BE%93%E4%B8%AD%E6%96%87%E7%9A%84%E4%B9%B1%E7%A0%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%A4%E6%AC%A1encodeURI-%EF%BC%89%E8%BD%AC%E7%A0%81/"/>
      <url>/2020/06/02/%E4%BC%A0%E8%BE%93%E4%B8%AD%E6%96%87%E7%9A%84%E4%B9%B1%E7%A0%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%A4%E6%AC%A1encodeURI-%EF%BC%89%E8%BD%AC%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>.encodeURL函数主要是来对URI来做转码，它默认是采用的UTF-8的编码.<br>. UTF-8编码的格式:一个汉字来三个字节构成，每一个字节会转换成16进制的编码，同时添加上%号.</p><p>假设页面端输入的中文是一个 <font color="#bf0000">“中”</font>，按照下面步骤进行解码</p><a id="more"></a><p>1.第一次encodeURI，<strong>按照utf-8方式获取字节数组变成<font color="#bf0000">[-28,-72-83]</font>，对字节码数组进行遍历，把每个字节转化成对应的16进制数，这样就变成了<font color="#bf0000">[E4,B8,AD]</font>,最后变成<font color="#bf0000">[%E4,%B8,%AD]</font>  此时已经没有了多字节字符，全部是单字节字符。</strong></p><p>2、第二次encodeURI，进行编码，<strong>会把%看成一个转义字符，并不编码%以后字符，会把%编码成%25.把数组最后变成<font color="#bf0000">[%25E4,%25B8,%25AD]</font>然后就把处理后的数据<font color="#bf0000">[%25E4,%25B8,%25AD]</font>发往服务器端，</strong></p><p>当应用服务器调用<strong>getParameter</strong>方法，<strong>getParameter</strong>方法会去向应用服务器请求参数</p><p>应用服务器最初获得的就是发送来的<font color="#bf0000">[%25E4,%25B8,%25AD]</font>，应用服务器会对这个数据进行URLdecode操作，应用服务器进行解码的这一次，不管是按照UTF-8，还是GBK，还是ISO-8859，,都能得到<font color="#bf0000">[%E4,%B8,%AD]</font>，因为都会把<strong>%25解析成%</strong>.并把这个值返回给<strong>getParameter方法</strong>;</p><p>3、再用UTF-8解码一次，就得到”中”了。</p><p>想想看，如果不编码两次，当服务器自动解码的时候，假如是按照ISO-8859去解码UTF-8编码的东西，就是会出现乱码。</p><p>前端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;javascript:</span><br><span class="line">var roleName &#x3D; &quot;张三&quot;：</span><br><span class="line">document.authorityForm.action &#x3D; basePath3+&quot;User_viewUser.do?id&#x3D;&quot;+id+&quot;&amp;roleName&#x3D;&quot;+encodeURI(encodeURI(roleName))+&quot;&amp;roleType&#x3D;&quot;+roleType;</span><br></pre></td></tr></table></figure><p>后台：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roleName &#x3D; java.net.URLDecoder.decode(getRequest().getParameter(&quot;roleName&quot;),&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用express+node 建立本地服务器并利用node代理处理跨域请求</title>
      <link href="/2020/06/02/%E5%88%A9%E7%94%A8express-node-%E5%BB%BA%E7%AB%8B%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E5%88%A9%E7%94%A8node%E4%BB%A3%E7%90%86%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/2020/06/02/%E5%88%A9%E7%94%A8express-node-%E5%BB%BA%E7%AB%8B%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E5%88%A9%E7%94%A8node%E4%BB%A3%E7%90%86%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>第一步 下载安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a><br>第二步 初始化文件夹  命令: npm init<br>            然后一路回车</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/ttvBLQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttvBLQ.png" alt="ttvBLQ.png"></a><br>第三步 安装express，ejs, request，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express ejs request --save-dev</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/ttv0sg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttv0sg.png" alt="ttv0sg.png"></a></p><p>在初始化文件下新建nodeServer.js(名称自己定义)；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line">var app &#x3D; express();</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">var request &#x3D; require(&quot;request&quot;);&#x2F;&#x2F;request 封装了 HTTP 请求的各种方法，让发起请求变得非常容易；https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;request</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;指定静态资源访问目录</span><br><span class="line">&#x2F;&#x2F; app.use(express.static(require(&#39;path&#39;).join(__dirname, &#39;views&#39;))); 如果有文件夹存放资源，出现报错的话，那就多use几次就可以了</span><br><span class="line">&#x2F;&#x2F; 设定views变量，意为视图存放的目录</span><br><span class="line">app.use(express.static(require(&#39;path&#39;).join(__dirname, &#39;.&#x2F;items&#x2F;dist&#x2F;&#39;)));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 做代理</span><br><span class="line">app.use(&#39;&#x2F;&#39;,function(req,res)&#123;</span><br><span class="line">&#x2F;&#x2F;拿到请求的路径来代理请求，并把响应的结果传给request客户端然后将目标的服务器响应的数据传回浏览器；</span><br><span class="line">    var url &#x3D; &quot;http:&#x2F;&#x2F;localhost:3001&quot;+req.url;&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:3001 这里是我后台服务器的端口；</span><br><span class="line">    req.pipe(request(url)).pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; app.set(&#39;views&#39;, __dirname);</span><br><span class="line">&#x2F;&#x2F; 修改模板文件的后缀名为html</span><br><span class="line">app.set(&#39;views&#39;, (__dirname + &quot;.&#x2F;items&#x2F;dist&#x2F;&quot;));</span><br><span class="line">app.set( &#39;view engine&#39;, &#39;html&#39; );</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 运行ejs模块</span><br><span class="line">app.engine( &#39;.html&#39;, require( &#39;ejs&#39; ).__express );</span><br><span class="line"></span><br><span class="line">app.get(&quot;&#x2F;&quot;, function(req, res) &#123;</span><br><span class="line">  res.render(&#39;index&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var server &#x3D; app.listen(8889, &quot;10.1.1.114&quot;,function()&#123;</span><br><span class="line">  var host &#x3D; server.address().address;</span><br><span class="line">  var port &#x3D; server.address().port;</span><br><span class="line">  console.log(&quot;Server running at http:&#x2F;&#x2F;%s:%s&quot;, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后 运行：node  nodeServer.js</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript 原生仿写瀑布流</title>
      <link href="/2020/06/02/javascript-%E5%8E%9F%E7%94%9F%E4%BB%BF%E5%86%99%E7%80%91%E5%B8%83%E6%B5%81/"/>
      <url>/2020/06/02/javascript-%E5%8E%9F%E7%94%9F%E4%BB%BF%E5%86%99%E7%80%91%E5%B8%83%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>瀑布流的效果 原理是初始列数top值为0，然后将第一行的高度添加到一个新的数组里，从第二行开始根据储存高度这个数组来，确定最低高度列，然后向最低高度列添加展示数据；<br>效果图：</p><a id="more"></a><p><a href="https://imgchr.com/i/ttjBU1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttjBU1.png" alt="ttjBU1.png"></a><br><a href="https://imgchr.com/i/ttjD4x" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttjD4x.png" alt="ttjD4x.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">        width: 220px;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .item &#123;</span><br><span class="line">        box-shadow: 2px 2px 2px #999;</span><br><span class="line">        position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">    #box &#123;</span><br><span class="line">        width: 816px;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    #box div &#123;</span><br><span class="line">        position:absolute;</span><br><span class="line">        width: 198px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        margin-left: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * [ 用来生成瀑布流，不足之处 没有做dom优化在某种极端的情况下，会增加浏览器负担; 待优化 由于是使用定位所以父级是没有高度的]</span><br><span class="line">     * @return &#123;[type]&#125; [description]</span><br><span class="line">     *</span><br><span class="line">     *&#x2F;</span><br><span class="line">    window.onload&#x3D; function()&#123;</span><br><span class="line">        var box &#x3D; document.getElementById(&#39;box&#39;);</span><br><span class="line">        var items &#x3D; box.getElementsByTagName(&#39;div&#39;);</span><br><span class="line">        var url &#x3D; &#39;&#39;; &#x2F;&#x2F; 请求地址;</span><br><span class="line">        var itemCol &#x3D; 4; &#x2F;&#x2F; 默认列的间距</span><br><span class="line">        var itemColGap &#x3D; 2; &#x2F;&#x2F; 默认div 上下间的距离；</span><br><span class="line">        var colNum &#x3D; 5; &#x2F;&#x2F; 默认列数;</span><br><span class="line">        var itemWidth &#x3D; items[0].offsetWidth; &#x2F;&#x2F; 获取单个列的宽度；</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 此处数据只是测试填充；</span><br><span class="line">        var randomData &#x3D; []; &#x2F;&#x2F; 填充数据数组 测试;</span><br><span class="line">        &#x2F;&#x2F; 产生随机数</span><br><span class="line">        function randomHeight(min,max)&#123;</span><br><span class="line">            var min &#x3D; min;</span><br><span class="line">            var max &#x3D; max;</span><br><span class="line">            var randomVal &#x3D; Math.ceil(Math.random()*max+min);</span><br><span class="line">            return randomVal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 随机数添加到数组并去重；</span><br><span class="line">        function forData()&#123;</span><br><span class="line">            if( randomData.length&lt;20 )&#123;</span><br><span class="line">                var randVal &#x3D; randomHeight(20,100);</span><br><span class="line">                if(randomData.indexOf(randVal) &lt; 0 )&#123;</span><br><span class="line">                    randomData.push(randVal);</span><br><span class="line">                &#125;</span><br><span class="line">                forData();</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        forData(); &#x2F;&#x2F; 获取随机好的去重数组</span><br><span class="line">        &#x2F;&#x2F; 此处数据只是测试填充；--END</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 初始化</span><br><span class="line">        pubuFn();</span><br><span class="line"></span><br><span class="line">        function pubuFn()&#123;</span><br><span class="line">            var HeightData &#x3D; []; &#x2F;&#x2F; 各个列的初始高度;</span><br><span class="line"></span><br><span class="line">            for( var i &#x3D; 0; i &lt; items.length; i++ )&#123;</span><br><span class="line">                items[i].style.height &#x3D; randomData[i]+&#39;px&#39;;</span><br><span class="line">                if( i &lt; colNum)&#123;</span><br><span class="line">                    var getHeightVal &#x3D; items[i].offsetHeight; &#x2F;&#x2F; 获取起始高度；</span><br><span class="line">                    items[i].style.left &#x3D; i*(itemWidth+itemCol)+&#39;px&#39;;</span><br><span class="line">                    items[i].style.top &#x3D; 0;</span><br><span class="line">                    HeightData.push(getHeightVal);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    &#x2F;&#x2F; 获取最低高度值;</span><br><span class="line">                    var minVal &#x3D; HeightData[0];</span><br><span class="line">                    var z &#x3D; 0;</span><br><span class="line">                    for( let y&#x3D;0;y&lt;HeightData.length;y++ )&#123;</span><br><span class="line">                        if( minVal&gt;HeightData[y] )&#123;</span><br><span class="line">                            minVal&#x3D;HeightData[y];</span><br><span class="line">                            z &#x3D; y;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    items[i].style.top &#x3D; (HeightData[z]+itemColGap)+&#39;px&#39;;</span><br><span class="line">                    items[i].style.left &#x3D; (items[z].offsetLeft-itemCol)+&#39;px&#39;;</span><br><span class="line">                    HeightData[z] &#x3D; items[i].offsetHeight+HeightData[z]+itemColGap; &#x2F;&#x2F; 每添加一个div 则重新计算初始列高度最低高度;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 后续加载数据;</span><br><span class="line">        window.onscroll &#x3D; function(event)&#123;</span><br><span class="line">            var crollTop &#x3D;  document.documentElement.scrollTop || window.pageYOffset;</span><br><span class="line">            var crollHeihgt &#x3D; window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class="line">            var topSum &#x3D; crollTop + crollHeihgt;</span><br><span class="line">            var offsetTopVal &#x3D; items[items.length-1].offsetTop;</span><br><span class="line"></span><br><span class="line">            if( topSum &gt; offsetTopVal)&#123; &#x2F;&#x2F; 如果滚动条的Top值与视口高度之和 大于 最后一张图片的offsetTop值 那么说明已经到最后一张图片了；</span><br><span class="line">                &#x2F;&#x2F; 此处可动态获取数据</span><br><span class="line">                &#x2F;&#x2F; todo。。。</span><br><span class="line">                &#x2F;&#x2F; 循环添加数据</span><br><span class="line">                for( var c &#x3D; 0; c&lt;30;c++ )&#123;</span><br><span class="line">                    var cHei &#x3D; randomHeight(0,20);</span><br><span class="line">                    if( !randomData[cHei] ) continue;</span><br><span class="line">                    var div &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">                    div.style.height&#x3D; randomData[cHei]+&#39;px&#39;;</span><br><span class="line">                    &#x2F;&#x2F; 此处可添加需要在div 内添加的内容</span><br><span class="line">                    &#x2F;&#x2F; div.innerHTML &#x3D; &#39;&lt;img src&#x3D;&quot;&#39; + datas[i] + &#39;&quot; alt&#x3D;&quot;&quot;&gt;&#39;;</span><br><span class="line">                    div.innerHTML &#x3D; &#39;&lt;p&gt;&#39;+c+&#39;&lt;&#x2F;p&gt;&lt;span&gt;&#39;+c+&#39;&lt;&#x2F;span&gt;&#39;;</span><br><span class="line">                    box.appendChild(div);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pubuFn() &#x2F;&#x2F; 每次超过阈值调用;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 拖拽</title>
      <link href="/2020/06/02/HTML5-%E6%8B%96%E6%8B%BD/"/>
      <url>/2020/06/02/HTML5-%E6%8B%96%E6%8B%BD/</url>
      
        <content type="html"><![CDATA[<p>1、设置元素可拖拽属性；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img draggable&#x3D;&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>2、拖动什么 - ondragstart  设置被拖拽元素 需要传递的数据  需要用onondragstart 来监听事件；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; html</span><br><span class="line">...</span><br><span class="line">&lt;img draggable&#x3D;&quot;true&quot; onondragstart &#x3D;&quot;drap(event)&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; javascript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; dataTransfer.setData(format,data)</span><br><span class="line">&#x2F;&#x2F; 方法设置被拖数据的数据类型和值</span><br><span class="line">&#x2F;&#x2F; 参数说明： format 要传递的数据类型；data 传递的数据</span><br><span class="line"></span><br><span class="line">function drap(event)&#123;</span><br><span class="line">&#x2F;&#x2F; 具体使用可以看场景而定 也可以自己设置定义的数据 通过全局声明来使用</span><br><span class="line">event.dataTransfer.setData(&#39;text&#39;,ev.target.id)</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><p>3、放到何处 - ondragover<br>ondragover 事件规定在何处放置被拖动的数据。<br>默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。<br>这要通过调用 ondragover 事件的 event.preventDefault() 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ondragover&#x3D;&quot;allowDrop(event)&quot; &gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F; javascript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">...</span><br><span class="line">function allowDrop(event)&#123;</span><br><span class="line">&#x2F;&#x2F; 阻止默认事件</span><br><span class="line">event.preventDefault()</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><p>4、进行放置 - ondrop<br>当放置被拖数据时，会发生 drop 事件。ondrop 属性调用了一个函数，drop(event)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ondragover&#x3D;&quot;allowDrop(event)&quot; ondrop&#x3D;&quot;drop(event)&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F; javascript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">...</span><br><span class="line">function drop(event)&#123;</span><br><span class="line">&#x2F;&#x2F; 阻止默认事件</span><br><span class="line">event.preventDefault()</span><br><span class="line">&#125;</span><br><span class="line">function allowDrop(event)&#123;</span><br><span class="line">&#x2F;&#x2F; 阻止默认事件</span><br><span class="line">event.preventDefault()</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><p>完成的demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Html5-拖动&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">#div1 &#123;width:350px;height:70px;padding:10px;border:1px solid #aaaaaa;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function allowDrop(ev)</span><br><span class="line">&#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function drag(ev)</span><br><span class="line">&#123;</span><br><span class="line">    ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function drop(ev)</span><br><span class="line">&#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">    var data&#x3D;ev.dataTransfer.getData(&quot;Text&quot;);</span><br><span class="line">    ev.target.appendChild(document.getElementById(data));</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;拖动图片到矩形框中:&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;div1&quot; ondrop&#x3D;&quot;drop(event)&quot; ondragover&#x3D;&quot;allowDrop(event)&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;img id&#x3D;&quot;drag1&quot; src&#x3D;&quot;&#x2F;images&#x2F;logo.png&quot; draggable&#x3D;&quot;true&quot; ondragstart&#x3D;&quot;drag(event)&quot; width&#x3D;&quot;336&quot; height&#x3D;&quot;69&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>获取设备的相应宽高</title>
      <link href="/2020/06/02/%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E7%9A%84%E7%9B%B8%E5%BA%94%E5%AE%BD%E9%AB%98/"/>
      <url>/2020/06/02/%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E7%9A%84%E7%9B%B8%E5%BA%94%E5%AE%BD%E9%AB%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">网页可见区域宽： document.body.clientWidth</span><br><span class="line">网页可见区域高： document.body.clientHeight</span><br><span class="line">网页可见区域宽： document.body.offsetWidth (包括边线的宽)</span><br><span class="line">网页可见区域高： document.body.offsetHeight (包括边线的高)</span><br><span class="line">网页正文全文宽： document.body.scrollWidth</span><br><span class="line">网页正文全文高： document.body.scrollHeight</span><br><span class="line">网页被卷去的高： document.body.scrollTop</span><br><span class="line">网页被卷去的左： document.body.scrollLeft</span><br><span class="line">网页正文部分上： window.screenTop</span><br><span class="line">网页正文部分左： window.screenLeft</span><br><span class="line">屏幕物理分辨率的高： window.screen.height</span><br><span class="line">屏幕物理分辨率的宽： window.screen.width</span><br><span class="line">屏幕可用工作区高度： window.screen.availHeight</span><br><span class="line">屏幕可用工作区宽度： window.screen.availWidth</span><br><span class="line">屏幕缩放因子：window.devicePixelRatio</span><br><span class="line">屏幕逻辑分辨率：window.screen.width * window.devicePixelRatio (缩放因子与物理分辨率的乘积)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS 下键盘唤出后，fixed 元素失效</title>
      <link href="/2020/06/02/iOS-%E4%B8%8B%E9%94%AE%E7%9B%98%E5%94%A4%E5%87%BA%E5%90%8E%EF%BC%8Cfixed-%E5%85%83%E7%B4%A0%E5%A4%B1%E6%95%88/"/>
      <url>/2020/06/02/iOS-%E4%B8%8B%E9%94%AE%E7%9B%98%E5%94%A4%E5%87%BA%E5%90%8E%EF%BC%8Cfixed-%E5%85%83%E7%B4%A0%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>遮罩一般要充满全屏，做好的办法就是设置容器position: fixed;<br>但是如果遮罩上面的弹框需要输入弹出键盘的话，这时fixed就失效了，比如这种情况</p><a id="more"></a><p><img src="https://s1.ax1x.com/2020/06/02/ttbRzQ.png" alt="ttbRzQ.png"></p><p><strong>解决思路</strong><br>iOS 下由于软键盘唤出后，页面 fixed 元素会失效，导致跟随页面一起滚动，那么假如页面不会过长出现滚动，那么即便 fixed 元素失效，也无法跟随页面滚动，也就不会出现上面的问题了。</p><p>那么按照这个思路，如果使 fixed 元素的父级不出现滚动，而将原 body 滚动的区域域移到 main 内部，而 header 和 footer 的样式不变，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;body class&#x3D;&quot;layout-scroll-fixed&quot;&gt;</span><br><span class="line">    &lt;!-- fixed定位的头部 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 可以滚动的区域 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">        &lt;!-- 内容在这里... --&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- fixed定位的底部 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Footer...&quot;&#x2F;&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.header &#123;</span><br><span class="line">    position: fixed;&#x2F;&#x2F;或者absolute</span><br><span class="line">    height: 40px;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">&#125;</span><br><span class="line">.footer &#123;</span><br><span class="line">    position: fixed;&#x2F;&#x2F;或者写成absolute</span><br><span class="line">    height: 30px;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.main &#123;</span><br><span class="line">&#x2F;* main绝对定位，进行内部滚动 *&#x2F;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 40px;</span><br><span class="line">bottom: 30px;</span><br><span class="line">&#x2F;* 使之可以滚动 *&#x2F;</span><br><span class="line"> overflow-y: scroll;</span><br><span class="line">  &#x2F;* 增加该属性，可以增加弹性，是滑动更加顺畅 *&#x2F;</span><br><span class="line">  -webkit-overflow-scrolling: touch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.main .content &#123;</span><br><span class="line">    height: 2000px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue组件多选并展示选中顺序</title>
      <link href="/2020/06/02/vue%E7%BB%84%E4%BB%B6%E5%A4%9A%E9%80%89%E5%B9%B6%E5%B1%95%E7%A4%BA%E9%80%89%E4%B8%AD%E9%A1%BA%E5%BA%8F%EF%BC%9B/"/>
      <url>/2020/06/02/vue%E7%BB%84%E4%BB%B6%E5%A4%9A%E9%80%89%E5%B9%B6%E5%B1%95%E7%A4%BA%E9%80%89%E4%B8%AD%E9%A1%BA%E5%BA%8F%EF%BC%9B/</url>
      
        <content type="html"><![CDATA[<p>在公司某些开发场景中需要多选并显示优先级 现记录一下；<br>基本思路： 根据Vue.js 的数据绑定，当事件发生时会触发数据的变化来更新数据；</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;arrSelect&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">              &lt;li v-for&#x3D;&quot;(item,index) in tableData&quot; :key&#x3D;&quot;item.index&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; @click&#x3D;&quot;fn(item,item.checkval)&quot; :checked&#x3D;&quot;item.checkval&quot; &#x2F;&gt;&lt;span&gt;&#123;&#123; item.date &#125;&#125;-&#123;&#123; item.name &#125;&#125;-&#123;&#123; item.preference &#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;&#x2F;ul&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vue &#x3D;new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">          tableData: [&#123;</span><br><span class="line">                  date: &#39;2016-05-04&#39;,</span><br><span class="line">                  name: &#39;智立方&#39;,</span><br><span class="line">                  checkval: false,</span><br><span class="line">                  preference: &#39;&#39;,</span><br><span class="line">                  address: &#39;上海市番禺路868&#39;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  date: &#39;2016-05-04&#39;,</span><br><span class="line">                  name: &#39;智立方&#39;,</span><br><span class="line">                  checkval: false,</span><br><span class="line">                  preference: &#39;&#39;,</span><br><span class="line">                  address: &#39;上海市番禺路868&#39;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  date: &#39;2016-05-04&#39;,</span><br><span class="line">                  name: &#39;智立方&#39;,</span><br><span class="line">                  checkval: false,</span><br><span class="line">                  preference: &#39;&#39;,</span><br><span class="line">                  address: &#39;上海市番禺路868&#39;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  date: &#39;2016-05-04&#39;,</span><br><span class="line">                  name: &#39;智立方&#39;,</span><br><span class="line">                  checkval: false,</span><br><span class="line">                  preference: &#39;&#39;,</span><br><span class="line">                  address: &#39;上海市番禺路868&#39;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  date: &#39;2016-05-04&#39;,</span><br><span class="line">                  name: &#39;智立方&#39;,</span><br><span class="line">                  checkval: false,</span><br><span class="line">                  preference: &#39;&#39;,</span><br><span class="line">                  address: &#39;上海市番禺路868&#39;</span><br><span class="line">                &#125;],</span><br><span class="line">                handleArr:[], &#x2F;&#x2F; 选中的数组</span><br><span class="line">                handleNum: 0 &#x2F;&#x2F; 选中的顺序</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          fn(val,status)&#123;</span><br><span class="line">            val.checkval &#x3D; !status &#x2F;&#x2F; 再次点击反选字段;</span><br><span class="line">            if( val.checkval )&#123; &#x2F;&#x2F; 根据是否选中来处理相应的选中顺序;</span><br><span class="line">                this.handleArr.push(val); &#x2F;&#x2F; 选中则添加到选中数组；</span><br><span class="line">                val.preference &#x3D; (this.handleNum&lt;&#x3D;this.handleArr.length ?  this.handleNum+&#x3D;1 : this.handleNum &#x3D; this.handleArr.length); &#x2F;&#x2F; 根据选中数组的长度来增加选中顺序值；</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.handleArr.splice(this.handleArr.indexOf(val),1); &#x2F;&#x2F; 反选之后删除选中的数组</span><br><span class="line">                for( let item in this.tableData )&#123; &#x2F;&#x2F; 循环绑定的数据来判断顺序值是否需要减少；</span><br><span class="line">                    if( this.tableData[item].preference&gt;0 &amp;&amp; this.tableData[item].preference &gt; val.preference  )&#123;</span><br><span class="line">                        this.tableData[item].preference --;</span><br><span class="line">                        this.handleNum--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                this.handleNum &#x3D; this.handleArr.length; &#x2F;&#x2F; 将同步数组的长度附顺序字段；目的是获取顺序值目前的最大值；</span><br><span class="line">                val.preference &#x3D; &#39;&#39;; &#x2F;&#x2F; 如果是反选则清空顺序值</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>个人理解 仅供参考 如有不当 欢迎指正</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm install出现: Unexpected end of JSON input while parsing near</title>
      <link href="/2020/06/02/npm-install%E5%87%BA%E7%8E%B0-Unexpected-end-of-JSON-input-while-parsing-near/"/>
      <url>/2020/06/02/npm-install%E5%87%BA%E7%8E%B0-Unexpected-end-of-JSON-input-while-parsing-near/</url>
      
        <content type="html"><![CDATA[<p>安装node版本管理工具的时候 把node卸载了 然后重新安装了node版本 然后就出现了Unexpected end of JSON input while parsing near  网上各种查，，，，终于解决了<br>第一种情况是 最新版的Nodejs与npm版本不合适的问题（因为没更新Node之前是不会的）。<br>解决办法就是 把npm的版本降到4版。<br>在windows下使用cmd执行语句：<strong>npm -g i npm@4</strong>  或者安装6.x 版本；</p><a id="more"></a><p>Mac系统的就按照相同的思路修改就行啦，btw<br><a href="https://blog.csdn.net/weixin_41902031/article/details/80041000" target="_blank" rel="noopener">具体原因看这里</a></p><p>第二种情况是 因为npm存在缓存导致 无法安装<br>在cmd下（windows）执行：<strong>npm cache clean –force</strong></p><p>还有一种情况是我个人遇到的<br>    在nrm下使用taobao的npm链接也会报上面的错误<br>    <strong>解决办法就是:使用npm 而不使用淘宝的镜像</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用xlsx.full.min.js处理excel表格（主要将数据转化为excel表并实现下载）</title>
      <link href="/2020/06/02/%E4%BD%BF%E7%94%A8xlsx-full-min-js%E5%A4%84%E7%90%86excel%E8%A1%A8%E6%A0%BC%EF%BC%88%E4%B8%BB%E8%A6%81%E5%B0%86%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8C%96%E4%B8%BAexcel%E8%A1%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E4%B8%8B%E8%BD%BD%EF%BC%89/"/>
      <url>/2020/06/02/%E4%BD%BF%E7%94%A8xlsx-full-min-js%E5%A4%84%E7%90%86excel%E8%A1%A8%E6%A0%BC%EF%BC%88%E4%B8%BB%E8%A6%81%E5%B0%86%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8C%96%E4%B8%BAexcel%E8%A1%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E4%B8%8B%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>需要文件<a href="https://github.com/SheetJS/js-xlsx/tree/master/dist" target="_blank" rel="noopener">xlsx.full.min.js</a></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;.&#x2F;xlsx.full.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button onclick&#x3D;&quot;downloadExl(jsono)&quot;&gt;导出&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">            以下a标签不需要内容</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&quot; download&#x3D;&quot;这里是下载的文件名.xlsx&quot; id&#x3D;&quot;hf&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var jsono &#x3D; [&#123; &#x2F;&#x2F;测试数据</span><br><span class="line">            &quot;保质期临期预警(天)&quot;: &quot;adventLifecycle&quot;,</span><br><span class="line">            &quot;商品标题&quot;: &quot;title&quot;,</span><br><span class="line">            &quot;建议零售价&quot;: &quot;defaultPrice&quot;,</span><br><span class="line">            &quot;高(cm)&quot;: &quot;height&quot;,</span><br><span class="line">            &quot;商品描述&quot;: &quot;Description&quot;,</span><br><span class="line">            &quot;保质期禁售(天)&quot;: &quot;lockupLifecycle&quot;,</span><br><span class="line">            &quot;商品名称&quot;: &quot;skuName&quot;,</span><br><span class="line">            &quot;商品简介&quot;: &quot;brief&quot;,</span><br><span class="line">            &quot;宽(cm)&quot;: &quot;width&quot;,</span><br><span class="line">            &quot;阿达&quot;: &quot;asdz&quot;,</span><br><span class="line">            &quot;货号&quot;: &quot;goodsNo&quot;,</span><br><span class="line">            &quot;商品条码&quot;: &quot;skuNo&quot;,</span><br><span class="line">            &quot;商品品牌&quot;: &quot;brand&quot;,</span><br><span class="line">            &quot;净容积(cm^3)&quot;: &quot;netVolume&quot;,</span><br><span class="line">            &quot;是否保质期管理&quot;: &quot;isShelfLifeMgmt&quot;,</span><br><span class="line">            &quot;是否串号管理&quot;: &quot;isSNMgmt&quot;,</span><br><span class="line">            &quot;商品颜色&quot;: &quot;color&quot;,</span><br><span class="line">            &quot;尺码&quot;: &quot;size&quot;,</span><br><span class="line">            &quot;是否批次管理&quot;: &quot;isBatchMgmt&quot;,</span><br><span class="line">            &quot;商品编号&quot;: &quot;skuCode&quot;,</span><br><span class="line">            &quot;商品简称&quot;: &quot;shortName&quot;,</span><br><span class="line">            &quot;毛重(g)&quot;: &quot;grossWeight&quot;,</span><br><span class="line">            &quot;长(cm)&quot;: &quot;length&quot;,</span><br><span class="line">            &quot;英文名称&quot;: &quot;englishName&quot;,</span><br><span class="line">            &quot;净重(g)&quot;: &quot;netWeight&quot;,</span><br><span class="line">            &quot;商品分类&quot;: &quot;categoryId&quot;,</span><br><span class="line">            &quot;这里超过了&quot;: 1111.0,</span><br><span class="line">            &quot;保质期(天)&quot;: &quot;expDate&quot;</span><br><span class="line">        &#125;];</span><br><span class="line">        var tmpDown; &#x2F;&#x2F;导出的二进制对象</span><br><span class="line">        function downloadExl(json, type) &#123;</span><br><span class="line">            var tmpdata &#x3D; json[0];</span><br><span class="line">            json.unshift(&#123;&#125;);</span><br><span class="line">            var keyMap &#x3D; []; &#x2F;&#x2F;获取keys</span><br><span class="line">            &#x2F;&#x2F;keyMap &#x3D;Object.keys(json[0]);</span><br><span class="line">            for (var k in tmpdata) &#123;</span><br><span class="line">                keyMap.push(k);</span><br><span class="line">                json[0][k] &#x3D; k;</span><br><span class="line">            &#125;</span><br><span class="line">          var tmpdata &#x3D; [];&#x2F;&#x2F;用来保存转换好的json</span><br><span class="line">                json.map((v, i) &#x3D;&gt; keyMap.map((k, j) &#x3D;&gt; Object.assign(&#123;&#125;, &#123;</span><br><span class="line">                    v: v[k],</span><br><span class="line">                    position: (j &gt; 25 ? getCharCol(j) : String.fromCharCode(65 + j)) + (i + 1)</span><br><span class="line">                &#125;))).reduce((prev, next) &#x3D;&gt; prev.concat(next)).forEach((v, i) &#x3D;&gt; tmpdata[v.position] &#x3D; &#123;</span><br><span class="line">                    v: v.v</span><br><span class="line">                &#125;);</span><br><span class="line">                var outputPos &#x3D; Object.keys(tmpdata); &#x2F;&#x2F;设置区域,比如表格从A1到D10</span><br><span class="line">                var tmpWB &#x3D; &#123;</span><br><span class="line">                    SheetNames: [&#39;mySheet&#39;], &#x2F;&#x2F;保存的表标题</span><br><span class="line">                    Sheets: &#123;</span><br><span class="line">                        &#39;mySheet&#39;: Object.assign(&#123;&#125;,</span><br><span class="line">                            tmpdata, &#x2F;&#x2F;内容</span><br><span class="line">                            &#123;</span><br><span class="line">                                &#39;!ref&#39;: outputPos[0] + &#39;:&#39; + outputPos[outputPos.length - 1] &#x2F;&#x2F;设置填充区域</span><br><span class="line">                            &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                tmpDown &#x3D; new Blob([s2ab(XLSX.write(tmpWB,</span><br><span class="line">                    &#123;bookType: (type &#x3D;&#x3D; undefined ? &#39;xlsx&#39;:type),bookSST: false, type: &#39;binary&#39;&#125;&#x2F;&#x2F;这里的数据是用来定义导出的格式类型</span><br><span class="line">                    ))], &#123;</span><br><span class="line">                    type: &quot;&quot;</span><br><span class="line">                &#125;); &#x2F;&#x2F;创建二进制对象写入转换好的字节流</span><br><span class="line">            var href &#x3D; URL.createObjectURL(tmpDown); &#x2F;&#x2F;创建对象超链接</span><br><span class="line">            document.getElementById(&quot;hf&quot;).href &#x3D; href; &#x2F;&#x2F;绑定a标签</span><br><span class="line">            document.getElementById(&quot;hf&quot;).click(); &#x2F;&#x2F;模拟点击实现下载</span><br><span class="line">            setTimeout(function() &#123; &#x2F;&#x2F;延时释放</span><br><span class="line">                URL.revokeObjectURL(tmpDown); &#x2F;&#x2F;用URL.revokeObjectURL()来释放这个object URL</span><br><span class="line">            &#125;, 100);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function s2ab(s) &#123; &#x2F;&#x2F;字符串转字符流</span><br><span class="line">            var buf &#x3D; new ArrayBuffer(s.length);</span><br><span class="line">            var view &#x3D; new Uint8Array(buf);</span><br><span class="line">            for (var i &#x3D; 0; i !&#x3D; s.length; ++i) view[i] &#x3D; s.charCodeAt(i) &amp; 0xFF;</span><br><span class="line">            return buf;</span><br><span class="line">        &#125;</span><br><span class="line">         &#x2F;&#x2F; 将指定的自然数转换为26进制表示。映射关系：[0-25] -&gt; [A-Z]。</span><br><span class="line">        function getCharCol(n) &#123;</span><br><span class="line">            let temCol &#x3D; &#39;&#39;,</span><br><span class="line">            s &#x3D; &#39;&#39;,</span><br><span class="line">            m &#x3D; 0</span><br><span class="line">            while (n &gt; 0) &#123;</span><br><span class="line">                m &#x3D; n % 26 + 1</span><br><span class="line">                s &#x3D; String.fromCharCode(m + 64) + s</span><br><span class="line">                n &#x3D; (n - m) &#x2F; 26</span><br><span class="line">            &#125;</span><br><span class="line">            return s</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><strong>* 说明：导出示例的测试数据已经含有表头了如果没有表头可以直接将json中的遍历第一条数据的key创建一个value=key（{key:key}）插入到json第一条就可以了*</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用xlsl.full.js导入excel表格</title>
      <link href="/2020/06/02/%E5%88%A9%E7%94%A8xlsl-full-js%E5%AF%BC%E5%85%A5excel%E8%A1%A8%E6%A0%BC/"/>
      <url>/2020/06/02/%E5%88%A9%E7%94%A8xlsl-full-js%E5%AF%BC%E5%85%A5excel%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>需要的文件 <a href="https://github.com/SheetJS/js-xlsx/tree/master/dist" target="_blank" rel="noopener">xlsx.full.min.js</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">        &lt;script src&#x3D;&quot;.&#x2F;xlsx.full.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;file&quot;onchange&#x3D;&quot;importf(this)&quot; &#x2F;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            &#x2F;*</span><br><span class="line">            FileReader共有4种读取方法：</span><br><span class="line">            1.readAsArrayBuffer(file)：将文件读取为ArrayBuffer。</span><br><span class="line">            2.readAsBinaryString(file)：将文件读取为二进制字符串</span><br><span class="line">            3.readAsDataURL(file)：将文件读取为Data URL</span><br><span class="line">            4.readAsText(file, [encoding])：将文件读取为文本，encoding缺省值为&#39;UTF-8&#39;</span><br><span class="line">                         *&#x2F;</span><br><span class="line">            var wb;&#x2F;&#x2F;读取完成的数据</span><br><span class="line">            var rABS &#x3D; false; &#x2F;&#x2F;是否将文件读取为二进制字符串</span><br><span class="line"></span><br><span class="line">            function importf(obj) &#123;&#x2F;&#x2F;导入</span><br><span class="line">                if(!obj.files) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                var f &#x3D; obj.files[0];</span><br><span class="line">                var reader &#x3D; new FileReader();</span><br><span class="line">                reader.onload &#x3D; function(e) &#123;</span><br><span class="line">                    var data &#x3D; e.target.result;</span><br><span class="line">                    if(rABS) &#123;</span><br><span class="line">                        wb &#x3D; XLSX.read(btoa(fixdata(data)), &#123;&#x2F;&#x2F;手动转化</span><br><span class="line">                            type: &#39;base64&#39;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        wb &#x3D; XLSX.read(data, &#123;</span><br><span class="line">                            type: &#39;binary&#39;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#x2F;&#x2F;wb.SheetNames[0]是获取Sheets中第一个Sheet的名字</span><br><span class="line">                    &#x2F;&#x2F;wb.Sheets[Sheet名]获取第一个Sheet的数据</span><br><span class="line">                    document.getElementById(&quot;demo&quot;).innerHTML&#x3D; JSON.stringify( XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]) );</span><br><span class="line">                &#125;;</span><br><span class="line">                if(rABS) &#123;</span><br><span class="line">                    reader.readAsArrayBuffer(f);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    reader.readAsBinaryString(f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            function fixdata(data) &#123; &#x2F;&#x2F;文件流转BinaryString</span><br><span class="line">                var o &#x3D; &quot;&quot;,</span><br><span class="line">                    l &#x3D; 0,</span><br><span class="line">                    w &#x3D; 10240;</span><br><span class="line">                for(; l &lt; data.byteLength &#x2F; w; ++l) o +&#x3D; String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));</span><br><span class="line">                o +&#x3D; String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac下安装nvm及常见问题</title>
      <link href="/2020/06/02/Mac%E4%B8%8B%E5%AE%89%E8%A3%85nvm%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/02/Mac%E4%B8%8B%E5%AE%89%E8%A3%85nvm%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>转 <a href="https://www.jianshu.com/p/04d31f6c22bd" target="_blank" rel="noopener">Mac下安装nvm及常见问题</a><br>前言：(这一步是可选，如果是windows 用户最好是删除已安装的node和npm)<br>1.卸载已安装到全局的 node/npm<br>    如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node 命令在 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node ，npm 命令在全局 node_modules 目录中，具体路径为 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;npm</span><br></pre></td></tr></table></figure><p>安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</p><a id="more"></a><p><strong>一、安装</strong><br>    1、curl 安装<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.33.8&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><br>    或者 wget<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.33.8&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><br>    具体版本查看地址<br>        <a href="https://github.com/creationix/nvm/blob/master/README.md" target="_blank" rel="noopener">https://github.com/creationix/nvm/blob/master/README.md</a><br>安装完成后请重新打开终端环境<br>2、查看安装<br>    安装完 nvm 后，输入nvm，当看到有输出时，则 nvm 安装成功。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm: command not found</span><br></pre></td></tr></table></figure><br>    编辑.bash_profile文件，没有的话就新建一个，</p><blockquote><ol><li>启动终端Terminal</li><li>进入当前用户的home目录<br>输入cd ~</li><li>创建.bash_profile<br>输入touch .bash_profile</li><li>编辑.bash_profile文件<br>输入open .bash_profile<br>第一种方式<br>&lt;1&gt;、为在弹出的.bash_profile文件内进行编辑<br>&lt;2&gt;、编辑完成后直接保存文件<br>&lt;3&gt;、关闭.bash_profile文件<br>&lt;4&gt;、更新配置过的环境变量    输入source .bash_profile<br>&lt;5&gt;、 启动终端Terminal<pre><code>第二种方式来编辑.bash_profile文件</code></pre>在Terminal终端通过指令来对.bash_profile文件进行编辑<br>&lt;1&gt;、输入 vim .bash_profile<br>&lt;2&gt;、输入 i 进行编辑模式<br>&lt;3&gt;、然后把需要编辑的内容键入，编辑完之后直接按esc退出编辑模式，<br>&lt;4&gt;、输入:w进行文件的保存，:wq为保存并退出指令</li></ol></blockquote><p><strong>二、 使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable # 安装最新稳定版 node，现在是 5.0.0</span><br><span class="line">nvm install 4.2.2 # 安装 4.2.2 版本</span><br><span class="line">nvm install 0.12.7 # 安装 0.12.7 版本</span><br><span class="line"></span><br><span class="line"># 特别说明：以下模块安装仅供演示说明，并非必须安装模块</span><br><span class="line">nvm use 4 # 切换至 4.2.2 版本</span><br><span class="line">npm install -g mz-fis # 安装 mz-fis 模块至全局目录，安装完成的路径是 &#x2F;Users&#x2F;&lt;你的用户名&gt;&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v0.12.7&#x2F;lib&#x2F;mz-fis</span><br><span class="line">nvm use 0 # 切换至 0.12.7 版本</span><br><span class="line">npm install -g react-native-cli #安装 react-native-cli 模块至全局目录，安装完成的路径是 &#x2F;Users&#x2F;&lt;你的用户名&gt;&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v4.2.2&#x2F;lib&#x2F;react-native-cli</span><br><span class="line"></span><br><span class="line">nvm alias default 0.12.7 #设置默认 node 版本为 0.12.7</span><br></pre></td></tr></table></figure><p>查看nvm版本：打开新的终端，用nvm current查看当前版本显示</p><p>删除指定版本 node：nvm uninstall v6.6.0</p><p>nvm 提供了 nvm use 命令。这个命令的使用方法和 install 命令类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如，切换到 4.2.2：</span><br><span class="line">nvm use 4.2.2</span><br><span class="line">切换到最新的 &#96;4.2.x&#96;&#96;：</span><br><span class="line">nvm use 4.2</span><br><span class="line">切换到最新版：</span><br><span class="line">nvm use node</span><br></pre></td></tr></table></figure><p>我们还可以用 nvm 给不同的版本号设置别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">我们给 4.2.2 这个版本号起了一个名字叫做 awesome-version</span><br><span class="line">nvm alias awesome-version 4.2.2</span><br><span class="line"></span><br><span class="line">然后我们可以运行：</span><br><span class="line">nvm use awesome-version</span><br><span class="line"></span><br><span class="line">下面这个命令可以取消别名：</span><br><span class="line">nvm unalias awesome-version</span><br><span class="line"></span><br><span class="line">另外，你还可以设置 default 这个特殊别名：</span><br><span class="line">nvm alias default node</span><br></pre></td></tr></table></figure><p>列出已安装实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列理解</title>
      <link href="/2020/06/02/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%90%86%E8%A7%A3/"/>
      <url>/2020/06/02/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>栈 就是先进后出FILO (First-In-Last-Out); 像一个杯子 喝到的始终是最上面的水；<br>队列 就是 先进先出FIFO(First-In-Lsat-Out); 像吸管喝到的始终是底部的水；</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈 先进后出 First-In-Last-Out</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * push() 进来 向尾部添加数据</span></span><br><span class="line"><span class="comment"> *      |  2  |</span></span><br><span class="line"><span class="comment"> *      |  1  |</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |_____|</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * pop() 出去 先删除尾部数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      |  1  |</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |_____|</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stackArr = [<span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line">stackArr.push(<span class="string">'b'</span>);</span><br><span class="line">stackArr.push(<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'stackArr-'</span>,stackArr) <span class="comment">// stackArr-['a','b','c'];</span></span><br><span class="line"></span><br><span class="line">stackArr.pop();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'stackArr-'</span>,stackArr) <span class="comment">// stackArr-['a','b'];</span></span><br><span class="line"></span><br><span class="line">stackArr.pop();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'stackArr-'</span>,stackArr) <span class="comment">// stackArr-['a'];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列 先进先出 First-In-Fisrt-Out</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unshift() 进来 向底部添加数据</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |  2  |</span></span><br><span class="line"><span class="comment"> *      |  1  |</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * shift() 出去 底部的‘1’ 先删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |     |</span></span><br><span class="line"><span class="comment"> *      |  2  |</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> queueList = [<span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line">queueList.unshift(<span class="string">'b'</span>,<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queueList-'</span>,queueList); <span class="comment">// queueList-['b','c','a']</span></span><br><span class="line"></span><br><span class="line">queueList.shift();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queueList-'</span>,queueList); <span class="comment">// queueList-['c','a']</span></span><br><span class="line"></span><br><span class="line">queueList.shift();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queueList-'</span>,queueList); <span class="comment">// queueList-['a']</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用mockjs 模拟前后台交互</title>
      <link href="/2020/06/02/%E4%BD%BF%E7%94%A8mockjs-%E6%A8%A1%E6%8B%9F%E5%89%8D%E5%90%8E%E5%8F%B0%E4%BA%A4%E4%BA%92/"/>
      <url>/2020/06/02/%E4%BD%BF%E7%94%A8mockjs-%E6%A8%A1%E6%8B%9F%E5%89%8D%E5%90%8E%E5%8F%B0%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<p>使用背景： vue项目 axios<br>使用详情：<br>1、首先安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在项目中安装</span><br><span class="line">   npm install mockjs</span><br></pre></td></tr></table></figure><p>2、在项目中使用<br>在项目中src文件夹下 新建mock文件夹 新建mock.js 和index.js文件 这里面用来生成基础的接口<br>项目结构截图：<br><img src="https://s1.ax1x.com/2020/06/02/tt54qf.png" alt="tt54qf.png"><br>数据</p><a id="more"></a><p>mock.js 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------mock.js-------------------</span></span><br><span class="line"><span class="comment">// 引入mockjs</span></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建模拟数据 具体的数据生成方法 请查看文档http://mockjs.com/examples.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatPostMock</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> list = []</span><br><span class="line">  <span class="keyword">const</span> mockdata = &#123;</span><br><span class="line">    id: <span class="string">'@increment'</span>, <span class="comment">// 数据定义 @increment</span></span><br><span class="line">    <span class="string">'object|1'</span>: &#123;</span><br><span class="line">      <span class="string">'310000'</span>: <span class="string">'上海市'</span>,</span><br><span class="line">      <span class="string">'320000'</span>: <span class="string">'江苏省'</span>,</span><br><span class="line">      <span class="string">'330000'</span>: <span class="string">'浙江省'</span>,</span><br><span class="line">      <span class="string">'340000'</span>: <span class="string">'安徽省'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'@pick(["a", "e", "i", "o", "u"])'</span>,</span><br><span class="line">    m1: <span class="string">'@integer(60, 100)'</span>,</span><br><span class="line">    m2: <span class="string">'@integer(60, 100)'</span>,</span><br><span class="line">    m3: <span class="string">'@integer(60, 100)'</span>,</span><br><span class="line">    m4: <span class="string">'@integer(60, 100)'</span>,</span><br><span class="line">    m5: <span class="string">'@integer(60, 100)'</span>,</span><br><span class="line">    m6: <span class="string">'@integer(60, 100)'</span>,</span><br><span class="line">    m7: <span class="string">'@integer(60, 100)'</span>,</span><br><span class="line">    m8: <span class="string">'@integer(60, 100)'</span>,</span><br><span class="line">    m9: <span class="string">'@integer(60, 100)'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = Mock.mock(mockdata)</span><br><span class="line">    list.push(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    size: <span class="number">1</span>,</span><br><span class="line">    pagesize: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  data.data = list</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建模拟数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatGetMock</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> getMock = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|1-10'</span>: [&#123;</span><br><span class="line">      <span class="string">'id|+1'</span>: <span class="number">1</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> getMock</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将模拟好的数据输出出去；</span></span><br><span class="line"><span class="keyword">export</span> &#123;creatPostMock, creatGetMock&#125;</span><br></pre></td></tr></table></figure><p>index.js 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------index.js---------------</span></span><br><span class="line"><span class="comment">// 引入mockjs</span></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"><span class="comment">// 引入生成的模拟数据</span></span><br><span class="line"><span class="keyword">import</span> &#123;creatPostMock, creatGetMock&#125; <span class="keyword">from</span> <span class="string">'./mock'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求延时时间</span></span><br><span class="line">Mock.setup(&#123;</span><br><span class="line">  <span class="comment">// timeout: 2000 方式一 直接设置值</span></span><br><span class="line">  timeout: <span class="string">'2000 - 5000'</span> <span class="comment">// 方式二 设置区间 注意这个是一个字符串形式</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置拦截的接口 格式请看文档 https://github.com/nuysoft/Mock/wiki/Mock.mock()</span></span><br><span class="line"><span class="comment">// 注意: 这里拦截的地址 最好使用正则匹配 如果直接使用字符串接口 就有可能拦截不到带参数的请求 报错404</span></span><br><span class="line">Mock.mock(<span class="regexp">/\/api\/mock(|\?\S*)$/</span>, <span class="string">'post'</span>, creatPostMock)</span><br><span class="line"><span class="comment">// Mock.mock('/api/mock', 'get', creatGetMock) // 方式一</span></span><br><span class="line">Mock.mock(<span class="regexp">/\/api\/mock(|\?\S*)$/</span>, <span class="string">'get'</span>, creatGetMock) <span class="comment">// 方式二</span></span><br></pre></td></tr></table></figure><p>然后在main.js 文件里面引入我们写好的mock/index.js文件 用于拦截请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------main.js-------------------</span></span><br><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span> <span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./mock/index'</span>) <span class="comment">// 引入设置好基础的mock, 用于拦截请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为 false 以阻止 vue 在启动时生成生产提示。</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在vue项目中 axios中无法直接使用vue.use() 所以将axios直接添加到Vue的原型上</span></span><br><span class="line">Vue.prototype.axios = axios</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接下来我们就可以定义api了 在api文件下 新建一个自定义接口文件 如questMock.js 里面是我们需要请求数据的模拟接口；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------questMock.js----------------</span></span><br><span class="line"><span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">this</span>.axios = axios</span><br><span class="line"><span class="comment">// 封装的post</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postMockList</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.axios.post(<span class="string">'/api/mock'</span>, &#123;</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装的get</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMockList</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.axios.get(<span class="string">'/api/mock'</span>, &#123;</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">export</span> &#123; postMockList, getMockList &#125;</span><br></pre></td></tr></table></figure><p>最后在组件中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------HelloWorld---------------------</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"mask"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;boxNone:isMask &#125;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;这是获取mock 数据&lt;/</span>p&gt;</span><br><span class="line">      &lt;button @click=<span class="string">"getMockData"</span>&gt;<span class="keyword">get</span>模拟数据&lt;/button&gt;</span><br><span class="line">      &lt;button @click="postMockData"&gt;post模拟数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; postMockList, getMockList &#125; <span class="keyword">from</span> <span class="string">'../api/questMock.js'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'模拟前后台交互'</span>,</span><br><span class="line">      getMock: getMockList,</span><br><span class="line">      postMock: postMockList,</span><br><span class="line">      isMask: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getMockData () &#123;</span><br><span class="line">      <span class="keyword">this</span>.isMask = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">this</span>.getMock(&#123;</span><br><span class="line">        params: &#123;</span><br><span class="line">          name: <span class="string">'隔壁老王'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.isMask = <span class="literal">true</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'GET模拟数据'</span>, res)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'错误'</span>, e)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    postMockData () &#123;</span><br><span class="line">      <span class="keyword">this</span>.isMask = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">this</span>.postMock(&#123;</span><br><span class="line">        name: <span class="string">'xiaoming'</span>,</span><br><span class="line">        age: <span class="string">'5'</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.isMask = <span class="literal">true</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'POST模拟数据'</span>, res)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'错误'</span>, e)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">h1, h2 &#123;</span></span><br><span class="line"><span class="regexp">  font-weight: normal;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ul &#123;</span></span><br><span class="line"><span class="regexp">  list-style-type: none;</span></span><br><span class="line"><span class="regexp">  padding: 0;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">li &#123;</span></span><br><span class="line"><span class="regexp">  display: inline-block;</span></span><br><span class="line"><span class="regexp">  margin: 0 10px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">a &#123;</span></span><br><span class="line"><span class="regexp">  color: #42b983;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.mask &#123;</span></span><br><span class="line"><span class="regexp">  position: fixed;</span></span><br><span class="line"><span class="regexp">  top: 0;</span></span><br><span class="line"><span class="regexp">  left: 0;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  height: 100%;</span></span><br><span class="line"><span class="regexp">  z-index: 1000;</span></span><br><span class="line"><span class="regexp">  background-color: green;</span></span><br><span class="line"><span class="regexp">  opacity: 0.5;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.mask.boxNone &#123;</span></span><br><span class="line"><span class="regexp">  display: none;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>遇到的问题<br>1、在设置模拟接口时 使用get请求 发现报错404 后来查资料发现是因为直接使用字符串接口会导致mockjs 拦截不到地址  <strong>解决办法就是使用 正则去匹配请求接口</strong><br>2、如何设置请求延时 由于mockjs 是在本地模拟数据所以并未发起真正的请求，无法看到请求的加载效果，<strong>解决办法就是使用Mock.setup({timeout: 加载时间}) 来设置每次的模拟请求时间</strong><br>也可参考以下：<br> <a href="https://segmentfault.com/a/1190000014844604" target="_blank" rel="noopener">vue-cli 中使用 Mockjs </a>.<br>  <a href="https://github.com/Yakima-Teng/mock-server" target="_blank" rel="noopener">服务器端数据模拟，支持请求转发、返回JSON静态数据、返回JS可变数据 </a>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用canvas制作背景水印</title>
      <link href="/2020/06/02/%E4%BD%BF%E7%94%A8canvas%E5%88%B6%E4%BD%9C%E8%83%8C%E6%99%AF%E6%B0%B4%E5%8D%B0/"/>
      <url>/2020/06/02/%E4%BD%BF%E7%94%A8canvas%E5%88%B6%E4%BD%9C%E8%83%8C%E6%99%AF%E6%B0%B4%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>记录使用canvas 制作文字背景水印</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先创建canvas标签 并设置画布大小</span></span><br><span class="line">      <span class="keyword">var</span> watchCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>); <span class="comment">// 创建canvas标签</span></span><br><span class="line">      watchCanvas.id = <span class="string">'myCanvas'</span>; <span class="comment">// 设置canvas id名</span></span><br><span class="line">      watchCanvas.width = <span class="string">'300'</span>; <span class="comment">// 设置画布大小</span></span><br><span class="line">      watchCanvas.height = <span class="string">'120'</span>;</span><br><span class="line">      watchCanvas.style.display = <span class="string">'none'</span>; <span class="comment">// 隐藏画布</span></span><br><span class="line">      <span class="built_in">document</span>.documentElement.appendChild(watchCanvas); <span class="comment">// 将画布插入到document中</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建 画布内容</span></span><br><span class="line">      <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'myCanvas'</span>); <span class="comment">// 获取画布</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取画布上下文</span></span><br><span class="line">      <span class="keyword">var</span> ctx = c.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置字体文字大小及字体类型</span></span><br><span class="line">      ctx.font = <span class="string">'20px Arial'</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置旋转角度 格式 (-45 * Math.PI) / 180</span></span><br><span class="line">      ctx.rotate((<span class="number">-45</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置水印实心文字及偏移量 fillText(text, x, y) strokeText(text,x,y)  说明 text | 在画布上出现的值, x 在x方向上的值(相对于画布), y 在y方向上的值(相对于画布);</span></span><br><span class="line">      ctx.fillText(<span class="string">'Hello Word'</span>, <span class="number">-40</span>, <span class="number">80</span>);</span><br><span class="line">      ctx.fillText(<span class="string">'canvas'</span>, <span class="number">30</span>, <span class="number">160</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 生成base64格式的图片路径</span></span><br><span class="line">      <span class="keyword">var</span> curl = c.toDataURL(<span class="string">'image/png'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将图片作为背景样式插入</span></span><br><span class="line">      <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>).style.background =</span><br><span class="line">        <span class="string">'#bf0000 url('</span> + curl + <span class="string">')'</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置水印文字旋转偏移量时 注意是先旋转在偏移 这个时候的偏移量是以偏转之后的坐标轴为基础的</span></span><br><span class="line">      <span class="comment">// toDataURL(type, encoderOptions) 方法 type | 可选 默认值为'image/png', encoderOptions | 可选 在指定图片格式为 image/jpeg 或 image/webp的情况下，可以从 0 到 1 的区间内选择图片的质量。如果超出取值范围，将会使用默认值 0.92。其他参数会被忽略。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue2.0 render()渲染函数及jsx</title>
      <link href="/2020/06/02/vue2-0-render-%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0%E5%8F%8Ajsx/"/>
      <url>/2020/06/02/vue2-0-render-%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0%E5%8F%8Ajsx/</url>
      
        <content type="html"><![CDATA[<p>render()函数通过虚拟DOM 来渲染页面</p><blockquote><p>因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。<br>                                                        –来源：<a href="https://cn.vuejs.org/v2/guide/render-function.html#%E8%99%9A%E6%8B%9F-DOM" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/render-function.html#%E8%99%9A%E6%8B%9F-DOM</a></p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">createElement()函数用来生成模板：</span><br><span class="line">参数说明：</span><br><span class="line">createElement(</span><br><span class="line"><span class="comment">// @returns &#123;VNode&#125;</span></span><br><span class="line">createElement(</span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125;</span></span><br><span class="line">  <span class="comment">// 一个 HTML 标签字符串，组件选项对象，或者</span></span><br><span class="line">  <span class="comment">// 解析上述任何一种的一个 async 异步函数。必需参数。</span></span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;Object&#125;</span></span><br><span class="line">  <span class="comment">// 一个包含模板相关属性的数据对象</span></span><br><span class="line">  <span class="comment">// 你可以在 template 中使用这些特性。可选参数。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或字符串和对象组成的数组</span></span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">    foo: <span class="literal">true</span>,</span><br><span class="line">    bar: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或对象组成的数组</span></span><br><span class="line">  style: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'14px'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 普通的 HTML 特性</span></span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">'foo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="string">'baz'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅用于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'my-custom-directive'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">      expression: <span class="string">'1 + 1'</span>,</span><br><span class="line">      arg: <span class="string">'foo'</span>,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 作用域插槽格式</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  slot: <span class="string">'name-of-slot'</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  key: <span class="string">'myKey'</span>,</span><br><span class="line">  ref: <span class="string">'myRef'</span>,</span><br><span class="line">  <span class="comment">// 如果你在渲染函数中向多个元素都应用了相同的 ref 名，</span></span><br><span class="line">  <span class="comment">// 那么 `$refs.myRef` 会变成一个数组。</span></span><br><span class="line">  refInFor: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// 子虚拟节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">  <span class="comment">// 也可以使用字符串来生成“文本虚拟节点”。可选参数。</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">'先写一些文字'</span>,</span><br><span class="line">    createElement(<span class="string">'h1'</span>, <span class="string">'一条数据'</span>),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        someProp: <span class="string">'foobar'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">render(h)&#123;</span><br><span class="line"><span class="keyword">return</span> h(</span><br><span class="line"><span class="string">'div'</span>,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">        foo: <span class="literal">true</span>,</span><br><span class="line">        bar: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      style: &#123;</span><br><span class="line">        <span class="comment">// color: 'red',</span></span><br><span class="line">        fontSize: <span class="string">'14px'</span>,</span><br><span class="line">        width: <span class="string">'100px'</span>,</span><br><span class="line">        <span class="comment">// height: '20px',</span></span><br><span class="line">        backgroundColor: <span class="string">'#bf0000'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        id: <span class="string">'foo'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">      on: &#123;</span><br><span class="line">        click: bindclickFun</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'一些内容'</span>,</span><br><span class="line">      createElement(<span class="string">'h1'</span>, <span class="string">'一条文字'</span>)</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsx  参考：<a href="https://www.jianshu.com/p/feede4445142" target="_blank" rel="noopener">https://www.jianshu.com/p/feede4445142</a><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------data</span></span><br><span class="line">randerProp:[</span><br><span class="line">        &#123;</span><br><span class="line">          prop: <span class="string">'month'</span>,</span><br><span class="line">          label: <span class="string">'日期'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          prop: <span class="string">'district'</span>,</span><br><span class="line">          label: <span class="string">'区域'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          prop: <span class="string">'starLevel'</span>,</span><br><span class="line">          label: <span class="string">'星级'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          prop: <span class="string">'maturity'</span>,</span><br><span class="line">          label: <span class="string">'校区成熟属性'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          prop: <span class="string">'teacherName'</span>,</span><br><span class="line">          label: <span class="string">'班主任'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'validStudentLast'</span>, <span class="attr">label</span>: <span class="string">'上月活跃人数'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'newStudent'</span>, <span class="attr">label</span>: <span class="string">'本月新生人数'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'leaveStudent'</span>, <span class="attr">label</span>: <span class="string">'本月CR流失人数'</span>, <span class="attr">width</span>: <span class="number">135</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'validStudent'</span>, <span class="attr">label</span>: <span class="string">'本月活跃人数'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'courseNum'</span>, <span class="attr">label</span>: <span class="string">'续费科目数'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'studentNum'</span>, <span class="attr">label</span>: <span class="string">'续费人次数'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'validCourseLast'</span>, <span class="attr">label</span>: <span class="string">'上月活跃科目数'</span>, <span class="attr">width</span>: <span class="number">116</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'validCourse'</span>, <span class="attr">label</span>: <span class="string">'本月活跃科目'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'addSubject'</span>, <span class="attr">label</span>: <span class="string">'扩科数'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'addSubjectRate'</span>, <span class="attr">label</span>: <span class="string">'扩科续科率'</span>, <span class="attr">filter</span>: <span class="string">'rate'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'validCourseAvg'</span>, <span class="attr">label</span>: <span class="string">'活跃人均科目数'</span>, <span class="attr">width</span>: <span class="number">116</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'referralPeopleNum'</span>, <span class="attr">label</span>: <span class="string">'转介绍人次数'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'deposit'</span>, <span class="attr">label</span>: <span class="string">'定金'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'signNum'</span>, <span class="attr">label</span>: <span class="string">'签单数'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'inPerformance'</span>, <span class="attr">label</span>: <span class="string">'业绩'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'outPerformance'</span>, <span class="attr">label</span>: <span class="string">'退费'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">prop</span>: <span class="string">'performance'</span>, <span class="attr">label</span>: <span class="string">'净业绩'</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">        renderData: [</span><br><span class="line">            &#123;</span><br><span class="line">              addSubject: <span class="number">0.0</span>,</span><br><span class="line">              addSubjectRate: <span class="number">0.0</span>,</span><br><span class="line">              courseNum: <span class="number">0.0</span>,</span><br><span class="line">              deposit: <span class="number">0.0</span>,</span><br><span class="line">              inPerformance: <span class="number">8660.0</span>,</span><br><span class="line">              leaveStudent: <span class="number">0.0</span>,</span><br><span class="line">              maturity: <span class="string">'成熟校区'</span>,</span><br><span class="line">              month: <span class="string">'2019-01-01'</span>,</span><br><span class="line">              newStudent: <span class="number">0.0</span>,</span><br><span class="line">              outPerformance: <span class="number">0.0</span>,</span><br><span class="line">              performance: <span class="number">8660.0</span>,</span><br><span class="line">              referralPeopleNum: <span class="number">0.0</span>,</span><br><span class="line">              signNum: <span class="number">1.0</span>,</span><br><span class="line">              starLevel: <span class="string">'五星校区'</span>,</span><br><span class="line">              studentNum: <span class="number">1.0</span>,</span><br><span class="line">              teacherName: <span class="string">'小二'</span>,</span><br><span class="line">              validCourse: <span class="number">0.0</span>,</span><br><span class="line">              validCourseAvg: <span class="number">0.0</span>,</span><br><span class="line">              validCourseLast: <span class="number">0.0</span>,</span><br><span class="line">              validStudent: <span class="number">0.0</span>,</span><br><span class="line">              validStudentLast: <span class="number">0.0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              addSubject: <span class="number">0.0</span>,</span><br><span class="line">              addSubjectRate: <span class="number">0.0</span>,</span><br><span class="line">              courseNum: <span class="number">0.0</span>,</span><br><span class="line">              deposit: <span class="number">0.0</span>,</span><br><span class="line">              inPerformance: <span class="number">0.0</span>,</span><br><span class="line">              leaveStudent: <span class="number">0.0</span>,</span><br><span class="line">              maturity: <span class="string">'成熟校区'</span>,</span><br><span class="line">              month: <span class="string">'2019-01-01'</span>,</span><br><span class="line">              newStudent: <span class="number">0.0</span>,</span><br><span class="line">              outPerformance: <span class="number">0.0</span>,</span><br><span class="line">              performance: <span class="number">0.0</span>,</span><br><span class="line">              referralPeopleNum: <span class="number">0.0</span>,</span><br><span class="line">              signNum: <span class="number">0.0</span>,</span><br><span class="line">              starLevel: <span class="string">'五星校区'</span>,</span><br><span class="line">              studentNum: <span class="number">0.0</span>,</span><br><span class="line">              teacherName: <span class="string">'王五'</span>,</span><br><span class="line">              validCourse: <span class="number">0.0</span>,</span><br><span class="line">              validCourseAvg: <span class="number">0.0</span>,</span><br><span class="line">              validCourseLast: <span class="number">0.0</span>,</span><br><span class="line">              validStudent: <span class="number">0.0</span>,</span><br><span class="line">              validStudentLast: <span class="number">0.0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              addSubject: <span class="number">0.0</span>,</span><br><span class="line">              addSubjectRate: <span class="number">0.0</span>,</span><br><span class="line">              courseNum: <span class="number">0.0</span>,</span><br><span class="line">              deposit: <span class="number">0.0</span>,</span><br><span class="line">              inPerformance: <span class="number">0.0</span>,</span><br><span class="line">              leaveStudent: <span class="number">15.0</span>,</span><br><span class="line">              maturity: <span class="string">'成熟校区'</span>,</span><br><span class="line">              month: <span class="string">'2019-01-01'</span>,</span><br><span class="line">              newStudent: <span class="number">0.0</span>,</span><br><span class="line">              outPerformance: <span class="number">0.0</span>,</span><br><span class="line">              performance: <span class="number">0.0</span>,</span><br><span class="line">              referralPeopleNum: <span class="number">1.0</span>,</span><br><span class="line">              signNum: <span class="number">0.0</span>,</span><br><span class="line">              starLevel: <span class="string">'五星校区'</span>,</span><br><span class="line">              studentNum: <span class="number">0.0</span>,</span><br><span class="line">              teacherName: <span class="string">'张三'</span>,</span><br><span class="line">              validCourse: <span class="number">-30.0</span>,</span><br><span class="line">              validCourseAvg: <span class="number">2.0</span>,</span><br><span class="line">              validCourseLast: <span class="number">0.0</span>,</span><br><span class="line">              validStudent: <span class="number">-15.0</span>,</span><br><span class="line">              validStudentLast: <span class="number">0.0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              addSubject: <span class="number">0.0</span>,</span><br><span class="line">              addSubjectRate: <span class="number">0.0</span>,</span><br><span class="line">              courseNum: <span class="number">0.0</span>,</span><br><span class="line">              deposit: <span class="number">0.0</span>,</span><br><span class="line">              inPerformance: <span class="number">15470.0</span>,</span><br><span class="line">              leaveStudent: <span class="number">15.0</span>,</span><br><span class="line">              maturity: <span class="string">'成熟校区'</span>,</span><br><span class="line">              month: <span class="string">'2019-01-01'</span>,</span><br><span class="line">              newStudent: <span class="number">0.0</span>,</span><br><span class="line">              outPerformance: <span class="number">0.0</span>,</span><br><span class="line">              performance: <span class="number">15470.0</span>,</span><br><span class="line">              referralPeopleNum: <span class="number">1.0</span>,</span><br><span class="line">              signNum: <span class="number">1.0</span>,</span><br><span class="line">              starLevel: <span class="string">'五星校区'</span>,</span><br><span class="line">              studentNum: <span class="number">1.0</span>,</span><br><span class="line">              teacherName: <span class="string">'陈四'</span>,</span><br><span class="line">              validCourse: <span class="number">-60.0</span>,</span><br><span class="line">              validCourseAvg: <span class="number">4.0</span>,</span><br><span class="line">              validCourseLast: <span class="number">0.0</span>,</span><br><span class="line">              validStudent: <span class="number">-15.0</span>,</span><br><span class="line">              validStudentLast: <span class="number">0.0</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">          ]</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">        &lt;el-table data=&#123;<span class="keyword">this</span>.renderData&#125;&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.randerProp.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(item.prop == <span class="string">'teacherName'</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&#123;item.prop&#125;</span> <span class="attr">label</span>=<span class="string">&#123;item.label&#125;</span> <span class="attr">header-align</span>=<span class="string">"center"</span> <span class="attr">align</span>=<span class="string">"center"</span> &#123;<span class="attr">...</span>&#123;<span class="attr">scopedSlots:</span>&#123;</span></span></span><br><span class="line"><span class="xml">              default:(props)=&gt;&#123;</span></span><br><span class="line"><span class="xml">                if( props.row.teacherName == '陈四')&#123;</span></span><br><span class="line"><span class="xml">                  return h('el-button', &#123;props:&#123;type:'primary'&#125;&#125;, ['按钮'])</span></span><br><span class="line"><span class="xml">                &#125; else &#123;</span></span><br><span class="line"><span class="xml">                  return props.row.teacherName</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">              &#125;</span></span><br><span class="line"><span class="xml">            &#125;&#125;&#125;&gt;<span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&#123;item.prop&#125;</span> <span class="attr">label</span>=<span class="string">&#123;item.label&#125;</span> <span class="attr">show-overflow-tooltip</span> <span class="attr">header-align</span>=<span class="string">"center"</span> <span class="attr">align</span>=<span class="string">"center"</span> &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">        &lt;<span class="regexp">/el-table&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue2.0 组件复用 数据没有更新</title>
      <link href="/2020/06/02/vue2-0-%E7%BB%84%E4%BB%B6%E5%A4%8D%E7%94%A8-%E6%95%B0%E6%8D%AE%E6%B2%A1%E6%9C%89%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/06/02/vue2-0-%E7%BB%84%E4%BB%B6%E5%A4%8D%E7%94%A8-%E6%95%B0%E6%8D%AE%E6%B2%A1%E6%9C%89%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>如果开发过程中出现使用<strong>v-if-else</strong>来切换组件时发现数据没有更新，那么就是因为元素被复用具体可以<a href="https://cn.vuejs.org/v2/guide/conditional.html#%E7%94%A8-key-%E7%AE%A1%E7%90%86%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">参考vue官网-组件</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-<span class="keyword">if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span><br><span class="line">  &lt;input placeholder=<span class="string">"Enter your username"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;template v-else&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input placeholder="Enter your email address"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>查看input元素发现只有input的placeholder的变化了 元素本身就没有改变，而且输入的值也没有被清除；原因是vue为了尽快的渲染页面所以通常会复用已经渲染的元素，所以会导致绑定的数据并没被实时刷新；<br>解决办法就是：对复用的元素添加 <strong>key</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-<span class="keyword">if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span><br><span class="line">  &lt;input placeholder=<span class="string">"Enter your username"</span> key=<span class="string">"username-input"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;template v-else&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input placeholder="Enter your email address" key="email-input"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><p>这样就避免了数据没有刷新的问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则匹配身份证号</title>
      <link href="/2020/06/02/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7/"/>
      <url>/2020/06/02/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>正则匹配身份证号 分为18位和15位<br>首先写正则之前我们先明白身份证号的结构 18位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">地区： ([1-6][1-9]|50)\d&#123;4&#125;  &#x2F;&#x2F; 补充重庆地区50</span><br><span class="line">年的前两位： (18|19|20)            1800-2399</span><br><span class="line">年的后两位： \d&#123;2&#125;</span><br><span class="line">月份：((0[1-9])|10|11|12)</span><br><span class="line">天数： (([0-2][1-9])|10|20|30|31)      闰年不能禁止29+</span><br><span class="line">三位顺序码： \d&#123;3&#125;</span><br><span class="line">校验码： [0-9Xx]</span><br><span class="line">&#x2F;&#x2F; 校验18位的身份证</span><br><span class="line">let _IDRe18 &#x3D;  &#x2F;^([1-6][1-9]|50)\d&#123;4&#125;(18|19|20)\d&#123;2&#125;((0[1-9])|10|11|12)(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$&#x2F;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>身份证号的结构 15位</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">地区：[1-6][1-9]\d&#123;4&#125;</span><br><span class="line">年份只有后两位：\d&#123;2&#125;</span><br><span class="line">月份：((0[1-9])|10|11|12)</span><br><span class="line">天数：(([0-2][1-9])|10|20|30|31)      闰年不能禁止29+</span><br><span class="line">三位顺序码： \d&#123;3&#125;</span><br><span class="line">&#x2F;&#x2F; 校验15位的身份证</span><br><span class="line">let _IDRe15 &#x3D;  &#x2F;^([1-6][1-9]|50)\d&#123;4&#125;\d&#123;2&#125;((0[1-9])|10|11|12)(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;$&#x2F;</span><br></pre></td></tr></table></figure><p><strong>终极版：同时校验18位和15位的身份证</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _IDRe18 = <span class="regexp">/^([1-6][1-9]|50)\d&#123;4&#125;(18|19|20)\d&#123;2&#125;((0[1-9])|10|11|12)(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span></span><br><span class="line"><span class="keyword">let</span> _IDre15 =  <span class="regexp">/^([1-6][1-9]|50)\d&#123;4&#125;\d&#123;2&#125;((0[1-9])|10|11|12)(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;$/</span></span><br><span class="line"><span class="comment">// 校验身份证：</span></span><br><span class="line"><span class="keyword">if</span>( _IDRe18.test( idVal ) || _IDre15.test( idVal )  ) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">' 验证通过 '</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">' 验证未通过 '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1．号码的结构<br>　　公民身份号码是特征组合码，由十七位数字本体码和一位校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。<br>2．地址码<br>　    表示编码对象常住户口所在县（县级市、旗、区）的行政区划代码，按GB/T2260的规定执行。<br>3．出生日期码<br>　　表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日代码之间不用分隔符。<br>4．顺序码<br>　　表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。<br>5．校验码<br>　　根据前面十七位数字码，按照ISO 7064:1983.MOD 11-2校验码计算出来的检验码。</p></blockquote><blockquote><p>地址码<br>        1．华北地区：北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000<br>        2．东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000<br>        华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000，台湾省(886)|710000<br>        3．华中地区： 河南省|410000，湖北省|420000，湖南省|430000<br>        4．华南地区：广东省|440000，广西壮族自治区|450000，海南省|460000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000<br>        5．西南地区： 四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000，重庆市|500000<br>        6．西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000</p></blockquote><blockquote><p>中国大陆居民身份证号码中的地址码的数字编码规则为：<br>        第一、二位表示省（自治区、直辖市、特别行政区）。<br>        第三、四位表示市（地级市、自治州、地区、盟及直辖市所属区和县的汇总码）。其中，01-20，51-70表示地级市；21-50表示地区（自治州、盟）。<br>        第五、六位表示县（区、县级市、旗）。01-18表示地级市、自治州、地区、盟辖县级市；21-80表示县（旗）；81-99表示省直辖县级行政单位。</p></blockquote><blockquote><p>生日期码<br>1．（身份证号码第七位到第十四位）表示编码对象出生的年、月、日，其中年份用四位数字表示，年、月、日之间不用分隔符。例如：1981年05月11日就用19810511表示。</p></blockquote><blockquote><p>顺序码<br>1．（身份证号码第十五位到十七位）地址码所标识的区域范围内，对同年、月、日出生的人员编定的顺序号。其中第十七位奇数分给男性，偶数分给女性。</p></blockquote><blockquote><p>校验码<br>1．作为尾号的校验码，是由号码编制单位按统一的公式计算出来的，如果某人的尾号是0-9，都不会出现X，但如果尾号是10，那么就得用X来代替，因为如果用10做尾号，那么此人的身份证就变成了19位，而19位的号码违反了国家标准，并且中国的计算机应用系统也不承认19位的身份证号码。Ⅹ是罗马数字的10，用X来代替10，可以保证公民的身份证符合国家标准。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Clipboard.js 实现点击复制</title>
      <link href="/2020/06/02/Clipboard-js-%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E5%A4%8D%E5%88%B6/"/>
      <url>/2020/06/02/Clipboard-js-%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>在开发过程中难免会遇到点击分享的需求，这里有两种实现方式：<br><strong>第一种：</strong> 通过原生js 的方法用（<strong>存在兼容性</strong>）：</p><p><strong>document.execCommand(</strong> aCommandName, aShowDefaultUI, aValueArgument<strong>)</strong><br>参数说明：<br>        <strong>aCommandName</strong><br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;命令的名称：常用的为”copy”,”cut”等；</p><p>注：”copy”  拷贝当前选中内容到剪贴板</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; “cut”&nbsp;&nbsp;  剪贴当前选中的文字并复制到剪贴板<br>        <strong>aShowDefaultUI</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是否展示用户界面，一般为 false；</p><p>&nbsp;<strong>aValueArgument</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认为null;</p><p><strong>返回值:Boolean</strong> 如果还是false 则表示还不能支持；</p><p>html ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"copyVal"</span> <span class="attr">readonly</span> <span class="attr">value</span>=<span class="string">"被复制内容"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"copyBtn"</span> &gt;</span>点击复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>javascript：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> copyBtn = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'copyBtn'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">copyBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copyVal = <span class="built_in">document</span>.getElementById(<span class="string">"copyVal"</span>);</span><br><span class="line">        copyVal.select();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>, <span class="literal">false</span>, <span class="literal">null</span>))&#123;</span><br><span class="line">            <span class="comment">//success info</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"doSomething..."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//fail info</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"doSomething..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="comment">//fail info</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"doSomething..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体兼容如下-pc 端浏览器：<br><img src="https://s1.ax1x.com/2020/06/02/tt2EEd.png" alt="tt2EEd.png"><br><img src="https://s1.ax1x.com/2020/06/02/tt2kHH.png" alt="tt2kHH.png"><br>移动端浏览器-ios:<br>    目前是不支持所有浏览器，包括微信浏览器；</p><p><strong>第二种</strong> 使用clipboard.js 实现(<strong>个人推荐</strong>)：<br> 它是一个不需要Flash,就能实现文本复制或者剪切到剪切板的轻量级插件；<br> 其中需要两个参数是</p><blockquote><p>data-clipboard-action 是操作类型值为复制（copy ），剪切（cut） 默认为copy 可以选择不加该属性<br>data-clipboard-target 是要复制或者剪切的对象的id值  必选选项</p></blockquote><p> 具体实例：<br> 可以使用<a href="https://github.com/zenorocha/clipboard.js/wiki/CDN-Providers" target="_blank" rel="noopener">cdn</a> 或者<a href="https://github.com/zenorocha/clipboard.js/archive/master.zip" target="_blank" rel="noopener">直接下载</a> 设置好引用路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;dist&#x2F;clipboard.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"copyVal"</span> <span class="attr">readonly</span> <span class="attr">value</span>=<span class="string">"被复制内容"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"copyBtn"</span>   <span class="attr">data-clipboard-target</span>=<span class="string">"#copyVal"</span>&gt;</span>点击复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化 ClipboardJS对象;</span></span><br><span class="line">      <span class="keyword">var</span> copyBtn = <span class="keyword">new</span> ClipboardJS(<span class="string">'.copyBtn'</span>);</span><br><span class="line"></span><br><span class="line">      copyBtn.on(<span class="string">"success"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">          <span class="comment">// 复制成功</span></span><br><span class="line">          alert(e.text);</span><br><span class="line">          e.clearSelection();</span><br><span class="line">      &#125;);</span><br><span class="line">      copyBtn.on(<span class="string">"error"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">          <span class="comment">//复制失败；</span></span><br><span class="line">          <span class="built_in">console</span>.log( e.action )</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h4 id="这里的ClipboardJS在实例化时，-如果报错：clipboard-is-not-defined"><a href="#这里的ClipboardJS在实例化时，-如果报错：clipboard-is-not-defined" class="headerlink" title="这里的ClipboardJS在实例化时， 如果报错：clipboard is not defined"></a>这里的ClipboardJS在实例化时， 如果报错：<code>clipboard is not defined</code></h4><h4 id="解决办法就是如下："><a href="#解决办法就是如下：" class="headerlink" title="解决办法就是如下："></a>解决办法就是如下：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ClipboardJS(obj)</span><br></pre></td></tr></table></figure><h4 id="原因就是-Clipboard-JS版本是2-0及以上版本"><a href="#原因就是-Clipboard-JS版本是2-0及以上版本" class="headerlink" title="原因就是 Clipboard.JS版本是2.0及以上版本"></a>原因就是 Clipboard.JS版本是2.0及以上版本</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue rander函数 on事件触发失败</title>
      <link href="/2020/06/02/vue-rander%E5%87%BD%E6%95%B0-on%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E5%A4%B1%E8%B4%A5/"/>
      <url>/2020/06/02/vue-rander%E5%87%BD%E6%95%B0-on%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>在编写组件时 使用rander函数编写组件 发现事件没有被触发后来发现写的方式不对<br>错误的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line">render(h)&#123;</span><br><span class="line"><span class="keyword">return</span> h(</span><br><span class="line"><span class="string">'div'</span>,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">        foo: <span class="literal">true</span>,</span><br><span class="line">        bar: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      style: &#123;</span><br><span class="line">        <span class="comment">// color: 'red',</span></span><br><span class="line">        fontSize: <span class="string">'14px'</span>,</span><br><span class="line">        width: <span class="string">'100px'</span>,</span><br><span class="line">        <span class="comment">// height: '20px',</span></span><br><span class="line">        backgroundColor: <span class="string">'#bf0000'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        id: <span class="string">'foo'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">      on: &#123;</span><br><span class="line">        click: <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.$emit(<span class="string">"click"</span>,data)</span><br><span class="line">        &#125;,</span><br><span class="line">        visiableChange:<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">//这里有一个事件名称不是单单词 但是我们on监听时候发现就触发不了emit</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'visible-change'</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'一些内容'</span>,</span><br><span class="line">      createElement(<span class="string">'h1'</span>, <span class="string">'一条文字'</span>)</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>正确使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">render(h)&#123;</span><br><span class="line"><span class="keyword">return</span> h(</span><br><span class="line"><span class="string">'div'</span>,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">        foo: <span class="literal">true</span>,</span><br><span class="line">        bar: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      style: &#123;</span><br><span class="line">        <span class="comment">// color: 'red',</span></span><br><span class="line">        fontSize: <span class="string">'14px'</span>,</span><br><span class="line">        width: <span class="string">'100px'</span>,</span><br><span class="line">        <span class="comment">// height: '20px',</span></span><br><span class="line">        backgroundColor: <span class="string">'#bf0000'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        id: <span class="string">'foo'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">      on: &#123;</span><br><span class="line">        click: <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.$emit(<span class="string">"click"</span>,data)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"visiable-change"</span>:<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">//这里的解决办法就是使用引号包裹一下，就解决非单单词事件名称</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'visible-change'</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'一些内容'</span>,</span><br><span class="line">      createElement(<span class="string">'h1'</span>, <span class="string">'一条文字'</span>)</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：</strong><br>    <strong>render编写组件 非单单词无法触发emit事件</strong></p><p><strong>解决办法：</strong></p><pre><code>将非单单词修改为原生事件名称层 然后用引号包裹一下</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue开发 cross-env跨平台设置环境变量</title>
      <link href="/2020/06/02/vue%E5%BC%80%E5%8F%91-cross-env%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2020/06/02/vue%E5%BC%80%E5%8F%91-cross-env%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="vue开发-cross-env跨平台设置环境变量"><a href="#vue开发-cross-env跨平台设置环境变量" class="headerlink" title="vue开发 cross-env跨平台设置环境变量"></a>vue开发 cross-env跨平台设置环境变量</h1><p>vue开发过程成中使用环境变量 以便在不同的环境里面查看不同的数据。<br>cross-env可以很方便帮我们解决<br>关于介绍 <a href="https://www.npmjs.com/package/cross-env" target="_blank" rel="noopener">cross-env</a></p><p>首先安装 cross-env</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cross-env --save-dev</span><br></pre></td></tr></table></figure><a id="more"></a><p>使用<br>在package.json 里面配置环境变量名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/proxyDev.js 代理地址一</span></span><br><span class="line"><span class="keyword">const</span> proxyDev = &#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://xxxxxxxxxxxx'</span>, <span class="comment">// 代理的接口地址</span></span><br><span class="line">    secure: <span class="literal">false</span> <span class="comment">// 是否验证SSL</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = proxyDev;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/proxyTestCenter.js 代理地址二</span></span><br><span class="line"><span class="keyword">const</span> proxyTestCenter= &#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://xxxxxxxxxxxxx'</span>, <span class="comment">// 代理的接口地址</span></span><br><span class="line">    secure: <span class="literal">false</span> <span class="comment">// 是否验证SSL</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = proxyTestCenter;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/index.js 新增下面代码</span></span><br><span class="line"><span class="keyword">const</span> proxyDev= <span class="built_in">require</span>(<span class="string">'./proxyDev'</span>); <span class="comment">// 新建文件</span></span><br><span class="line"><span class="keyword">const</span> proxyTestCenter= <span class="built_in">require</span>(<span class="string">'./proxyTestCenter'</span>); <span class="comment">// 新建文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyPath;</span><br><span class="line"><span class="keyword">switch</span> (process.env.proxyPath) &#123; <span class="comment">// 根据命令来切换环境变量</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'dev'</span>: proxyPath = proxyDev; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'tc'</span>: proxyPath = proxyTestCenter; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<strong>config/index.js</strong> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改config/index.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">dev: &#123;</span><br><span class="line">...</span><br><span class="line">proxyTable: proxyPath, <span class="comment">// 将 proxyTable得知替换为上面定义的proxyPath 以便使用命令更换环境变量</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在package.json中配置命令 在package.json中修改如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json 中修改scripts 的dev和rc; 配置方式模板 cross-env key=value 注：这里的key是proxyTable value是dev和tc;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env proxyTable=dev webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"</span>,</span><br><span class="line">    <span class="string">"tc"</span>: <span class="string">"cross-env proxyTable=tc webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"</span>,</span><br><span class="line">...</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>最后在使用不同的编译命令就可以来改变环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run dev  &#x2F;&#x2F;执行的是 dev环境变量</span><br><span class="line"></span><br><span class="line">npm run tc  &#x2F;&#x2F;执行的是 tc环境变量</span><br></pre></td></tr></table></figure><p>参考博文/文档：[^1]<br> [http-proxy-middleware 代理]: <a href="https://www.npmjs.com/package/http-proxy-middleware" target="_blank" rel="noopener">https://www.npmjs.com/package/http-proxy-middleware</a><br> [cross-env 跨平台设置环境变量]: <a href="https://www.npmjs.com/package/cross-env" target="_blank" rel="noopener">https://www.npmjs.com/package/cross-env</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ios上input的focus()、autofocus无效处理</title>
      <link href="/2020/06/02/ios%E4%B8%8Ainput%E7%9A%84focus-%E3%80%81autofocus%E6%97%A0%E6%95%88%E5%A4%84%E7%90%86/"/>
      <url>/2020/06/02/ios%E4%B8%8Ainput%E7%9A%84focus-%E3%80%81autofocus%E6%97%A0%E6%95%88%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="出现focus无效原因："><a href="#出现focus无效原因：" class="headerlink" title="出现focus无效原因："></a>出现focus无效原因：</h2><blockquote><p><strong>ios的UIWebView 默认的KeyboardDisplayRequiresUserAction为false，设置为true就行，WKWebView 不支持这个属性，如果要从原生入手解决，请参考<a href="https://stackoverflow.com/questions/32407185/wkwebview-cant-open-keyboard-for-input-field" target="_blank" rel="noopener">https://stackoverflow.com/questions/32407185/wkwebview-cant-open-keyboard-for-input-field</a></strong></p></blockquote><h2 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h2><blockquote><p><strong>从无效原因可以看出，是键盘需要用户触发才能弹出，这导致了autofocus或者element.focus()无效，所以，在键盘弹出的情况下再去focus，或者跳转到带有autofocus的页面也就可以正常focus了</strong></p></blockquote><a id="more"></a><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><blockquote><p><strong>通常的场景是，我们点击页面某个元素 =&gt; 逻辑交互 =&gt; 希望focus元素、或者跳转到有aotufocus的页面。再这里有个大前提，就是要有点击页面行为。</strong></p></blockquote><h2 id="划重点"><a href="#划重点" class="headerlink" title="划重点"></a>划重点</h2><blockquote><p><strong>只要是点击事件的回调就具备focus到input的能力，所以无论是点击生成input再focus到这个input、还是跳转到autofocus的页面，先利用点击focus到一个占位input调起键盘，在键盘存在的情况下调用element.focus()或者跳转到有autofocus的页面就都可以正常focus了。</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.clip&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  clip: rect(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input ref=<span class="string">"tempFocus"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"clip"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div @click=<span class="string">"gotoCommentClick"</span>&gt;快来留言吧！&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">gotoCommentClick() &#123;</span></span><br><span class="line"><span class="regexp">  this.afterLogin().then(_ =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    this.$refs.tempFocus.focus();</span></span><br><span class="line"><span class="regexp">    this.$router.push(this.$route.path + '/</span>comment<span class="string">');</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">mounted() &#123;</span></span><br><span class="line"><span class="string">    this.$refs.editor.focus();</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项-就是调起的键盘如果收回还是会出现focus-autofocus无效；"><a href="#注意事项-就是调起的键盘如果收回还是会出现focus-autofocus无效；" class="headerlink" title="注意事项 就是调起的键盘如果收回还是会出现focus(),autofocus无效；"></a>注意事项 就是调起的键盘如果收回还是会出现focus(),autofocus无效；</h3><p>参考文章  <a href="https://www.jianshu.com/p/ea0b447c781e" target="_blank" rel="noopener">ios上input的focus()、autofocus无效处理方法</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>h5页面在安卓手机浏览器上不能上下移动的问题</title>
      <link href="/2020/06/02/h5%E9%A1%B5%E9%9D%A2%E5%9C%A8%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E4%B8%8D%E8%83%BD%E4%B8%8A%E4%B8%8B%E7%A7%BB%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/02/h5%E9%A1%B5%E9%9D%A2%E5%9C%A8%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E4%B8%8D%E8%83%BD%E4%B8%8A%E4%B8%8B%E7%A7%BB%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>1、<strong>当在css中加入下面样式，会导致页面无法正常上下滑动</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// css 文件</span><br><span class="line">&#123; <span class="attribute">touch-action</span>: none; &#125;</span><br></pre></td></tr></table></figure><p><strong>这行代码后，会导致页面无法正常上下滑动，</strong></p><a id="more"></a><h2 id="解决办法：修改为默认值-touch-action-auto-或者删除改行样式"><a href="#解决办法：修改为默认值-touch-action-auto-或者删除改行样式" class="headerlink" title="解决办法：修改为默认值{ touch-action: auto; }或者删除改行样式"></a>解决办法：修改为默认值<code>{ touch-action: auto; }</code>或者删除改行样式</h2><p>原因：<br>CSS属性 touch-action 值说明：<br>auto<br>    当触控事件发生在元素上时，由浏览器来决定进行哪些操作，比如对viewport进行平滑、缩放等。<br>none<br>    <strong>当触控事件发生在元素上时，不进行任何操作。</strong><br>pan-x<br>    启用单指水平平移手势。可以与 pan-y 、pan-up、pan-down 和／或 pinch-zoom 组合使用。<br>pan-y<br>    启用单指垂直平移手势。可以与 pan-x 、pan-left 、pan-right 和／或 pinch-zoom 组合使用。<br>manipulation<br>    浏览器只允许进行滚动和持续缩放操作。任何其它被auto值支持的行为不被支持。启用平移和缩小缩放手势，但禁用其他非标准手势，例如双击以进行缩放。 禁用双击可缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要。 这是“pan-x pan-y pinch-zoom”（为了兼容性本身仍然有效）的别名。<br>pan-left, pan-right,pan-up,pan-down<br>    启用以指定方向滚动开始的单指手势。 一旦滚动开始，方向可能仍然相反。 请注意，滚动“向上”（pan-up）意味着用户正在将其手指向下拖动到屏幕表面上，同样 pan-left 表示用户将其手指向右拖动。 多个方向可以组合，除非有更简单的表示（例如，“pan-left pan-right”无效，因为“pan-x”更简单，而“pan-left pan-down”有效）。<br>pinch-zoom<br>启用多手指平移和缩放页面。 这可以与任何平移值组合。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">参考地址:关于touch-action的用法</a></p><p>2.是否在css中加入了overflow：hidden；<br>超出隐藏也会导致页面无法滑动；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// css 文件</span><br><span class="line">&#123; overflow：hidden；&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>3、js方面的问题，主要是有在touchstart、touchmove或touchend等事件中的阻止默认事件的原因</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js文件</span></span><br><span class="line">e.preventDefault();   <span class="comment">//会阻止默认行为</span></span><br></pre></td></tr></table></figure><p>最后滑动动作优化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">上下拉动滚动条时卡顿、慢</span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-overflow-scrolling</span>: touch;</span><br><span class="line">    <span class="attribute">overflow-scrolling</span>: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm install -S | --save | -D | --save-dev | -g 说明</title>
      <link href="/2020/06/02/npm-install-S-save-D-save-dev-g-%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/06/02/npm-install-S-save-D-save-dev-g-%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>npm 安装包命令</p><h4 id="1、局部安装"><a href="#1、局部安装" class="headerlink" title="1、局部安装"></a>1、局部安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;package_name&gt;</span><br></pre></td></tr></table></figure><p>说明 安装到当前项目</p><blockquote><p>npm 5x 以后 这个命令等同于npm install –save <package_name> 同时也是会同样写入到依赖 dependencies</p></blockquote><h4 id="2、-全局安装-g"><a href="#2、-全局安装-g" class="headerlink" title="2、 全局安装 -g"></a>2、 全局安装 -g</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g &lt;package_name&gt;</span><br></pre></td></tr></table></figure><p>安装到全局并不会体现到package.json 里面</p><h4 id="3、安装到生产依赖-–save"><a href="#3、安装到生产依赖-–save" class="headerlink" title="3、安装到生产依赖 –save"></a>3、安装到生产依赖 –save</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  &lt;package_name&gt;  --save | -S</span><br></pre></td></tr></table></figure><p>安装到当前项目，并将包信息写入到dependencies</p><h4 id="4、安装到开发依赖-–save-dev"><a href="#4、安装到开发依赖-–save-dev" class="headerlink" title="4、安装到开发依赖 –save-dev"></a>4、安装到开发依赖 –save-dev</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  &lt;package_name&gt;  --save-dev | -D</span><br></pre></td></tr></table></figure><p>安装到当前项目 并写入到devDependencies</p><h5 id="devDependencies与dependencies-的区别"><a href="#devDependencies与dependencies-的区别" class="headerlink" title="devDependencies与dependencies 的区别:"></a>devDependencies与dependencies 的区别:</h5><blockquote><p>devDependencies 是本地开发时用的依赖项<br>dependencies 是生产环境的依赖项</p></blockquote><h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>会将package.json 里面的devDependencies和dependencies下的所有包都会下载到项目的node_modules文件夹下(没有的改文件夹会新建一个)</p><h5 id="只安装生产依赖"><a href="#只安装生产依赖" class="headerlink" title="只安装生产依赖"></a>只安装生产依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --production</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webkit-overflow-scrolling:touch; ios橡皮筋效果卡屏，滚动穿透 --已解决</title>
      <link href="/2020/06/02/webkit-overflow-scrolling-touch-ios%E6%A9%A1%E7%9A%AE%E7%AD%8B%E6%95%88%E6%9E%9C%E5%8D%A1%E5%B1%8F%EF%BC%8C%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F-%E5%B7%B2%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/06/02/webkit-overflow-scrolling-touch-ios%E6%A9%A1%E7%9A%AE%E7%AD%8B%E6%95%88%E6%9E%9C%E5%8D%A1%E5%B1%8F%EF%BC%8C%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F-%E5%B7%B2%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h4 id="webkit-overflow-scrolling-属性"><a href="#webkit-overflow-scrolling-属性" class="headerlink" title="-webkit-overflow-scrolling 属性"></a>-webkit-overflow-scrolling 属性</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">MDN中概述</a> 入下</p><blockquote><p>-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.</p></blockquote><h5 id="值选项"><a href="#值选项" class="headerlink" title="值选项"></a>值选项</h5><blockquote><p>1、auto<br>  使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止<br>  2、touch<br>  使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。</p></blockquote><a id="more"></a><h4 id="问题-BUG"><a href="#问题-BUG" class="headerlink" title="问题 BUG"></a>问题 BUG</h4><h5 id="1、使用了-webkit-overflow-scrolling-touch之后，页面偶尔会卡住不动。"><a href="#1、使用了-webkit-overflow-scrolling-touch之后，页面偶尔会卡住不动。" class="headerlink" title="1、使用了-webkit-overflow-scrolling:touch之后，页面偶尔会卡住不动。"></a>1、使用了-webkit-overflow-scrolling:touch之后，页面偶尔会卡住不动。</h5><p>   <strong>复现场景</strong>：发现页面在滚动期间是不会出现卡住的问题，但是在滚动条到顶部或者底部的时候会出现这个问题<br>   <strong>分析问题</strong>：如果在到达顶部/底部的时候不让它到达顶部/底部,是不是可以规避这个问题<br>   <strong>解决办法</strong>: 在滑动的时候为滑动区域添加 <code>scroll事件</code>监听滚动条是否到了底部/顶部 如果到了顶部/底部那么让<code>scrollTop</code>[^1]相应的减少 1；<br>   代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取滚动区域</span></span><br><span class="line"><span class="keyword">let</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'scrollSectionArea'</span>)</span><br><span class="line"><span class="comment">// 获取滚动内容的高度 如果是在是vue 使用动态的获取高度请将获取元素替换为 ref 来获取,不然是获取不到高度的 在监听函数内部注意this指向</span></span><br><span class="line"><span class="keyword">let</span> scrollHeight =  <span class="built_in">document</span>.getElementById(<span class="string">'scrollSection'</span>).scrollHeight;</span><br><span class="line"></span><br><span class="line">el.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果滚动条到顶部/底部则scrollTop值相应的减 1</span></span><br><span class="line"><span class="keyword">if</span> (el.scrollTop &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">  el.scrollTop = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((el.scrollTop + el.offsetHeight) &gt;= (scrollHeight - <span class="number">1</span>)) &#123;</span><br><span class="line">  el.scrollTop = scrollHeight - el.offsetHeight - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2、使用了-webkit-overflow-scrolling:touch之后，弹窗会引发底部滑动（滚动穿透）。<br>  <strong>复现场景</strong>：弹窗带有滚动内容 滑动到底部或者顶部会触发底层的滚动；<br>   <strong>分析问题</strong>：滚动事件穿透，<br>   <strong>解决办法</strong>: 弹窗显示的时候固定底部滚动并记录底层scrollTop值，并将底部内容设置为position: fixed;<br>  height: 100%; 来达到固定底层的目的，然后就可以规避滚动穿透；<br>  代码如下：<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> // css</span><br><span class="line"> <span class="comment">/* 解决点击穿透滑动失效 */</span></span><br><span class="line"><span class="selector-class">.mask_show</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js部分</span></span><br><span class="line">data:&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...</span><br><span class="line">eventScrollTop: <span class="number">0</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line"><span class="comment">// 弹窗显示的时候调用 记录底部滚动条位置</span></span><br><span class="line">setScrollTopValue() &#123;</span><br><span class="line"><span class="keyword">this</span>.eventScrollTop = <span class="built_in">document</span>.scrollingElement.scrollTop ||</span><br><span class="line">                <span class="built_in">document</span>.documentElement.scrollTop ||</span><br><span class="line">                <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line"><span class="built_in">document</span>.body.classList.add(<span class="string">'mask_show '</span>);</span><br><span class="line"><span class="built_in">document</span>.body.style.top = -<span class="keyword">this</span>.eventScrollTop + <span class="string">'px'</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 弹窗关闭的时候调用 回归到原来滚动条位置</span></span><br><span class="line">useScrollTopValue() &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.remove(<span class="string">'mask_show'</span>);</span><br><span class="line">    <span class="built_in">document</span>.scrollingElement.scrollTop = <span class="built_in">document</span>.documentElement.scrollTop = <span class="built_in">document</span>.body.scrollTop = <span class="keyword">this</span>.eventScrollTop;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[^1]: 底部 scrollTop = scrollHeight- offsetHeight<br><strong>offsetHeight</strong>：包括元素的边框、内边距和元素的水平滚动条（如果存在且渲染的话），不包含:before或:after等伪类元素的高度。<br><strong>scrollHeight</strong>：值与元素视图填充所有内容所需要的最小值clientHeight相同。包括元素的padding，但不包括元素的border和margin。scrollHeight也包括 ::before 和 ::after这样的伪元素。</p><p>参考文档：<a href="https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247484280&idx=1&sn=63ae69e55f3590c42f52c208db3bc3be&chksm=fa2be391cd5c6a877a6ab37d17067a2a1998ffdc9af42aa4a1cda7f93a6b7f457529eb64896b&mpshare=1&scene=1&srcid=&key=8df06d6b6fc234cf15109e8931ffa1e60dc6de4f8a5b317840422a6bdb0ca8558f888c8bd545b30566e4e1f1b7b339e17875e54d16411a596fb5ef1b02a50359b8550a248aa25aab345754dec0a0f290&ascene=1&uin=MTMyMzkwNzQ0MQ%3D%3D&devicetype=Windows+10&version=62060739&lang=zh_CN&pass_ticket=sGx9Uuwxeper%2B1H5fZA88N2x1ErrdSdkX4lVKdIZrxZeWVcwNUXvzfdZ50Qz0ia6" target="_blank" rel="noopener">滚动穿透问题的解决方案</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3手工彩虹</title>
      <link href="/2020/06/02/CSS3%E6%89%8B%E5%B7%A5%E5%BD%A9%E8%99%B9/"/>
      <url>/2020/06/02/CSS3%E6%89%8B%E5%B7%A5%E5%BD%A9%E8%99%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://imgchr.com/i/ttrrEq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttrrEq.png" alt="ttrrEq.png"></a></p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caihong"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.caihong</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>:</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> inset red,</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> inset orange,</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> inset yellow,</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> inset lime,</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span> inset aqua,</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span> inset blue,</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">35px</span> inset magenta;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">0</span> <span class="number">50%</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path#fill-rule" target="_blank" rel="noopener">clip-path属性详情https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path#fill-rule</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用 git命令大全</title>
      <link href="/2020/06/02/%E5%B8%B8%E7%94%A8-git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/06/02/%E5%B8%B8%E7%94%A8-git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>Git图形化界面使用容易，但是命令就不太会了, 所以学习下Git命令的用法…<br>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br><a href="https://imgchr.com/i/ttJdGn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttJdGn.jpg" alt="ttJdGn.jpg"></a></p><a id="more"></a><p><img src="https://s1.ax1x.com/2020/06/02/ttJw2q.jpg" alt="ttJw2q.jpg"></p><hr><h4 id="fetch-vs-pull"><a href="#fetch-vs-pull" class="headerlink" title="fetch vs pull"></a>fetch vs pull</h4><p>git fetch是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。<br>而git pull 则是将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决。</p><hr><p>用 Git 命令清单。几个专用名词的译名如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Workspace：工作区</span><br><span class="line">Index &#x2F; Stage：暂存区</span><br><span class="line">Repository：仓库区（或本地仓库）</span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></table></figure><h3 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]”</span><br><span class="line"></span><br><span class="line">git 修改当前的project的用户名的命令为：</span><br><span class="line">&gt; git config user.name 你的目标用户名;</span><br><span class="line">git修改当前的project提交邮箱的命令为：</span><br><span class="line">&gt; git config user.email 你的目标邮箱名;</span><br><span class="line">如果你要修改当前全局的用户名和邮箱时，需要在上面的两条命令中添加一个参数，–global，代表的是全局。</span><br><span class="line">命令分别为：</span><br><span class="line">&gt; git config  --global user.name 你的目标用户名；</span><br><span class="line">&gt; git config  --global user.email 你的目标邮箱名;</span><br></pre></td></tr></table></figure><h3 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h3 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line">git checkout -b appoint_box（别名） origin&#x2F;feature&#x2F;20181128_1491627_appoint_box_1（分支名）</span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure><h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h3 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"># 显示暂存区和工作区的代码差异</span><br><span class="line">$ git diff</span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br><span class="line">可以得到cimmit id</span><br><span class="line"># 从本地master拉取代码更新当前分支：branch 一般为master</span><br><span class="line">$ git rebase [branch]</span><br></pre></td></tr></table></figure><h3 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ git remote update  --更新远程仓储</span><br><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h3 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h3 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><p>上传本地项目到远程仓库<br>1、（先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>2、把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>3、用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#39;first commit&#39;</span><br></pre></td></tr></table></figure><p>4、关联到远程库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 你的远程库地址</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;githubusername&#x2F;demo.git</span><br></pre></td></tr></table></figure><p>5、获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>6、把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>7、状态查询命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>element-ui table列合并--支持多个列 开箱即用</title>
      <link href="/2020/06/02/element-ui-table%E5%88%97%E5%90%88%E5%B9%B6-%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E5%88%97-%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8/"/>
      <url>/2020/06/02/element-ui-table%E5%88%97%E5%90%88%E5%B9%B6-%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E5%88%97-%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>项目中使用table组件的时候，存在合并列或者合并行看element-ui table组件的文档<br>由于数据是动态获取，所以存在合并不方便的场景<br>所以换个思路来实现合并<br>具体代码：</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:span-method</span>=<span class="string">"arraySpanMethod"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">border</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"width: 100%; margin-top: 20px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"ID"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"姓名"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"amount1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"数值 1（元）"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"amount2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"数值 2（元）"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"amount3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"数值 3（元）"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="comment">// 模拟后台返回数据</span></span><br><span class="line">  tableData: [&#123;</span><br><span class="line">          id: <span class="string">'12987122'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          amount1: <span class="string">'234'</span>,</span><br><span class="line">          amount2: <span class="string">'3.2'</span>,</span><br><span class="line">          amount3: <span class="number">10</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          id: <span class="string">'12987123'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          amount1: <span class="string">'165'</span>,</span><br><span class="line">          amount2: <span class="string">'4.43'</span>,</span><br><span class="line">          amount3: <span class="number">12</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          id: <span class="string">'12987124'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          amount1: <span class="string">'324'</span>,</span><br><span class="line">          amount2: <span class="string">'1.9'</span>,</span><br><span class="line">          amount3: <span class="number">9</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          id: <span class="string">'12987125'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          amount1: <span class="string">'621'</span>,</span><br><span class="line">          amount2: <span class="string">'2.2'</span>,</span><br><span class="line">          amount3: <span class="number">17</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          id: <span class="string">'12987126'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          amount1: <span class="string">'539'</span>,</span><br><span class="line">          amount2: <span class="string">'4.1'</span>,</span><br><span class="line">          amount3: <span class="number">15</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          id: <span class="string">'12987126'</span>,</span><br><span class="line">          name: <span class="string">'王小虎3'</span>,</span><br><span class="line">          amount1: <span class="string">'539'</span>,</span><br><span class="line">          amount2: <span class="string">'4.1'</span>,</span><br><span class="line">          amount3: <span class="number">15</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          id: <span class="string">'12987126'</span>,</span><br><span class="line">          name: <span class="string">'王小虎2'</span>,</span><br><span class="line">          amount1: <span class="string">'539'</span>,</span><br><span class="line">          amount2: <span class="string">'4.1'</span>,</span><br><span class="line">          amount3: <span class="number">15</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          id: <span class="string">'12987126'</span>,</span><br><span class="line">          name: <span class="string">'王小虎2'</span>,</span><br><span class="line">          amount1: <span class="string">'539'</span>,</span><br><span class="line">          amount2: <span class="string">'4.1'</span>,</span><br><span class="line">          amount3: <span class="number">15</span></span><br><span class="line">        &#125;],</span><br><span class="line">        needMergeArr: [<span class="string">'name'</span>, <span class="string">'id'</span>], <span class="comment">// 有合并项的列</span></span><br><span class="line">     rowMergeArrs: &#123;&#125;, <span class="comment">// 包含需要一个或多个合并项信息的对象</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>实现合并行或列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>row:Object 需要合并的列name 如:'name' 'id'</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>column:Object 当前行的行数，由合并函数传入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>rowIndex:Number 当前列的数据，由合并函数传入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>columnIndex:Number 当前列的数据，由合并函数传入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>函数可以返回一个包含两个元素的数组，第一个元素代表rowspan，第二个元素代表colspan。 也可以返回一个键名为rowspan和colspan的对象</span></span><br><span class="line"><span class="comment">     * 参考地址：https://element.eleme.cn/#/zh-CN/component/table#table-biao-ge</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    arraySpanMethod(&#123; row, column, rowIndex, columnIndex &#125;) &#123;</span><br><span class="line">        <span class="comment">// 没办法循环判断具体是那一列 所以就只好写了多个if</span></span><br><span class="line">        <span class="keyword">if</span> (column.property === <span class="string">'name'</span>) <span class="keyword">return</span> <span class="keyword">this</span>.mergeAction(<span class="string">'name'</span>, rowIndex, column);</span><br><span class="line">        <span class="keyword">if</span> (column.property === <span class="string">'id'</span>) <span class="keyword">return</span> <span class="keyword">this</span>.mergeAction(<span class="string">'id'</span>, rowIndex, column);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>根据数组来确定单元格是否需要合并</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>val:String 需要合并的列name 如:'name' 'id'</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>rowIndex:Number 当前行的行数，由合并函数传入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>colData:Object 当前列的数据，由合并函数传入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>返回值为一个数组表示该单元格是否需要合并; 说明: [0,0]表示改行被合并了 [n+,1]n为1时表示该单元格不动,n大于1时表示合并了N-1个单元格</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    mergeAction(val, rowIndex, colData) &#123;</span><br><span class="line">        <span class="keyword">let</span> _row = <span class="keyword">this</span>.rowMergeArrs[val].rowArr[rowIndex];</span><br><span class="line">        <span class="keyword">let</span> _col = _row &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> [_row, _col];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>根据数组将指定对象转化为相应的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>arr:Array[String] 必填 必须是字符串形式的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>data:Array 必填 需要转化的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>返回一个对象</span></span><br><span class="line"><span class="comment">     * 例：rowMerge(['name','value'], [&#123;value:'1', name:'小明'&#125;, &#123;value:'2', name:'小明'&#125;, &#123;value:'3', name:'小明'&#125;, &#123;value:'1', name:'小明'&#125;, &#123;value:'1', name:'小明'&#125;])</span></span><br><span class="line"><span class="comment">     * 返回值: &#123;</span></span><br><span class="line"><span class="comment">     *          name:&#123;</span></span><br><span class="line"><span class="comment">     *            rowArr: [5, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">     *            rowMergeNum: 0,</span></span><br><span class="line"><span class="comment">     *          &#125;,</span></span><br><span class="line"><span class="comment">     *          value: &#123;</span></span><br><span class="line"><span class="comment">     *            rowArr: [1, 1, 1, 2, 0],</span></span><br><span class="line"><span class="comment">     *            rowMergeNum: 3</span></span><br><span class="line"><span class="comment">     *          &#125;</span></span><br><span class="line"><span class="comment">     *        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    rowMergeHandle(arr, data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr) &amp;&amp; !arr.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(data) &amp;&amp; !data.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">let</span> needMerge = &#123;&#125;;</span><br><span class="line">      arr.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">        needMerge[i] = &#123;</span><br><span class="line">          rowArr: [],</span><br><span class="line">          rowMergeNum: <span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">        data.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            needMerge[i].rowArr.push(<span class="number">1</span>);</span><br><span class="line">            needMerge[i].rowMergeNum = <span class="number">0</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (item[i] === data[index - <span class="number">1</span>][i]) &#123;</span><br><span class="line">              needMerge[i].rowArr[needMerge[i].rowMergeNum] += <span class="number">1</span>;</span><br><span class="line">              needMerge[i].rowArr.push(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              needMerge[i].rowArr.push(<span class="number">1</span>);</span><br><span class="line">              needMerge[i].rowMergeNum = index;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> needMerge;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line"><span class="keyword">this</span>.rowMergeArrs = <span class="keyword">this</span>.rowMergeHandle(<span class="keyword">this</span>.needMergeArr, <span class="keyword">this</span>.tableData); <span class="comment">// 处理数据</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><a href="https://imgchr.com/i/ttGzE4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttGzE4.png" alt="ttGzE4.png"></a></p><p><a href="https://www.cnblogs.com/yuwenjing0727/p/10110721.html" target="_blank" rel="noopener">参考地址 - elementUI表格合并单元格</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决：Uncaught ReferenceError: regeneratorRuntime is not defined</title>
      <link href="/2020/06/02/%E8%A7%A3%E5%86%B3%EF%BC%9AUncaught-ReferenceError-regeneratorRuntime-is-not-defined/"/>
      <url>/2020/06/02/%E8%A7%A3%E5%86%B3%EF%BC%9AUncaught-ReferenceError-regeneratorRuntime-is-not-defined/</url>
      
        <content type="html"><![CDATA[<p>在使用 vuex actions 里的 异步函数 （async）时，出现<strong>regeneratorRuntime is not defined</strong> 错误</p><p>问题：<br>    <strong>使用 ES7 的 async/await 时报错。</strong></p><p><strong>原因：regeneratorRuntime在浏览器上无法识别，需要安装一个<br>babel-plugin-transform-runtime插件</strong></p><a id="more"></a><p>安装插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev babel-plugin-transform-runtime</span><br></pre></td></tr></table></figure><p>在 <strong>.babelrc</strong> 文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">[</span><br><span class="line">  &quot;transform-runtime&quot;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;helpers&quot;: false,</span><br><span class="line">    &quot;polyfill&quot;: false,</span><br><span class="line">    &quot;regenerator&quot;: true,</span><br><span class="line">    &quot;moduleName&quot;: &quot;babel-runtime&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html input=&#39;file&#39; 浏览时只显示指定文件类型 如xls、xlsx、csv、</title>
      <link href="/2020/06/02/html-input-file-%E6%B5%8F%E8%A7%88%E6%97%B6%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B-%E5%A6%82xls%E3%80%81xlsx%E3%80%81csv%E3%80%81/"/>
      <url>/2020/06/02/html-input-file-%E6%B5%8F%E8%A7%88%E6%97%B6%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B-%E5%A6%82xls%E3%80%81xlsx%E3%80%81csv%E3%80%81/</url>
      
        <content type="html"><![CDATA[<p>html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"fileSelect"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Valid Accept Types:<br>对于 CSV 文件 (.csv), 使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">".csv"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>对于Excel 2003-2007 (.xls)文件, 使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"application/vnd.ms-excel"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> 对于Excel 2010 (.xlsx)文件, 使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>对于文本 (.txt)文件, 使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"text/plain"</span> /&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>对于图片(.png/.jpg/etc)文件, 使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>对于 HTML (.htm,.html)文件, 使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"text/html"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>对于视频Video (.avi, .mpg, .mpeg, .mp4)文件, 使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"video/*"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>对于音频Audio (.mp3, .wav, etc)文件, 使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"audio/*"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>对于 PDF 文件, 使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">".pdf"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 正则匹配整数和小数</title>
      <link href="/2020/06/02/JS-%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E6%95%B4%E6%95%B0%E5%92%8C%E5%B0%8F%E6%95%B0/"/>
      <url>/2020/06/02/JS-%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E6%95%B4%E6%95%B0%E5%92%8C%E5%B0%8F%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>正则匹配正整数和小数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _check = <span class="regexp">/^([1-9][\d]&#123;0,6&#125;|0)(\.[\d]&#123;1,2&#125;)?$/</span>; <span class="comment">//限制小数点前后位数</span></span><br><span class="line"><span class="keyword">let</span> _check1 = <span class="regexp">/^([1-9][\d]*|0)(\.[\d]+)?$/</span>; <span class="comment">//不限制小数点前后位数</span></span><br><span class="line">_check.test(<span class="string">'0.10'</span>) <span class="comment">// true</span></span><br><span class="line">_check.test(<span class="string">'000.10'</span>) <span class="comment">// false</span></span><br><span class="line">_check.test(<span class="string">'0'</span>) <span class="comment">// true</span></span><br><span class="line">_check.test(<span class="string">'9'</span>) <span class="comment">// true</span></span><br><span class="line">_check.test(<span class="string">'9.9'</span>) <span class="comment">// true</span></span><br><span class="line">_check.test(<span class="string">'9.90'</span>) <span class="comment">// true</span></span><br><span class="line">_check.test(<span class="string">'9.900'</span>) <span class="comment">// false</span></span><br><span class="line">_check.test(<span class="string">'90'</span>)  <span class="comment">// true</span></span><br><span class="line">_check.test(<span class="string">'090'</span>)  <span class="comment">// false</span></span><br><span class="line">_check.test(<span class="string">'9..90'</span>)  <span class="comment">// false</span></span><br><span class="line">_check.test(<span class="string">'9.9.0'</span>) <span class="comment">// false</span></span><br><span class="line">_check.test(<span class="string">'009'</span>) <span class="comment">// false</span></span><br><span class="line">_check.test(<span class="string">'0009.90'</span>) <span class="comment">//false</span></span><br><span class="line">_check.test(<span class="string">'9000000'</span>)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二进制数据转化为excel</title>
      <link href="/2020/06/02/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8C%96%E4%B8%BAexcel/"/>
      <url>/2020/06/02/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8C%96%E4%B8%BAexcel/</url>
      
        <content type="html"><![CDATA[<p>原理就是通过a标签的href属性将二进制表格数据转化为表格，再通过download属性将文件下载到本地；<br>需要注意的是接口请求的数据类型要设置为 <strong>blob</strong> 类型 <a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">具体参考 axios https://www.npmjs.com/package/axios</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">responseType: <span class="string">'blob'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>具体的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(res.data);</span><br><span class="line"><span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">link.style.display = <span class="string">'none'</span>;</span><br><span class="line">link.href = url;</span><br><span class="line">link.setAttribute(<span class="string">'download'</span>, filename); <span class="comment">// filename 自定义下载的表格名称及后缀名；</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.appendChild(link);</span><br><span class="line">link.click();</span><br><span class="line"><span class="built_in">document</span>.documentElement.removeChild(link);</span><br></pre></td></tr></table></figure><p>完整的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 首先要引入axios</span></span><br><span class="line">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="comment">// 组件内部新增方法</span></span><br><span class="line">     downloadExl(filename) &#123;</span><br><span class="line">       axios(&#123;</span><br><span class="line">           method: <span class="string">'get'</span>,</span><br><span class="line">           url: <span class="string">'/api/export'</span>,</span><br><span class="line">           params: <span class="built_in">Object</span>, <span class="comment">// Object 导出接口所需要的参数对象</span></span><br><span class="line">           responseType: <span class="string">'blob'</span></span><br><span class="line">         &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(res.data);</span><br><span class="line">           <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">           link.style.display = <span class="string">'none'</span>;</span><br><span class="line">           link.href = url;</span><br><span class="line">           link.setAttribute(<span class="string">'download'</span>, filename);</span><br><span class="line">           <span class="built_in">document</span>.documentElement.appendChild(link);</span><br><span class="line">           link.click();</span><br><span class="line">           <span class="built_in">document</span>.documentElement.removeChild(link);</span><br><span class="line">         &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'导出失败'</span>)</span><br><span class="line">         &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'不管导出成功/失败'</span>)</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>element-ui 日期组件最大日期和最小日期限制</title>
      <link href="/2020/06/02/element-ui-%E6%97%A5%E6%9C%9F%E7%BB%84%E4%BB%B6%E6%9C%80%E5%A4%A7%E6%97%A5%E6%9C%9F%E5%92%8C%E6%9C%80%E5%B0%8F%E6%97%A5%E6%9C%9F%E9%99%90%E5%88%B6/"/>
      <url>/2020/06/02/element-ui-%E6%97%A5%E6%9C%9F%E7%BB%84%E4%BB%B6%E6%9C%80%E5%A4%A7%E6%97%A5%E6%9C%9F%E5%92%8C%E6%9C%80%E5%B0%8F%E6%97%A5%E6%9C%9F%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>element-ui 日期组件最大日期和最小日期</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-model</span>=<span class="string">"transactionDate"</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"daterange"</span></span></span><br><span class="line"><span class="tag"><span class="attr">range-separator</span>=<span class="string">"至"</span></span></span><br><span class="line"><span class="tag"><span class="attr">start-placeholder</span>=<span class="string">"开始日期"</span></span></span><br><span class="line"><span class="tag"><span class="attr">end-placeholder</span>=<span class="string">"结束日期"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">"选择日期"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value-format</span>=<span class="string">"yyyy-MM-dd HH:mm:ss"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:default-time</span>=<span class="string">"['00:00:00','23:59:59']"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:picker-options</span>=<span class="string">"isDisabled"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>设置最大选择日期和最小选择日期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">isDisabled: &#123;</span><br><span class="line">  disabledDate(time) &#123;</span><br><span class="line">  <span class="comment">// 大于某个日期不能选择</span></span><br><span class="line">  <span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> _beforeDay = myDate.setDate(<span class="keyword">new</span> <span class="built_in">Date</span>().getDate() - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> time.getTime() &gt;= _beforeDay;</span><br><span class="line">    <span class="comment">// 设置日期限制 小于某个日期不能选择</span></span><br><span class="line">    <span class="keyword">return</span> time.getTime() &lt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019/07/25 00:00:00'</span>).getTime() - <span class="number">8.64e7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js String padStart()自动补全操作</title>
      <link href="/2020/06/02/js-String-padStart-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/06/02/js-String-padStart-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h6 id="字符串自动补全函数-注意一定是字符串！"><a href="#字符串自动补全函数-注意一定是字符串！" class="headerlink" title="字符串自动补全函数 注意一定是字符串！"></a>字符串自动补全函数 注意一定是字符串！</h6><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener">padStart(targetLength [, padString]) </a>方法用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。<br><strong>targetLengt</strong> 目标长度<br><strong>padString</strong> 补充的字符串</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"1"</span>;</span><br><span class="line"><span class="comment">// 补充两位 场景：日期时间</span></span><br><span class="line"><span class="keyword">var</span> _str1 = sr1.padStart(<span class="number">2</span>, <span class="string">'0'</span>) <span class="comment">// '01'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充多位 场景：单据号</span></span><br><span class="line"><span class="keyword">var</span> receiptNO = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">var</span> _receiptNO = receiptNO.padStart(<span class="number">16</span>, <span class="string">'0'</span>); <span class="comment">// '000000000000001';</span></span><br></pre></td></tr></table></figure><h6 id="另外补充浏览器不支持的情况下需要添加Polyfill"><a href="#另外补充浏览器不支持的情况下需要添加Polyfill" class="headerlink" title="另外补充浏览器不支持的情况下需要添加Polyfill"></a>另外补充浏览器不支持的情况下需要添加Polyfill</h6><p>如果原生环境不支持该方法，在其他代码之前先运行下面的代码，将创建 String.prototype.padStart() 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.padStart) &#123;</span><br><span class="line">    <span class="built_in">String</span>.prototype.padStart = <span class="function"><span class="keyword">function</span> <span class="title">padStart</span>(<span class="params">targetLength,padString</span>) </span>&#123;</span><br><span class="line">        targetLength = targetLength&gt;&gt;<span class="number">0</span>; <span class="comment">//floor if number or convert non-number to 0;</span></span><br><span class="line">        padString = <span class="built_in">String</span>((<span class="keyword">typeof</span> padString !== <span class="string">'undefined'</span> ? padString : <span class="string">' '</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.length &gt; targetLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">String</span>(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            targetLength = targetLength-<span class="keyword">this</span>.length;</span><br><span class="line">            <span class="keyword">if</span> (targetLength &gt; padString.length) &#123;</span><br><span class="line">                padString += padString.repeat(targetLength/padString.length); <span class="comment">//append to original to ensure we are longer than needed</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> padString.slice(<span class="number">0</span>,targetLength) + <span class="built_in">String</span>(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nrm : 无法加载文件 C: rogram Files
odejs
rm.ps1，因为在此系统上禁止运行脚本。</title>
      <link href="/2020/06/02/nrm-%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6-C-Program-Files-nodejs-nrm-ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E3%80%82/"/>
      <url>/2020/06/02/nrm-%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6-C-Program-Files-nodejs-nrm-ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E3%80%82/</url>
      
        <content type="html"><![CDATA[<p>Win10系统 安装 nrm 出现报错：<br>nrm : 无法加载文件 C:\Program Files\nodejs\nrm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。<br>所在位置 行:1 字符: 1</p><a id="more"></a><p><a href="https://imgchr.com/i/ttmYss" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttmYss.png" alt="ttmYss.png"></a><br><strong>解决办法：</strong><br>1、win键 + s 搜索 powershell 并一管理员身份运行：<br><a href="https://imgchr.com/i/ttmtLn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttmtLn.png" alt="ttmtLn.png"></a><br>2、执行以下命令：<strong>set-ExecutionPolicy RemoteSigned</strong> 回车；<br><a href="https://imgchr.com/i/ttmJMj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttmJMj.png" alt="ttmJMj.png"></a><br>并按 <strong>Y</strong> 执行；<br>3、重新安装即可；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm 和 cnpm 以及 npm 管理工具</title>
      <link href="/2020/06/02/npm-%E5%92%8C-cnpm-%E4%BB%A5%E5%8F%8A-npm-%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/06/02/npm-%E5%92%8C-cnpm-%E4%BB%A5%E5%8F%8A-npm-%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="关于-npm-源设置"><a href="#关于-npm-源设置" class="headerlink" title="关于 npm 源设置"></a>关于 npm 源设置</h3><h4 id="1、临时使用某个安装源地址："><a href="#1、临时使用某个安装源地址：" class="headerlink" title="1、临时使用某个安装源地址："></a>1、临时使用某个安装源地址：</h4><p>如果只想某一次使用某个安装源命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 使用源镜像</span><br><span class="line">npm --registry https://registry.npm.org install</span><br><span class="line">// 使用淘宝镜像</span><br><span class="line">npm --registry https://registry.npm.taobao.org install</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面两个命令 <strong>install</strong> 后面跟安装包名则安装指定包；不指定则按照<strong>package.json</strong>安装</p><h4 id="2、持久使用源地址："><a href="#2、持久使用源地址：" class="headerlink" title="2、持久使用源地址："></a>2、持久使用源地址：</h4><p>如果想一直使用某一个源地址命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>配置后可通过下面方式来验证是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 如果成功则返回的是 上一步设置好的源地址；</span><br><span class="line">// npm config get registry 返回的是当前源地址;</span><br><span class="line">npm config get registry</span><br><span class="line">// npm info &lt;name&gt; 返回的是当前安装包的信息;</span><br><span class="line">npm info &lt;安装包name&gt;</span><br></pre></td></tr></table></figure><p>然后就可以像往常正常使用<strong>npm命令</strong></p><h4 id="3、通过使用阿里的镜像cnpm使用"><a href="#3、通过使用阿里的镜像cnpm使用" class="headerlink" title="3、通过使用阿里的镜像cnpm使用"></a>3、通过使用阿里的镜像cnpm使用</h4><p>使用阿里的镜像 cnpm 的执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>只需要执行上面的命令就可以像使用 npm 一样使用 cnmp了,<strong>唯一不同就是所有npm命令都换成cnpm</strong>；<br>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><h4 id="4、通过使用-nrm-来管理-npm-源地址："><a href="#4、通过使用-nrm-来管理-npm-源地址：" class="headerlink" title="4、通过使用 nrm 来管理 npm 源地址："></a>4、通过使用 nrm 来管理 npm 源地址：</h4><p>4-1、安装<br>安装 nrm 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><p>安装成功之后使用 <strong>nvm -V</strong> 查看是否安装成功，<br>如遇报错<strong>1<a href="https://mogugit.github.io/2020/06/02/nrm-%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6-C-Program-Files-nodejs-nrm-ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E3%80%82/#more">请查看解决办法</a></strong></p><p>4-2、查看当前源列表<br>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure><p>展示如下 可以看到列表中左侧为名称，右侧为地址。带*的为当前配置：<br><a href="https://imgchr.com/i/ttewgH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttewgH.png" alt="ttewgH.png"></a><br>更换命令 nrm use &lt; registry&gt; registry:代表源的名；<br>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm use npm/yarn/cnpm/taobao</span><br></pre></td></tr></table></figure><p>使用npm的 npm config list 命令查看查看当前源配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/tteN4O" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/tteN4O.png" alt="tteN4O.png"></a><br>nrm还提供了测速功能，命令为 <strong>nrm test [registry]</strong> ，不知道选哪个源时，可以先测一波，哪个快用哪个。不加registry时，可测所有的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>结果如下<br><a href="https://imgchr.com/i/tted8e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/tted8e.png" alt="tted8e.png"></a></p><h4 id="命令提示："><a href="#命令提示：" class="headerlink" title="命令提示："></a>命令提示：</h4><ol><li><strong>nrm -V</strong> ：查看当前nvm版本。</li><li><strong>nrm -h</strong> ：显示所有命令。</li><li><strong>nrm current</strong> ：显示当前源名称。</li><li><strong>nrm use &lt; registry&gt;</strong> ：切换源。</li><li><strong>nrm add &lt; registry&gt; &lt; url&gt; [home]</strong> ：添加一个源。比如公司自己的私有源等。</li><li><strong>nrm set-auth &lt; registry&gt; &lt; value&gt; [always]</strong> ：设置自定义源的授权信息。</li><li><strong>nrm set-email &lt; registry&gt; &lt; value&gt;</strong> ：给自定义源设置路径。</li><li><strong>nrm set-hosted-repo &lt; registry&gt; &lt; value&gt;</strong> ：设置发布到自定义源的npm托管仓储。</li><li><strong>nrm del &lt; registry&gt;</strong> ：删除自定义源。</li><li><strong>nrm home &lt; registry&gt; [browser]</strong> ：浏览器中打开源首页。</li><li><strong>nrm publish [options] [&lt; tarball&gt; | &lt; folder&gt;]</strong> ：发布包到自定义源，如果没有使用自定义源，则直接发布到npm。</li><li><strong>nrm test [registry]</strong> ：测试源的访问速度。不加registry时，测试所有的。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js-惰性函数</title>
      <link href="/2020/06/02/js-%E6%83%B0%E6%80%A7%E5%87%BD%E6%95%B0/"/>
      <url>/2020/06/02/js-%E6%83%B0%E6%80%A7%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>利用闭包思想<br>原来定义一个函数来根据情况执行</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOM2 事件绑定 DOM事件参考链接：DOM级别事件</span></span><br><span class="line"><span class="comment">// 元素.addEventListener();</span></span><br><span class="line"><span class="comment">// 元素.attachEvent();</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emit</span>(<span class="params">element,type,func</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(element.addEventListener) &#123;</span><br><span class="line">element.addEventListener(type,func,<span class="literal">false</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent)&#123;</span><br><span class="line">element.attachEvent(<span class="string">'on'</span>+type,func)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">element[<span class="string">'on'</span>+type] = func</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emit(box,<span class="string">'click'</span>,func);</span><br><span class="line">emit(box,<span class="string">'click'</span>,func);</span><br></pre></td></tr></table></figure><p>使用闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emit</span>(<span class="params">element,type, func</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">emit = <span class="function"><span class="keyword">function</span>(<span class="params">element,type,func</span>)</span>&#123;</span><br><span class="line">element.addEventListener(type,func,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent) &#123;</span><br><span class="line">emit = <span class="function"><span class="keyword">function</span>(<span class="params">element,type,func</span>)</span>&#123;</span><br><span class="line">element.attachEvent(<span class="string">'on'</span>+type, func);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">emit = <span class="function"><span class="keyword">function</span>(<span class="params">element,type,func</span>)</span>&#123;</span><br><span class="line">element[<span class="string">'on'</span>+type] = func</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">emit(element,type,func)</span><br><span class="line">&#125;</span><br><span class="line">emit(box,<span class="string">'click'</span>,func);</span><br><span class="line">emit(box,<span class="string">'click'</span>,func);</span><br></pre></td></tr></table></figure><p>两者的区别<br>前者在添加事件时每次都会去判断当前环境兼容性；<br>而使用了闭包思想的惰性函数之后,在多次调用后，可以大大节省后面的判断步骤；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DOM 事件深入浅出</title>
      <link href="/2020/06/02/DOM-%E4%BA%8B%E4%BB%B6%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
      <url>/2020/06/02/DOM-%E4%BA%8B%E4%BB%B6%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="DOM级别与DOM事件"><a href="#DOM级别与DOM事件" class="headerlink" title="DOM级别与DOM事件"></a>DOM级别与DOM事件</h4><p><code>DOM</code>级别一共可以分为4个级别：<code>DOM0级</code>，<code>DOM1级</code>，<code>DOM2级</code>和 <code>DOM3级</code>，而<code>DOM</code>事件分为3个级别：<code>DOM0</code> 级事件处理，<code>DOM2</code> 级事件处理和 <code>DOM3</code> 级事件处理。如下图所示：<br><img src="https://s1.ax1x.com/2020/06/02/ttpKa9.png" alt="ttpKa9.png"><br><strong>为什么没有DOM1级事件处理呢？</strong><br>因为1级 <code>DOM</code> 标准中并没有定义事件相关的内容，所以没有所谓的1级 <code>DOM</code> 事件模型。</p><a id="more"></a><h4 id="1-DOM0级事件"><a href="#1-DOM0级事件" class="headerlink" title="1.DOM0级事件"></a>1.DOM0级事件</h4><p>在了解 <code>DOM0</code> 级事件之前，我们有必要先了解下 <code>HTML</code> 事件处理程序，也是最早的这一种的事件处理方式，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"showFn()"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">showFn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码我们通过直接在 <code>HTML</code> 代码里定义了一个 <code>onclick</code> 的属性触发 <code>showFn</code> 方法，这样的事件处理程序最大的缺点就是 <code>HTML</code> 于 <code>JS</code> 强耦合，我们一旦需要修改函数名就得修改两个地方。当然其优点是不需要操作 <code>DOM</code> 来完成事件的绑定。</p><p>那么什么是<code>DOM0</code>级处理事件呢？<code>DOM0</code>级事件就是将一个函数赋值给一个事件处理属性，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// btn.onclick = null; 解绑事件 释放占用内存；</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码我们给 <code>button</code> 定义了一个 <code>id</code>，通过 <code>JS</code> 获取到了这个 <code>id</code> 的按钮，并将一个函数赋值给了一个事件处理属性 <code>onclick</code>，这样的方法便是 <code>DOM0级</code> 处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。</p><p><code>DOM0 级</code>事件处理程序的缺点在于同一个处理程序无法同时绑定多个处理函数，比如我还想在按钮点击事件上加上另外一个函数。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;  <span class="comment">// 被覆盖，并不执行</span></span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello JavaScript'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// btn.onclick = null; 解绑事件 释放占用内存；</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-DOM2级事件"><a href="#2-DOM2级事件" class="headerlink" title="2.DOM2级事件"></a>2.DOM2级事件</h4><p><code>DOM2级</code> 事件在 <code>DOM0 级</code>事件的基础上弥补了一个处理程序无法同时绑定多个处理函数的缺点，允许给一个处理程序添加多个处理函数。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">showFn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn.addEventListener(<span class="string">'click'</span>, showFn, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// btn.removeEventListener('click', showFn, false); 解绑事件</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>DOM2级</code> 事件定义了 <code>addEventListener</code> 和 <code>removeEventListener</code> 两个方法，分别用来绑定和解绑事件，方法中包含3个参数，分别是绑定的事件处理属性名称（不包含<code>on</code>）、处理函数和是否在捕获时执行事件处理函数。如果我们还需要添加一个鼠标移入的方法，只需要：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">'mouseover'</span>, showFn, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这样点击按钮和鼠标移入时都将触发<code>showFn</code>方法。</p><p>需要注意的是IE8级以下版本不支持 <code>addEventListener</code> 和 <code>removeEventListener</code>，需要用attachEvent和detachEvent来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">btn.attachEvent(<span class="string">'onclick'</span>, showFn); <span class="comment">// 绑定事件</span></span><br><span class="line">btn.detachEvent(<span class="string">'onclick'</span>, showFn); <span class="comment">// 解绑事件</span></span><br></pre></td></tr></table></figure><p>这里我们不需要传入第三个参数，因为IE8级以下版本只支持冒泡型事件。</p><h4 id="3-DOM3级事件"><a href="#3-DOM3级事件" class="headerlink" title="3.DOM3级事件"></a>3.DOM3级事件</h4><p><code>DOM3</code> 级事件在 <code>DOM2</code> 级事件的基础上添加了更多的事件类型，全部类型如下：</p><p>UI事件，当用户与页面上的元素交互时触发，如：<code>load</code>、<code>scroll</code><br>焦点事件，当元素获得或失去焦点时触发，如：<code>blur</code>、<code>focus</code><br>鼠标事件，当用户通过鼠标在页面执行操作时触发如：<code>dbclick</code>、<code>mouseup</code><br>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：<code>mousewheel</code><br>文本事件，当在文档中输入文本时触发，如：<code>textInput</code><br>键盘事件，当用户通过键盘在页面上执行操作时触发，如：<code>keydown</code>、<code>keypress</code><br>合成事件，当为IME（输入法编辑器）输入字符时触发，如：<code>compositionstart</code><br>变动事件，当底层 <code>DOM</code> 结构发生变化时触发，如：<code>DOMsubtreeModified</code></p><p>同时 <code>DOM3</code> 级事件也允许使用者自定义一些事件。</p><h4 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h4><p>上文中讲到了 <code>addEventListener</code> 的第三个参数为指定事件是否在捕获阶段执行，设置为 <code>true</code> 表示事件在捕获阶段执行，而设置为 <code>false</code> 表示事件在冒泡阶段执行。那么什么是事件冒泡和事件捕获呢？可以用下图来解释：</p><p><img src="https://s1.ax1x.com/2020/06/02/ttpuVJ.png" alt="ttpuVJ.png"></p><h4 id="1-事件冒泡"><a href="#1-事件冒泡" class="headerlink" title="1.事件冒泡"></a>1.事件冒泡</h4><p>所谓事件冒泡就是事件像泡泡一样从最开始生成的地方一层一层往上冒，比如上图中 <code>a</code> 标签为事件目标，点击 <code>a</code> 标签后同时也会触发 <code>p</code>、<code>li</code> 上的点击事件，一层一层向上直至最外层的 <code>html</code> 或  <code>document</code>。下面是代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>事件冒泡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>),</span></span><br><span class="line"><span class="javascript"> child = <span class="built_in">document</span>.getElementById(<span class="string">'child'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">child.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'我是目标事件'</span>);</span></span><br><span class="line"><span class="actionscript"> &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"> box.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'事件冒泡至DIV'</span>);</span></span><br><span class="line"><span class="actionscript"> &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码运行后我们点击 <code>a</code> 标签，首先会弹出’我是目标事件’提示，然后又会弹出’事件冒泡至 <code>DIV</code> 的提示，这便说明了事件自内而外向上冒泡了。</p><p>那么我们如何阻止事件冒泡呢？这里就涉及事件的 <code>Event</code> 对象中的 <code>stopPropagation</code> 方法，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'我是目标事件'</span>);</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>加上 <code>stopPropagation</code> 方法后，我们再次点击 <code>a</code> 标签就不会触发 <code>div</code> 上的 <code>click</code> 事件了。</p><h4 id="2-事件捕获"><a href="#2-事件捕获" class="headerlink" title="2.事件捕获"></a>2.事件捕获</h4><p>和事件冒泡相反，事件捕获是自上而下执行，我们只需要将 <code>addEventListener</code> 的第三个参数改为true就行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>事件冒泡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>),</span></span><br><span class="line"><span class="javascript"> child = <span class="built_in">document</span>.getElementById(<span class="string">'child'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"> child.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">     alert(<span class="string">'我是目标事件'</span>);</span></span><br><span class="line"><span class="actionscript"> &#125;, <span class="literal">true</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"> box.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'事件冒泡至DIV'</span>);</span></span><br><span class="line"><span class="actionscript"> &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时我们点击 <code>a</code> 标签，首先弹出的是’事件冒泡至 <code>DIV</code>，其次弹出的是’我是目标事件’，正好与事件冒泡相反。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mouseover和mouseenter以及mouseout和mouseleave区别</title>
      <link href="/2020/06/02/mouseover%E5%92%8Cmouseenter%E4%BB%A5%E5%8F%8Amouseout%E5%92%8Cmouseleave%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/06/02/mouseover%E5%92%8Cmouseenter%E4%BB%A5%E5%8F%8Amouseout%E5%92%8Cmouseleave%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="1、mouseover与mouseenter"><a href="#1、mouseover与mouseenter" class="headerlink" title="1、mouseover与mouseenter"></a>1、mouseover与mouseenter</h4><p><strong>共同点</strong>：<br>当二者都没有子元素时,二者的行为是一致的,但是二者内部都包含子元素时,行为就不同了.</p><a id="more"></a><p><strong>不同点：</strong><br>mouseover事件：不论鼠标指针进入被选元素或其子元素，都会触发其父级的     mouseover 事件。mouseenter事件：只有在鼠标指针进入被选元素时，才会触发 mouseenter 事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line">      background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line">      background-color: brown;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#ch1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line">      height: 100px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:cornsilk</span>;</span></span><br><span class="line">      margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#ch2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line">      height: 100px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:darkgrey</span>;</span></span><br><span class="line">      margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ch1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ch2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">'box1'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">'box2'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ch1 = <span class="built_in">document</span>.getElementById(<span class="string">'ch1'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ch2 = <span class="built_in">document</span>.getElementById(<span class="string">'ch2'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> b = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> c = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> d = <span class="number">1</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">fnb1</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        ch1.innerText = <span class="string">'父节点mouseover次数'</span> + ++a + <span class="string">"\n"</span> +<span class="string">'子节点mouseover次数'</span>+ c;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">fnb2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        ch2.innerText = <span class="string">'父节点mouseenter次数'</span> + ++b + <span class="string">"\n"</span> +<span class="string">'子节点mouseenter次数'</span>+ d;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">fnc1</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        ch1.innerText = <span class="string">'父节点mouseover次数'</span> + a + <span class="string">"\n"</span> +<span class="string">'子节点mouseover次数'</span>+ ++c;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">fnc2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        ch2.innerText = <span class="string">'父节点mouseenter次数'</span> + b + <span class="string">"\n"</span> +<span class="string">'子节点mouseenter次数'</span>+ ++d;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      box1.addEventListener(<span class="string">'mouseover'</span>, fnb1,<span class="literal">false</span>)</span></span><br><span class="line"><span class="actionscript">      box2.addEventListener(<span class="string">'mouseenter'</span>, fnb2,<span class="literal">false</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      ch1.addEventListener(<span class="string">'mouseover'</span>, fnc1,<span class="literal">false</span>)</span></span><br><span class="line"><span class="actionscript">      ch2.addEventListener(<span class="string">'mouseenter'</span>, fnc2,<span class="literal">false</span>)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面展示如下：<br><a href="https://imgchr.com/i/ttSO8P" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/ttSO8P.png" alt="ttSO8P.png"></a></p><h4 id="2、mouseout和mouseleave"><a href="#2、mouseout和mouseleave" class="headerlink" title="2、mouseout和mouseleave"></a>2、mouseout和mouseleave</h4><p><strong>共同点：</strong><br>当二者都没有子元素时,二者的行为是一致的,但是二者内部都包含子元素时,行为就不同了.<br><strong>不同点：</strong><br>mouseout事件：不论鼠标指针离开被选元素还是任何子元素，都会触发 mouseout 事件。<br>mouseleave事件：只有在鼠标指针离开被选元素时，才会触发 mouseleave 事件。</p><p>效果和上面一样这里就不演示代码了 。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js-compose函数</title>
      <link href="/2020/06/02/js-compose%E5%87%BD%E6%95%B0/"/>
      <url>/2020/06/02/js-compose%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="compose函数"><a href="#compose函数" class="headerlink" title="compose函数"></a>compose函数</h4><p>将函数扁平化处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn1执行然后结果作为fn2参数 一直执行到fn4;</span></span><br><span class="line">fn4(fn3(fn2(fn1(<span class="number">5</span>)))) <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>但是这么写太麻烦了 所以可以简化为这样 使用<a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/reduce" target="_blank" rel="noopener">reduce 函数</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funs</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> len = funs.length;</span><br><span class="line"><span class="keyword">if</span>(len===<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(len === <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> funs[<span class="number">0</span>](...args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> funs.reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'function'</span> ? y(x(...args)) : y(x);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">compose()(<span class="number">5</span>); <span class="comment">// [5]</span></span><br><span class="line">compose(fn1,fn2,fn3,fn4)(<span class="number">5</span>) <span class="comment">// 16</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题-函数原型</title>
      <link href="/2020/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B/"/>
      <url>/2020/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h6 id="关于原型函数的问题"><a href="#关于原型函数的问题" class="headerlink" title="关于原型函数的问题:"></a>关于原型函数的问题:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="分析：代码执行-存在var-和匿名函数-所以变量提升-以下函数被提升到顶部；"><a href="#分析：代码执行-存在var-和匿名函数-所以变量提升-以下函数被提升到顶部；" class="headerlink" title="分析：代码执行 存在var 和匿名函数 所以变量提升 以下函数被提升到顶部；"></a>分析：代码执行 存在var 和匿名函数 所以变量提升 以下函数被提升到顶部；</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h6><p>1) 执行 Foo 的 getName 方法 输出；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo.getName() <span class="comment">// 2；</span></span><br></pre></td></tr></table></figure><p>2) 执行的是 var getName = … 会将提升的函数覆盖；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getName() <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>3) 执行 Foo 函数之后又覆盖 getName, 接着调用 getName 函数，此时调用getName函数；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo().getName() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>4) 执行 getName() 此时函数还是执行上一步的函数；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getName() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>5) 此函数执行是考察<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">运算符优先级</a>；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo.getName() <span class="comment">// =&gt; new (Foo.getName)()  输出 2；</span></span><br></pre></td></tr></table></figure><p>6) 此函数执行同样考察<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">运算符优先级</a>, 但是此时new Foo() 是执行Foo的实例 由于Foo 实例里面没有getName 方法，所以会去原型上找protoType；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo().getName() <span class="comment">// =&gt; (new Foo()).getName() 输出 3</span></span><br></pre></td></tr></table></figure><p>7) 此函数执行同样考察<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">运算符优先级</a>, 是前面两个的综合；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName() <span class="comment">// =&gt; new ((new Foo()).getName)() // 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题-js基础2</title>
      <link href="/2020/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98-js%E5%9F%BA%E7%A1%802/"/>
      <url>/2020/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98-js%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<p>面试题：当 a 等于什么的时候下面的代码成立？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问： 当 a 等于什么的时候下面的代码成立</span></span><br><span class="line"><span class="keyword">var</span> a = ?;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'OK'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>方案一：利用比较的时候调用 toString() 方法，来重写 toString() 方法；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一：</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">i: <span class="number">0</span>,</span><br><span class="line">toString()&#123;</span><br><span class="line"><span class="keyword">return</span> ++<span class="keyword">this</span>.i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'OK'</span>)</span><br><span class="line">&#125; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二：</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.toString = a.shift;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'OK'</span>)</span><br><span class="line">&#125; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>方案二：利用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Objext.defineProperty()</a> 来拦截，并改变值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'a'</span>, &#123;</span><br><span class="line"><span class="keyword">get</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> ++i;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'OK'</span>)</span><br><span class="line">&#125; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h6 id="关于比较的小知识"><a href="#关于比较的小知识" class="headerlink" title="关于比较的小知识"></a><a href="https://www.cnblogs.com/litsword/archive/2010/07/22/1782933.html" target="_blank" rel="noopener">关于比较的小知识</a></h6><p>==， 两边值类型不同的时候，要先进行类型转换，再比较。<br>===，不做类型转换，类型不同的一定不等。<br>NaN 与任何值都不相等(包括 NaN)，不管是双等还是恒等;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>具体如下：<br><strong>关于 === ：</strong></p><p>1) 如果类型不同，就不相等<br>2) 如果两个都是数值，并且是同一个值，那么相等(NaN 除外)；<br>3) 如果两个都是字符串，每个位置的字符都一样，那么相等；否则不相等。<br>4) 如果两个值都是true，或者都是false，那么相等。<br>5) 如果两个值都引用同一个对象或函数，那么相等；否则[相等。<br>6) 如果两个值都是null，或者都是undefined，那么相等。</p><p><strong>关于  == :</strong></p><p>1) 如果两个值类型相同，进行 === 比较。<br>2) 如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：<br>a) 如果一个是null、一个是undefined，那么相等。<br>b) 如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。<br>c) 如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。<br>d) 如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString；<br>e) 任何其他组合，都不相等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> == <span class="number">1</span> <span class="comment">// 会先把 false 转化为数字 0 然后比较</span></span><br><span class="line"><span class="number">1</span> ==  <span class="literal">true</span> <span class="comment">// 会先把 true 转化为数字 1 然后比较</span></span><br></pre></td></tr></table></figure><p><strong>总结就是如下：</strong><br><strong>1) NaN 和谁都不相等;<br>2) null和undefind 两个等号相等 三个等号不相等;<br>3) 对象 == 字符串, 会把对象转化为字符串 (对象.toString());<br>4) 其余情况都是转化为数字进行比较 对象转化为数字 Number(对象.toString());</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题-js基础</title>
      <link href="/2020/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98-js%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/06/02/%E9%9D%A2%E8%AF%95%E9%A2%98-js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>下面的代码输出结果是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="number">2</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="number">3</span>:<span class="number">4</span>,</span><br><span class="line">  length: <span class="number">2</span>,</span><br><span class="line">  push: <span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.push(<span class="number">1</span>);</span><br><span class="line">obj.push(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><a id="more"></a><p>分析：<br>obj是一个对象里面有四个属性，包括push 方法，正常情况下对象是没有push() 方法的，那么push()方法做什么？或者怎么实现一个 push() 方法？<br>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现简易版 push() 方法, 原理：在数组的末尾添加传入的值，改变数组长度并返回数组;</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"><span class="comment">// this 指向当前Array</span></span><br><span class="line"><span class="comment">// 默认会使 length 属性加1, 如果没有 length 属性那么 push() 方法会默认 length为0；</span></span><br><span class="line"><span class="keyword">this</span>.length = <span class="keyword">this</span>.length || <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>[<span class="keyword">this</span>.length] = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.push(<span class="number">3</span>); <span class="comment">// =&gt; arr = [1,2,3];</span></span><br></pre></td></tr></table></figure><p>通过上面的 push() 解析，可以得知：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.push(<span class="number">1</span>) <span class="comment">// =&gt; 执行this[this.length] length为2 this[2] = 1;</span></span><br><span class="line">obj.push(<span class="number">2</span>) <span class="comment">// =&gt; 执行this[this.length] length为3 this[3] = 2;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// =&gt; obj = &#123;2:1, 3:2, length: 4, push: Array.prototype.push&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 Object.prototype.toString</title>
      <link href="/2020/06/02/%E8%B0%88%E8%B0%88-Object-prototype-toString/"/>
      <url>/2020/06/02/%E8%B0%88%E8%B0%88-Object-prototype-toString/</url>
      
        <content type="html"><![CDATA[<h4 id="ECMAScript-5"><a href="#ECMAScript-5" class="headerlink" title="ECMAScript 5"></a>ECMAScript 5</h4><p>在ECMAScript 5中，Object.prototype.toString()被调用时，会进行如下步骤：</p><ul><li>如果 <code>this</code> 是 <code>undefined</code> ，返回 <code>object Undefined</code> ；</li><li>如果 <code>this</code>是 <code>null</code> ， 返回 <code>object Null</code> ；</li><li>令 <code>O</code> 为以 <code>this</code> 作为参数调用 <code>ToObject</code>的结果；</li><li>令 <code>class</code> 为 <code>O</code> 的内部属性 <code>[[Class]]</code> 的值；</li><li>返回三个字符串 “[<code>object&quot;</code>, <code>class</code>, 以及<code>&quot;]&quot;</code> 拼接而成的字符串。<h4 id="Class"><a href="#Class" class="headerlink" title="[[Class]]"></a>[[Class]]</h4><code>[[Class]]</code> 是一个内部属性，值为一个类型字符串，可以用来判断值的类型。</li></ul><a id="more"></a><p>有这么一段详细的解释：</p><blockquote><p>本规范的每种内置对象都定义了 [[Class]] 内部属性的值。宿主对象的 [[Class]] 内部属性的值可以是除了 “Arguments”, “Array”, “Boolean”, “Date”, “Error”, “Function”, “JSON”, “Math”, “Number”, “Object”, “RegExp”, “String” 的任何字符串。[[Class]] 内部属性的值用于内部区分对象的种类。注，本规范中除了通过 Object.prototype.toString ( 见 15.2.4.2) 没有提供任何手段使程序访问此值。</p></blockquote><p>在JavaScript代码里，唯一可以访问该属性的方法就是通过 <code>Object.prototype.toString</code> ，通常方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(value)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// =&gt; '[object Null]'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>)</span><br><span class="line"><span class="comment">// =&gt; '[object Undefined]'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Math</span>)</span><br><span class="line"><span class="comment">// =&gt; '[object Math]'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)</span><br><span class="line"><span class="comment">// =&gt; '[object Object]'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([])</span><br><span class="line"><span class="comment">// =&gt; '[object Array]'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// =&gt; '[object Number]'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// =&gt; '[object Number]'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>)</span><br><span class="line"><span class="comment">// =&gt; '[object String]'</span></span><br></pre></td></tr></table></figure><p>因此，可以用下列函数，来获取任意变量的<code>[[Class]]</code>属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _str = <span class="built_in">Object</span>.prototype.toString.call(val)</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^\[object (.*)\]$/</span>.exec(_str)[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getClass(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// =&gt; 'Null'</span></span><br><span class="line"></span><br><span class="line">getClass(<span class="literal">undefined</span>)</span><br><span class="line"><span class="comment">// =&gt; 'Undefined'</span></span><br><span class="line"></span><br><span class="line">getClass(<span class="built_in">Math</span>)</span><br><span class="line"><span class="comment">// =&gt; 'Math'</span></span><br><span class="line"></span><br><span class="line">getClass(&#123;&#125;)</span><br><span class="line"><span class="comment">// =&gt; 'Object'</span></span><br><span class="line"></span><br><span class="line">getClass([])</span><br><span class="line"><span class="comment">// =&gt; 'Array'</span></span><br></pre></td></tr></table></figure><h4 id="ECMAScript-6"><a href="#ECMAScript-6" class="headerlink" title="ECMAScript 6"></a>ECMAScript 6</h4><p>在ES6，调用 <code>Object.prototype.toString</code> 时，会进行如下步骤：</p><ul><li>如果 <code>this</code> 是 <code>undefined</code> ，返回 <code>&#39;[object Undefined]&#39;</code>;</li><li>如果 <code>this</code> 是 <code>null</code> , 返回 <code>&#39;[object Null]&#39;</code> ；</li><li>令 <code>O</code> 为以 <code>this</code> 作为参数调用 <code>ToObject</code> 的结果；</li><li>令 <code>isArray</code> 为 <code>IsArray(O)</code> ；</li><li><code>ReturnIfAbrupt(isArray)</code> （如果 <code>isArray</code> 不是一个正常值，比如抛出一个错误，中断执行）；</li><li>如果 <code>isArray</code> 为 <code>true</code> ， 令 <code>builtinTag</code> 为 <code>&#39;Array&#39;</code> ;</li><li><code>else</code> ，如果 <code>O is an exotic String object</code> ， 令 <code>builtinTag</code> 为 <code>&#39;String&#39;</code> ；</li><li><code>else</code> ，如果 <code>O</code> 含有 <code>[[ParameterMap]] internal slo</code>, ， 令 <code>builtinTag 为 &#39;Arguments&#39;</code> ；</li><li><code>else</code> ，如果 <code>O</code> 含有 <code>[[Call]] internal method</code> ， 令 <code>builtinTag</code> 为 <code>Function</code> ；</li><li><code>else</code> ，如果 <code>O</code> 含有 <code>[[ErrorData]] internal slot</code> ， 令 <code>builtinTag 为</code>Error` ；</li><li><code>else</code> ，如果 <code>O</code> 含有 <code>[[BooleanData]] internal slot</code> ， 令 <code>builtinTag</code> 为 <code>Boolean</code> ；</li><li><code>else</code> ，如果 <code>O</code> 含有 <code>[[NumberData]] internal slot</code> ， 令 <code>builtinTag</code> 为 <code>Number</code> ；</li><li><code>else</code> ，如果 <code>O</code> 含有 <code>[[DateValue]] internal slot</code> ， 令 <code>builtinTag 为 Date</code> ；</li><li><code>else</code> ，如果 <code>O</code> 含有 <code>[[RegExpMatcher]] internal slot</code> ， 令 <code>builtinTag</code> 为 <code>RegExp</code> ；</li><li><code>else</code> ， 令 <code>builtinTag</code> 为 <code>Object</code> ；</li><li>令 <code>tag</code> 为 <code>Get(O, @@toStringTag)</code> 的返回值（ <code>Get(O, @@toStringTag</code>) 方法，既是在 <code>O</code> 是一个对象，并且具有 <code>@@toStringTag</code> 属性时，返回 <code>O[Symbol.toStringTag]</code> ）；</li><li><code>ReturnIfAbrupt(tag)</code> ，如果 <code>tag</code> 是正常值，继续执行下一步；</li><li>如果 <code>Type(tag)</code>不是一个字符串，<code>let tag be builtinTag</code> ；</li><li>返回由三个字符串 <code>&quot;[object&quot;, tag, and &quot;]&quot;</code> 拼接而成的一个字符串。</li></ul><p>在ES6里，之前的<code>[[Class]]</code> 不再使用，取而代之的是一系列的 <code>internal slot</code> ，有一个比较完整的解释：</p><blockquote><p>Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties and they are not inherited. Depending upon the specific internal slot specification, such state may consist of values of any ECMAScript language type or of specific ECMAScript specification type values</p></blockquote><p>大概的意思是：Internal slots 对应于与对象相关联并由各种ECMAScript规范算法使用的内部状态，它们没有对象属性，也不能被继承，根据具体的 Internal slot 规范，这种状态可以由任何ECMAScript语言类型或特定ECMAScript规范类型值的值组成。</p><p>此外，通过对 Object.prototype.toString 在ES6的实现步骤分析，我们其实可以很容易改变 Object.prototype.toString.call 的结果，像下面一样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"newClass"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(obj)) <span class="comment">// "[object newClass]"</span></span><br></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p>1) <a href="http://www.ecma-international.org/ecma-262/5.1" target="_blank" rel="noopener">http://www.ecma-international.org/ecma-262/5.1</a><br>2) <a href="http://www.adobe.com/devnet/archive/html5/articles/categorizing-values-in-javascript.html" target="_blank" rel="noopener">http://www.adobe.com/devnet/archive/html5/articles/categorizing-values-in-javascript.html</a><br>3) <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString</a><br>4) <a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="noopener">http://www.ecma-international.org/ecma-262/6.0/</a><br>5) <a href="http://es6.ruanyifeng.com/#docs/symbol" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/symbol</a><br>6) <a href="https://tc39.github.io/ecma262/#sec-object.prototype.tostring" target="_blank" rel="noopener">https://tc39.github.io/ecma262/#sec-object.prototype.tostring</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>判断一个对象是否为空</title>
      <link href="/2020/06/02/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
      <url>/2020/06/02/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="如何判断一个对象是否为空"><a href="#如何判断一个对象是否为空" class="headerlink" title="如何判断一个对象是否为空"></a>如何判断一个对象是否为空</h4><p>1、利用 <code>Object.keys</code> 方法 该方法会返回当前对象内所有返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（<code>enumerable</code>）属性的键名。<a href="https://es6.ruanyifeng.com/#docs/object-methods" target="_blank" rel="noopener">详情 <code>Object.keys</code></a>；<br><strong>如果数组的长度不为空那么则说明对象不为空</strong><br>使用方法如下：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">'男'</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Object</span>.keys(obj); <span class="comment">// ['name', 'age', 'sex']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr.length)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽成方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> obj != <span class="string">'object'</span>) thorw <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'参数不是一个可遍历对象'</span>);</span><br><span class="line"><span class="keyword">let</span> _arr = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="keyword">return</span> !!_arr.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">checkObj(obj) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">obj = &#123; <span class="attr">name</span>: <span class="string">'张三'</span> &#125;</span><br><span class="line">checkObj(obj) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">obj = [];</span><br><span class="line">checkObj(obj) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">obj = [<span class="number">1</span>];</span><br><span class="line">checkObj(obj); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">obj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">checkObj(obj) <span class="comment">// Uncaught Error: 参数不是可遍历对象;</span></span><br></pre></td></tr></table></figure><p>2、使用<code>for...in</code> 循环，如果对象可循环那么不为空，否则为空对象 ；<strong>前提：对象属性是可遍历</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">checkObj(obj) <span class="comment">// false</span></span><br><span class="line">obj = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>&#125;</span><br><span class="line">checkObj(obj);</span><br><span class="line">obj = [];</span><br><span class="line">checkObj(obj);</span><br><span class="line">obj = [<span class="number">1</span>];</span><br><span class="line">checkObj(obj);</span><br><span class="line">obj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">checkObj(obj) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> util </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css background属性合在一起写background-size background-positon</title>
      <link href="/2020/06/02/css-background%E5%B1%9E%E6%80%A7%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%86%99background-size-background-positon/"/>
      <url>/2020/06/02/css-background%E5%B1%9E%E6%80%A7%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%86%99background-size-background-positon/</url>
      
        <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background: no-repeat scroll 56px 78px / 69px 69px rgba(0, 0, 0, 0) url('.....');</span><br><span class="line"></span><br><span class="line">background: no-repeat scroll `56px 78px（background-position）/（分割线） *69px 69px *（background-size ）` rgba(0, 0, 0, 0);</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> background </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人上网工具搭建</title>
      <link href="/2020/06/02/%E4%B8%AA%E4%BA%BA%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/06/02/%E4%B8%AA%E4%BA%BA%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>ubantu 20.06 ss服务 两步走</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mritd/shadowsocks</span><br></pre></td></tr></table></figure><p>如果提示 <code>docker</code> 没有， 那么安装一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dt --name ss -p 16443:16443 mritd/shadowsocks -s "-s 0.0.0.0 -p 16443 -m aes-256-cfb -k test1231. --fast-open"</span><br></pre></td></tr></table></figure><p>test1231.   -&gt;  password</p><p>————————————–华丽丽的分割线————————————————-</p><h2 id="服务器为centos-6"><a href="#服务器为centos-6" class="headerlink" title="==服务器为centos 6=="></a>==服务器为centos 6==</h2><h3 id="一、搭建ss"><a href="#一、搭建ss" class="headerlink" title="一、搭建ss"></a>一、搭建ss</h3><p>1、用xshell或者putty等工具远程登录服务器，要用root账户登录，运行以下命令(按顺序执行)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1)yum install -y wget</span><br><span class="line">(2) wget –no-check-certificate -O shadowsocks.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks.sh</span><br><span class="line">(3) chmod +x shadowsocks.sh</span><br><span class="line">(4) .&#x2F;shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>安装完成后，会提示你设置密码,端口,加密方式；</p><p>会有如下提示</p><blockquote><p>Congratulations, Shadowsocks-python server install completed! Your Server IP :your_server_ip Your Server Port :your_server_port Your Password :your_password Your Encryption Method:your_encryption_method Welcome to visit:<a href="https://teddysun.com/342.html" target="_blank" rel="noopener">https://teddysun.com/342.html</a> Enjoy it!</p></blockquote><p>安装完成之后的查看配置信息 ：vi /etc/shadowsocks.json<br>展示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">“server”:”<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>″,</span><br><span class="line">“server_port”:<span class="number">8989</span>,</span><br><span class="line">“local_address”:”<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>″,</span><br><span class="line">“local_port”:<span class="number">1080</span>,</span><br><span class="line">“password”:”yourpassword”,</span><br><span class="line">“timeout”:<span class="number">300</span>,</span><br><span class="line">“method”:”camellia-<span class="number">256</span>-cfb”,</span><br><span class="line">“fast_open”:<span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用命令：</p><blockquote><p>卸载：./shadowsocks.sh uninstall<br>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>状态：/etc/init.d/shadowsocks status</p></blockquote><p>电脑上安装对应的shadowsocks客户端<br>(1)我的是win10系统，照例还是给个链接<br>     <a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">windows版本：https://github.com/shadowsocks/shadowsocks-windows/releases</a><br>     <a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="noopener">mac版本：https://github.com/shadowsocks/shadowsocks-iOS/releases</a><br>     <a href="https://github.com/shadowsocks/shadowsocks-android" target="_blank" rel="noopener">android版本：https://github.com/shadowsocks/shadowsocks-android</a><br>     (我用的是shadowsocks-arm64-v8a-4.6.1.apk这个版本，其他几个不行，不知道为什么)<br> (2)下载好后打开运行，电脑任务栏会有一个小飞机，双击，填写配置参数(vi /etc/shadowsocks.json  这个命令打印出来的信息);</p><p>2、开放多端口，配置ss多用户 之前的ss配置文件内如大概如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="string">"server_port"</span>: <span class="number">8989</span>,</span><br><span class="line">  <span class="string">"password"</span>: <span class="string">"password1"</span>,</span><br><span class="line">  <span class="string">"method"</span>: <span class="string">"camellia-256-cfb"</span>,</span><br><span class="line">  <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">  <span class="string">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">  <span class="string">"fast_open"</span>:<span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们修改ss配置文件 vi /etc/shadowsocks.json</p><blockquote><p>IV ,IVM编辑 退出方法<br>:WQ   保存退出<br>:X<br>:Q    不保存退出<br>U撤销，ctrl+R 恢复。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"port_password"</span>: &#123;</span><br><span class="line">        <span class="string">"8989"</span>:<span class="string">"password1"</span>,</span><br><span class="line">        <span class="string">"8888"</span>:<span class="string">"password2"</span>,</span><br><span class="line">        <span class="string">"9999"</span>:<span class="string">"password3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">"method"</span>: <span class="string">"camellia-256-cfb"</span>,</span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>:<span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将此文件先备份到本地（以便ss客户端使用） 然后重新启动ss服务：<br>    (1) 备份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks restart</span><br></pre></td></tr></table></figure><p>这时增加的端口还不能使用，因为防火墙未开放新增的端口 开放端口的方法：<br>    1）打开防火墙配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables</span><br></pre></td></tr></table></figure><p>2）加入以下两句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p udp -m state --state NEW -m udp --dport 8888 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8888 -j ACCEPT</span><br></pre></td></tr></table></figure><p>3）重启防火墙使配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><p>现在可以尝试在客户端设置不同的端口，看看能不能fan墙了~</p><h3 id="二、使用锐速提速"><a href="#二、使用锐速提速" class="headerlink" title="二、使用锐速提速"></a>二、使用锐速提速</h3><p>虽然现在可以访问google，看到墙外的世界了，但是，速度是有点慢。。<br>1、更换内核 一键更换内核脚本（<a href="https://my.vultr.com" target="_blank" rel="noopener">vultr</a>需先执行此脚本）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget –N —no–check–certificate https:&#x2F;&#x2F;freed.ga&#x2F;kernel&#x2F;ruisu.sh &amp;&amp; bash ruisu.sh</span><br></pre></td></tr></table></figure><p>注意：脚本执行过程中，请勿进行任何操作。不要觉得它怎么就卡住了，这个过程可能有点长，待服务器重启后，本次连接将终端，重新ssh连接服务器安装锐速即可。</p><p>2、执行锐速一键安装脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget –N —no–check–certificate https:&#x2F;&#x2F;github.com&#x2F;91yun&#x2F;serverspeeder&#x2F;raw&#x2F;master&#x2F;serverspeeder.sh &amp;&amp; bash serverspeeder.sh</span><br></pre></td></tr></table></figure><p><strong><em>若提示：The name of network interface is not eth0, please retry after changing the name.<br>请使用备用脚本：<br>wget –N —no–check–certificate <a href="https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh</a> &amp;&amp; bash serverspeeder-all.sh</em></strong><br>若执行成功，将看到类似以下：<br><img src="https://img-blog.csdnimg.cn/20191105203106272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dWd1aQ==,size_16,color_FFFFFF,t_70" alt="执行命令成功"><br>下面是锐速常用的一些命令：</p><blockquote><p>启动：/serverspeeder/bin/serverSpeeder.sh start<br>停止：/serverspeeder/bin/serverSpeeder.sh stop<br>状态：service serverSpeeder status</p></blockquote><h2 id="Centos7的搭建教程"><a href="#Centos7的搭建教程" class="headerlink" title="==Centos7的搭建教程=="></a>==Centos7的搭建教程==</h2><h3 id="一、搭建ss服务"><a href="#一、搭建ss服务" class="headerlink" title="一、搭建ss服务"></a>一、搭建ss服务</h3><p>1) 下载安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks.sh</span><br></pre></td></tr></table></figure><p>2) 修改目录权限 赋可执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shadowsocks.sh</span><br></pre></td></tr></table></figure><p>3）运行程序，记录日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line">#############################################################</span><br><span class="line"># One click Install Shadowsocks-Python server               #</span><br><span class="line"># Intro: https://teddysun.com/342.html                      #</span><br><span class="line"># Author: Teddysun &lt;i@teddysun.com&gt;                         #</span><br><span class="line"># Github: https://github.com/shadowsocks/shadowsocks        #</span><br><span class="line">#############################################################</span><br><span class="line"></span><br><span class="line">Please enter password <span class="keyword">for</span> shadowsocks-python</span><br><span class="line">(Default password: teddysun.com):xxx</span><br><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line">password = xxx</span><br><span class="line">---------------------------</span><br><span class="line"></span><br><span class="line">Please enter a port <span class="keyword">for</span> shadowsocks-python [<span class="number">1</span>-<span class="number">65535</span>]</span><br><span class="line">(Default port: xxx):</span><br><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line">port = xxx</span><br><span class="line">---------------------------</span><br><span class="line"></span><br><span class="line">Please select stream cipher <span class="keyword">for</span> shadowsocks-python:</span><br><span class="line"><span class="number">1</span>) aes-<span class="number">256</span>-gcm</span><br><span class="line"><span class="number">2</span>) aes-<span class="number">192</span>-gcm</span><br><span class="line"><span class="number">3</span>) aes-<span class="number">128</span>-gcm</span><br><span class="line"><span class="number">4</span>) aes-<span class="number">256</span>-ctr</span><br><span class="line"><span class="number">5</span>) aes-<span class="number">192</span>-ctr</span><br><span class="line"><span class="number">6</span>) aes-<span class="number">128</span>-ctr</span><br><span class="line"><span class="number">7</span>) aes-<span class="number">256</span>-cfb</span><br><span class="line"><span class="number">8</span>) aes-<span class="number">192</span>-cfb</span><br><span class="line"><span class="number">9</span>) aes-<span class="number">128</span>-cfb</span><br><span class="line"><span class="number">10</span>) camellia-<span class="number">128</span>-cfb</span><br><span class="line"><span class="number">11</span>) camellia-<span class="number">192</span>-cfb</span><br><span class="line"><span class="number">12</span>) camellia-<span class="number">256</span>-cfb</span><br><span class="line"><span class="number">13</span>) chacha20-ietf-poly1305</span><br><span class="line"><span class="number">14</span>) chacha20-ietf</span><br><span class="line"><span class="number">15</span>) chacha20</span><br><span class="line"><span class="number">16</span>) rc4-md5</span><br><span class="line">Which cipher you<span class="string">'d select(Default: aes-256-gcm):7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string">cipher = aes-256-cfb</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Press any key to start...or Press Ctrl+C to cancel</span></span><br><span class="line"><span class="string">Ign http://http.us.debian.org jessie InRelease</span></span><br><span class="line"><span class="string">Hit http://http.us.debian.org jessie-updates InRelease</span></span><br><span class="line"><span class="string">Hit http://http.us.debian.org jessie Release.gpg</span></span><br><span class="line"><span class="string">Hit http://http.us.debian.org jessie-updates/main Sources</span></span><br><span class="line"><span class="string">Get:1 http://http.us.debian.org jessie-updates/main amd64 Packages/DiffIndex [10.9 kB]</span></span><br><span class="line"><span class="string">Get:2 http://http.us.debian.org jessie-updates/main Translation-en/DiffIndex [3688 B]</span></span><br><span class="line"><span class="string">Hit http://http.us.debian.org jessie Release</span></span><br><span class="line"><span class="string">Hit http://http.us.debian.org jessie/main Sources</span></span><br><span class="line"><span class="string">Hit http://http.us.debian.org jessie/main amd64 Packages</span></span><br><span class="line"><span class="string">Hit http://http.us.debian.org jessie/main Translation-en</span></span><br><span class="line"><span class="string">Hit http://security.debian.org jessie/updates InRelease</span></span><br><span class="line"><span class="string">Hit http://security.debian.org jessie/updates/main Sources</span></span><br><span class="line"><span class="string">Hit http://security.debian.org jessie/updates/main amd64 Packages</span></span><br><span class="line"><span class="string">Hit http://security.debian.org jessie/updates/main Translation-en</span></span><br><span class="line"><span class="string">Fetched 14.5 kB in 4s (3370 B/s)</span></span><br><span class="line"><span class="string">Reading package lists...</span></span><br><span class="line"><span class="string">Reading package lists...</span></span><br><span class="line"><span class="string">Building dependency tree...</span></span><br><span class="line"><span class="string">Reading state information...</span></span><br><span class="line"><span class="string">autoconf is already the newest version.</span></span><br><span class="line"><span class="string">automake is already the newest version.</span></span><br><span class="line"><span class="string">gcc is already the newest version.</span></span><br><span class="line"><span class="string">libtool is already the newest version.</span></span><br><span class="line"><span class="string">make is already the newest version.</span></span><br><span class="line"><span class="string">python is already the newest version.</span></span><br><span class="line"><span class="string">python-dev is already the newest version.</span></span><br><span class="line"><span class="string">python-setuptools is already the newest version.</span></span><br><span class="line"><span class="string">unzip is already the newest version.</span></span><br><span class="line"><span class="string">wget is already the newest version.</span></span><br><span class="line"><span class="string">curl is already the newest version.</span></span><br><span class="line"><span class="string">libssl-dev is already the newest version.</span></span><br><span class="line"><span class="string">openssl is already the newest version.</span></span><br><span class="line"><span class="string">openssl set to manually installed.</span></span><br><span class="line"><span class="string">0 upgraded, 0 newly installed, 0 to remove and 8 not upgraded.</span></span><br><span class="line"><span class="string">converted '</span>https:<span class="comment">//github.com/jedisct1/libsodium/releases/download/1.0.16/libsodium-1.0.16.tar.gz' (ANSI_X3.4-1968) -&gt; 'https://github.com/jedisct1/libsodium/releases/download/1.0.16/libsodium-1.0.16.tar.gz' (UTF-8)</span></span><br><span class="line">--<span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">14</span>--  https:<span class="comment">//github.com/jedisct1/libsodium/releases/download/1.0.16/libsodium-1.0.16.tar.gz</span></span><br><span class="line">Resolving github.com (github.com)... <span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span>, <span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span>, <span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span></span><br><span class="line">Connecting to github.com (github.com)|<span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span>|:<span class="number">443</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">302</span> Found</span><br><span class="line">Location: https:<span class="comment">//github-production-release-asset-2e65be.s3.amazonaws.com/7710647/83a2fc2c-e01e-11e7-93d1-34e5a92f4011?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20180330%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20180330T080014Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=b1c25d7f46c71228586cd8d85265ba26f7f5d894b4bcf733fda382362a95fb4b&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Dlibsodium-1.0.16.tar.gz&amp;response-content-type=application%2Foctet-stream [following]</span></span><br><span class="line">converted <span class="string">'https://github-production-release-asset-2e65be.s3.amazonaws.com/7710647/83a2fc2c-e01e-11e7-93d1-34e5a92f4011?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20180330%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20180330T080014Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=b1c25d7f46c71228586cd8d85265ba26f7f5d894b4bcf733fda382362a95fb4b&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Dlibsodium-1.0.16.tar.gz&amp;response-content-type=application%2Foctet-stream'</span> (ANSI_X3<span class="number">.4</span>-<span class="number">1968</span>) -&gt; <span class="string">'https://github-production-release-asset-2e65be.s3.amazonaws.com/7710647/83a2fc2c-e01e-11e7-93d1-34e5a92f4011?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20180330/us-east-1/s3/aws4_request&amp;X-Amz-Date=20180330T080014Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=b1c25d7f46c71228586cd8d85265ba26f7f5d894b4bcf733fda382362a95fb4b&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment; filename=libsodium-1.0.16.tar.gz&amp;response-content-type=application/octet-stream'</span> (UTF-<span class="number">8</span>)</span><br><span class="line">--<span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">15</span>--  https:<span class="comment">//github-production-release-asset-2e65be.s3.amazonaws.com/7710647/83a2fc2c-e01e-11e7-93d1-34e5a92f4011?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20180330/us-east-1/s3/aws4_request&amp;X-Amz-Date=20180330T080014Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=b1c25d7f46c71228586cd8d85265ba26f7f5d894b4bcf733fda382362a95fb4b&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment;%20filename=libsodium-1.0.16.tar.gz&amp;response-content-type=application/octet-stream</span></span><br><span class="line">Resolving github-production-release-asset-<span class="number">2e65</span>be.s3.amazonaws.com (github-production-release-asset-<span class="number">2e65</span>be.s3.amazonaws.com)... <span class="number">52.216</span><span class="number">.227</span><span class="number">.8</span></span><br><span class="line">Connecting to github-production-release-asset-<span class="number">2e65</span>be.s3.amazonaws.com (github-production-release-asset-<span class="number">2e65</span>be.s3.amazonaws.com)|<span class="number">52.216</span><span class="number">.227</span><span class="number">.8</span>|:<span class="number">443</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: <span class="number">1910835</span> (<span class="number">1.8</span>M) [application/octet-stream]</span><br><span class="line">Saving to: <span class="string">'libsodium-1.0.16.tar.gz'</span></span><br><span class="line"></span><br><span class="line">     <span class="number">0</span>K .......... .......... .......... .......... ..........  <span class="number">2</span>% <span class="number">41.2</span>K <span class="number">44</span>s</span><br><span class="line">    <span class="number">50</span>K .......... .......... .......... .......... ..........  <span class="number">5</span>% <span class="number">44.0</span>K <span class="number">42</span>s</span><br><span class="line">   <span class="number">100</span>K .......... .......... .......... .......... ..........  <span class="number">8</span>% <span class="number">70.9</span>K <span class="number">35</span>s</span><br><span class="line">   <span class="number">150</span>K .......... .......... .......... .......... .......... <span class="number">10</span>% <span class="number">67.3</span>K <span class="number">32</span>s</span><br><span class="line">   <span class="number">200</span>K .......... .......... .......... .......... .......... <span class="number">13</span>% <span class="number">70.9</span>K <span class="number">29</span>s</span><br><span class="line">   <span class="number">250</span>K .......... .......... .......... .......... .......... <span class="number">16</span>% <span class="number">75.0</span>K <span class="number">27</span>s</span><br><span class="line">   <span class="number">300</span>K .......... .......... .......... .......... .......... <span class="number">18</span>% <span class="number">70.9</span>K <span class="number">25</span>s</span><br><span class="line">   <span class="number">350</span>K .......... .......... .......... .......... .......... <span class="number">21</span>%  <span class="number">106</span>K <span class="number">23</span>s</span><br><span class="line">   <span class="number">400</span>K .......... .......... .......... .......... .......... <span class="number">24</span>%  <span class="number">106</span>K <span class="number">21</span>s</span><br><span class="line">   <span class="number">450</span>K .......... .......... .......... .......... .......... <span class="number">26</span>%  <span class="number">212</span>K <span class="number">19</span>s</span><br><span class="line">   <span class="number">500</span>K .......... .......... .......... .......... .......... <span class="number">29</span>%  <span class="number">184</span>K <span class="number">18</span>s</span><br><span class="line">   <span class="number">550</span>K .......... .......... .......... .......... .......... <span class="number">32</span>%  <span class="number">213</span>K <span class="number">16</span>s</span><br><span class="line">   <span class="number">600</span>K .......... .......... .......... .......... .......... <span class="number">34</span>%  <span class="number">213</span>K <span class="number">15</span>s</span><br><span class="line">   <span class="number">650</span>K .......... .......... .......... .......... .......... <span class="number">37</span>%  <span class="number">253</span>K <span class="number">13</span>s</span><br><span class="line">   <span class="number">700</span>K .......... .......... .......... .......... .......... <span class="number">40</span>%  <span class="number">214</span>K <span class="number">12</span>s</span><br><span class="line">   <span class="number">750</span>K .......... .......... .......... .......... .......... <span class="number">42</span>%  <span class="number">645</span>K <span class="number">11</span>s</span><br><span class="line">   <span class="number">800</span>K .......... .......... .......... .......... .......... <span class="number">45</span>%  <span class="number">313</span>K <span class="number">10</span>s</span><br><span class="line">   <span class="number">850</span>K .......... .......... .......... .......... .......... <span class="number">48</span>%  <span class="number">433</span>K <span class="number">9</span>s</span><br><span class="line">   <span class="number">900</span>K .......... .......... .......... .......... .......... <span class="number">50</span>%  <span class="number">419</span>K <span class="number">8</span>s</span><br><span class="line">   <span class="number">950</span>K .......... .......... .......... .......... .......... <span class="number">53</span>%  <span class="number">214</span>K <span class="number">8</span>s</span><br><span class="line">  <span class="number">1000</span>K .......... .......... .......... .......... .......... <span class="number">56</span>% <span class="number">15.8</span>M <span class="number">7</span>s</span><br><span class="line">  <span class="number">1050</span>K .......... .......... .......... .......... .......... <span class="number">58</span>%  <span class="number">216</span>K <span class="number">6</span>s</span><br><span class="line">  <span class="number">1100</span>K .......... .......... .......... .......... .......... <span class="number">61</span>% <span class="number">24.2</span>M <span class="number">6</span>s</span><br><span class="line">  <span class="number">1150</span>K .......... .......... .......... .......... .......... <span class="number">64</span>%  <span class="number">663</span>K <span class="number">5</span>s</span><br><span class="line">  <span class="number">1200</span>K .......... .......... .......... .......... .......... <span class="number">66</span>%  <span class="number">314</span>K <span class="number">5</span>s</span><br><span class="line">  <span class="number">1250</span>K .......... .......... .......... .......... .......... <span class="number">69</span>% <span class="number">1.32</span>M <span class="number">4</span>s</span><br><span class="line">  <span class="number">1300</span>K .......... .......... .......... .......... .......... <span class="number">72</span>%  <span class="number">255</span>K <span class="number">4</span>s</span><br><span class="line">  <span class="number">1350</span>K .......... .......... .......... .......... .......... <span class="number">75</span>% <span class="number">23.2</span>M <span class="number">3</span>s</span><br><span class="line">  <span class="number">1400</span>K .......... .......... .......... .......... .......... <span class="number">77</span>% <span class="number">1.33</span>M <span class="number">3</span>s</span><br><span class="line">  <span class="number">1450</span>K .......... .......... .......... .......... .......... <span class="number">80</span>%  <span class="number">253</span>K <span class="number">2</span>s</span><br><span class="line">  <span class="number">1500</span>K .......... .......... .......... .......... .......... <span class="number">83</span>% <span class="number">19.8</span>M <span class="number">2</span>s</span><br><span class="line">  <span class="number">1550</span>K .......... .......... .......... .......... .......... <span class="number">85</span>% <span class="number">1.36</span>M <span class="number">2</span>s</span><br><span class="line">  <span class="number">1600</span>K .......... .......... .......... .......... .......... <span class="number">88</span>%  <span class="number">255</span>K <span class="number">1</span>s</span><br><span class="line">  <span class="number">1650</span>K .......... .......... .......... .......... .......... <span class="number">91</span>% <span class="number">27.8</span>M <span class="number">1</span>s</span><br><span class="line">  <span class="number">1700</span>K .......... .......... .......... .......... .......... <span class="number">93</span>% <span class="number">1.36</span>M <span class="number">1</span>s</span><br><span class="line">  <span class="number">1750</span>K .......... .......... .......... .......... .......... <span class="number">96</span>% <span class="number">1.24</span>M <span class="number">0</span>s</span><br><span class="line">  <span class="number">1800</span>K .......... .......... .......... .......... .......... <span class="number">99</span>%  <span class="number">316</span>K <span class="number">0</span>s</span><br><span class="line">  <span class="number">1850</span>K .......... ......                                     <span class="number">100</span>% <span class="number">19.3</span>M=<span class="number">10</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">26</span> (<span class="number">180</span> KB/s) - <span class="string">'libsodium-1.0.16.tar.gz'</span> saved [<span class="number">1910835</span>/<span class="number">1910835</span>]</span><br><span class="line"></span><br><span class="line">converted <span class="string">'https://github.com/shadowsocks/shadowsocks/archive/master.zip'</span> (ANSI_X3<span class="number">.4</span>-<span class="number">1968</span>) -&gt; <span class="string">'https://github.com/shadowsocks/shadowsocks/archive/master.zip'</span> (UTF-<span class="number">8</span>)</span><br><span class="line">--<span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">26</span>--  https:<span class="comment">//github.com/shadowsocks/shadowsocks/archive/master.zip</span></span><br><span class="line">Resolving github.com (github.com)... <span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span>, <span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span>, <span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span></span><br><span class="line">Connecting to github.com (github.com)|<span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span>|:<span class="number">443</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">302</span> Found</span><br><span class="line">Location: https:<span class="comment">//codeload.github.com/shadowsocks/shadowsocks/zip/master [following]</span></span><br><span class="line">converted <span class="string">'https://codeload.github.com/shadowsocks/shadowsocks/zip/master'</span> (ANSI_X3<span class="number">.4</span>-<span class="number">1968</span>) -&gt; <span class="string">'https://codeload.github.com/shadowsocks/shadowsocks/zip/master'</span> (UTF-<span class="number">8</span>)</span><br><span class="line">--<span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">26</span>--  https:<span class="comment">//codeload.github.com/shadowsocks/shadowsocks/zip/master</span></span><br><span class="line">Resolving codeload.github.com (codeload.github.com)... <span class="number">13.250</span><span class="number">.162</span><span class="number">.133</span>, <span class="number">13.229</span><span class="number">.189</span><span class="number">.0</span>, <span class="number">54.251</span><span class="number">.140</span><span class="number">.56</span></span><br><span class="line">Connecting to codeload.github.com (codeload.github.com)|<span class="number">13.250</span><span class="number">.162</span><span class="number">.133</span>|:<span class="number">443</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: <span class="number">114904</span> (<span class="number">112</span>K) [application/zip]</span><br><span class="line">Saving to: <span class="string">'shadowsocks-master.zip'</span></span><br><span class="line"></span><br><span class="line">     <span class="number">0</span>K .......... .......... .......... .......... .......... <span class="number">44</span>% <span class="number">7.12</span>M <span class="number">0</span>s</span><br><span class="line">    <span class="number">50</span>K .......... .......... .......... .......... .......... <span class="number">89</span>%  <span class="number">217</span>K <span class="number">0</span>s</span><br><span class="line">   <span class="number">100</span>K .......... ..                                         <span class="number">100</span>% <span class="number">17.6</span>M=<span class="number">0.2</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span> (<span class="number">472</span> KB/s) - <span class="string">'shadowsocks-master.zip'</span> saved [<span class="number">114904</span>/<span class="number">114904</span>]</span><br><span class="line"></span><br><span class="line">converted <span class="string">'https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-debian'</span> (ANSI_X3<span class="number">.4</span>-<span class="number">1968</span>) -&gt; <span class="string">'https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-debian'</span> (UTF-<span class="number">8</span>)</span><br><span class="line">--<span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>--  https:<span class="comment">//raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-debian</span></span><br><span class="line">Resolving raw.githubusercontent.com (raw.githubusercontent.com)... <span class="number">151.101</span><span class="number">.8</span><span class="number">.133</span></span><br><span class="line">Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|<span class="number">151.101</span><span class="number">.8</span><span class="number">.133</span>|:<span class="number">443</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: <span class="number">1938</span> (<span class="number">1.9</span>K) [text/plain]</span><br><span class="line">Saving to: <span class="string">'/etc/init.d/shadowsocks'</span></span><br><span class="line"></span><br><span class="line">     <span class="number">0</span>K .                                                     <span class="number">100</span>% <span class="number">9.74</span>M=<span class="number">0</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span> (<span class="number">9.74</span> MB/s) - <span class="string">'/etc/init.d/shadowsocks'</span> saved [<span class="number">1938</span>/<span class="number">1938</span>]</span><br><span class="line"></span><br><span class="line">running install</span><br><span class="line">running bdist_egg</span><br><span class="line">running egg_info</span><br><span class="line">creating shadowsocks.egg-info</span><br><span class="line">writing shadowsocks.egg-info/PKG-INFO</span><br><span class="line">writing top-level names to shadowsocks.egg-info/top_level.txt</span><br><span class="line">writing dependency_links to shadowsocks.egg-info/dependency_links.txt</span><br><span class="line">writing entry points to shadowsocks.egg-info/entry_points.txt</span><br><span class="line">writing manifest file <span class="string">'shadowsocks.egg-info/SOURCES.txt'</span></span><br><span class="line">reading manifest file <span class="string">'shadowsocks.egg-info/SOURCES.txt'</span></span><br><span class="line">reading manifest template <span class="string">'MANIFEST.in'</span></span><br><span class="line">writing manifest file <span class="string">'shadowsocks.egg-info/SOURCES.txt'</span></span><br><span class="line">installing library code to build/bdist.linux-x86_64/egg</span><br><span class="line">running install_lib</span><br><span class="line">running build_py</span><br><span class="line">creating build</span><br><span class="line">creating build/lib.linux-x86_64-<span class="number">2.7</span></span><br><span class="line">creating build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/lru_cache.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/udprelay.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/eventloop.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/common.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/shell.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/local.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/server.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/asyncdns.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/cryptor.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/manager.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/__init__.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/tcprelay.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/tunnel.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">copying shadowsocks/daemon.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks</span><br><span class="line">creating build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">copying shadowsocks/crypto/openssl.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">copying shadowsocks/crypto/aead.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">copying shadowsocks/crypto/hkdf.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">copying shadowsocks/crypto/__init__.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">copying shadowsocks/crypto/rc4_md5.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">copying shadowsocks/crypto/sodium.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">copying shadowsocks/crypto/util.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">copying shadowsocks/crypto/mbedtls.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">copying shadowsocks/crypto/table.py -&gt; build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto</span><br><span class="line">creating build/bdist.linux-x86_64</span><br><span class="line">creating build/bdist.linux-x86_64/egg</span><br><span class="line">creating build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/lru_cache.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/udprelay.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/eventloop.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/common.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/shell.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/local.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/server.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">creating build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto/openssl.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto/aead.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto/hkdf.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto/__init__.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto/rc4_md5.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto/sodium.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto/util.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto/mbedtls.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/crypto/table.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks/crypto</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/asyncdns.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/cryptor.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/manager.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/__init__.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/tcprelay.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/tunnel.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line">copying build/lib.linux-x86_64-<span class="number">2.7</span>/shadowsocks/daemon.py -&gt; build/bdist.linux-x86_64/egg/shadowsocks</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/lru_cache.py to lru_cache.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/udprelay.py to udprelay.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/eventloop.py to eventloop.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/common.py to common.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/shell.py to shell.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/local.py to local.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/server.py to server.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/crypto/openssl.py to openssl.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/crypto/aead.py to aead.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/crypto/hkdf.py to hkdf.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/crypto/__init__.py to __init__.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/crypto/rc4_md5.py to rc4_md5.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/crypto/sodium.py to sodium.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/crypto/util.py to util.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/crypto/mbedtls.py to mbedtls.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/crypto/table.py to table.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/asyncdns.py to asyncdns.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/cryptor.py to cryptor.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/manager.py to manager.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/__init__.py to __init__.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/tcprelay.py to tcprelay.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/tunnel.py to tunnel.pyc</span><br><span class="line"><span class="keyword">byte</span>-compiling build/bdist.linux-x86_64/egg/shadowsocks/daemon.py to daemon.pyc</span><br><span class="line">creating build/bdist.linux-x86_64/egg/EGG-INFO</span><br><span class="line">copying shadowsocks.egg-info/PKG-INFO -&gt; build/bdist.linux-x86_64/egg/EGG-INFO</span><br><span class="line">copying shadowsocks.egg-info/SOURCES.txt -&gt; build/bdist.linux-x86_64/egg/EGG-INFO</span><br><span class="line">copying shadowsocks.egg-info/dependency_links.txt -&gt; build/bdist.linux-x86_64/egg/EGG-INFO</span><br><span class="line">copying shadowsocks.egg-info/entry_points.txt -&gt; build/bdist.linux-x86_64/egg/EGG-INFO</span><br><span class="line">copying shadowsocks.egg-info/top_level.txt -&gt; build/bdist.linux-x86_64/egg/EGG-INFO</span><br><span class="line">zip_safe flag not set; analyzing archive contents...</span><br><span class="line">shadowsocks.tunnel: <span class="keyword">module</span> references __file__</span><br><span class="line">shadowsocks.shell: <span class="keyword">module</span> references __file__</span><br><span class="line">shadowsocks.server: <span class="keyword">module</span> references __file__</span><br><span class="line">shadowsocks.local: <span class="keyword">module</span> references __file__</span><br><span class="line">creating dist</span><br><span class="line">creating <span class="string">'dist/shadowsocks-3.0.0-py2.7.egg'</span> and adding <span class="string">'build/bdist.linux-x86_64/egg'</span> to it</span><br><span class="line">removing <span class="string">'build/bdist.linux-x86_64/egg'</span> (and everything under it)</span><br><span class="line">Processing shadowsocks-<span class="number">3.0</span><span class="number">.0</span>-py2<span class="number">.7</span>.egg</span><br><span class="line">removing <span class="string">'/usr/local/lib/python2.7/dist-packages/shadowsocks-3.0.0-py2.7.egg'</span> (and everything under it)</span><br><span class="line">creating /usr/local/lib/python2<span class="number">.7</span>/dist-packages/shadowsocks-<span class="number">3.0</span><span class="number">.0</span>-py2<span class="number">.7</span>.egg</span><br><span class="line">Extracting shadowsocks-<span class="number">3.0</span><span class="number">.0</span>-py2<span class="number">.7</span>.egg to /usr/local/lib/python2<span class="number">.7</span>/dist-packages</span><br><span class="line">shadowsocks <span class="number">3.0</span><span class="number">.0</span> is already the active version in easy-install.pth</span><br><span class="line">Installing sslocal script to /usr/local/bin</span><br><span class="line">Installing ssserver script to /usr/local/bin</span><br><span class="line"></span><br><span class="line">Installed /usr/local/lib/python2<span class="number">.7</span>/dist-packages/shadowsocks-<span class="number">3.0</span><span class="number">.0</span>-py2<span class="number">.7</span>.egg</span><br><span class="line">Processing dependencies <span class="keyword">for</span> shadowsocks==<span class="number">3.0</span><span class="number">.0</span></span><br><span class="line">Finished processing dependencies <span class="keyword">for</span> shadowsocks==<span class="number">3.0</span><span class="number">.0</span></span><br><span class="line">writing list of installed files to <span class="string">'/usr/local/shadowsocks_install.log'</span></span><br><span class="line">INFO: loading config from /etc/shadowsocks.json</span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span> INFO     loading libcrypto from libcrypto.so<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">Starting Shadowsocks success</span><br><span class="line"></span><br><span class="line">Congratulations, Shadowsocks-python server install completed!</span><br><span class="line">Your Server IP        :  xxx.xxx.xxx.xxx</span><br><span class="line">Your Server Port      :  xxx</span><br><span class="line">Your Password         :  xxx</span><br><span class="line">Your Encryption Method:  aes-<span class="number">256</span>-cfb</span><br><span class="line"></span><br><span class="line">Welcome to visit:https:<span class="comment">//teddysun.com/342.html</span></span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><p>2、启动ss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d start</span><br></pre></td></tr></table></figure><p>停止ss服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d stop</span><br></pre></td></tr></table></figure><p>3、配置多用户，增加端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同Centos 6</span><br></pre></td></tr></table></figure><p>4、开放防火墙端口<br>新增加的端口防火墙是没有开放的，需要手动开放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;firewalld&#x2F;zones&#x2F;public.xml</span><br></pre></td></tr></table></figure><p>将端口8888的两行配置复制一下到下面，将其修改为9999。以开放9999端口的TCP和UDP访问功能。 配置完成后需要重启SS和刷新防火墙配置，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks restart</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>最后本机ss客户端填写配置信息，然后尝试访问谷歌，测试一下每个端口是否都可用，如果都可用，说明配置正确。</p><h3 id="二、搭建锐速"><a href="#二、搭建锐速" class="headerlink" title="二、搭建锐速"></a>二、搭建锐速</h3><p>1、对于centos7，内核更换为： 3.10.0-229.1.2.el7.x86_64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http:&#x2F;&#x2F;soft.91yun.org&#x2F;ISO&#x2F;Linux&#x2F;CentOS&#x2F;kernel&#x2F;kernel-3.10.0-229.1.2.el7.x86_64.rpm --force</span><br></pre></td></tr></table></figure><p>2、更换内核后重启服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reboot</span><br></pre></td></tr></table></figure><p>3、安装锐速，这里我们仍然使用一键脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;91yun&#x2F;serverspeeder&#x2F;master&#x2F;serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure><p>4、启动锐速</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service serverSpeeder start</span><br></pre></td></tr></table></figure><p>至此就搭建完啦，试着打开youtube看看1080p的视频吧，速度是不是挺给力？如果是，那么恭喜你，搭建成功了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 上网工具 </tag>
            
            <tag> translate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检测对象是否是json</title>
      <link href="/2020/06/02/%E6%A3%80%E6%B5%8B%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E6%98%AFjson/"/>
      <url>/2020/06/02/%E6%A3%80%E6%B5%8B%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E6%98%AFjson/</url>
      
        <content type="html"><![CDATA[<p>检测一个对象是否是一个对象的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(typeof(obj) &#x3D;&#x3D; &quot;object&quot; &amp;&amp; Object.prototype.toString.call(obj).toLowerCase() &#x3D;&#x3D; &quot;[object object]&quot; &amp;&amp; !obj.length)&#123;</span><br><span class="line">alert(&#39;是JSON对象&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> util </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未来很美好</title>
      <link href="/2020/06/02/%E6%9C%AA%E6%9D%A5%E5%BE%88%E7%BE%8E%E5%A5%BD/"/>
      <url>/2020/06/02/%E6%9C%AA%E6%9D%A5%E5%BE%88%E7%BE%8E%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="新奇教程"><a href="#新奇教程" class="headerlink" title="新奇教程"></a>新奇教程</h3><p><a href="https://imgchr.com/i/tYrjX9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/02/tYrjX9.jpg" alt="tYrjX9.jpg"></a></p><p>谷歌的一个 AI 试验，用户对着摄像头做出指挥的动作，谷歌会识别动作，然后配上乐队的音乐。</p><ul><li><a href="https://woodgears.ca/tech/heater_aimer.html" target="_blank" rel="noopener">https://woodgears.ca/tech/heater_aimer.html</a><a id="more"></a>在线游戏 文明</li><li><a href="https://github.com/freeciv/freeciv-web" target="_blank" rel="noopener">https://github.com/freeciv/freeciv-web</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> percetion </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录Hexo + Next 新增导航并添加文章</title>
      <link href="/2020/06/01/%E8%AE%B0%E5%BD%95Hexo-Next-%E6%96%B0%E5%A2%9E%E5%AF%BC%E8%88%AA%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0/"/>
      <url>/2020/06/01/%E8%AE%B0%E5%BD%95Hexo-Next-%E6%96%B0%E5%A2%9E%E5%AF%BC%E8%88%AA%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1、新建导航-菜单"><a href="#1、新建导航-菜单" class="headerlink" title="1、新建导航/菜单"></a>1、新建导航/菜单</h2><p>执行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &#39;导航&#x2F;菜单名称&#39;</span><br></pre></td></tr></table></figure><p>执行之后 开启预览会有新建的菜单 <code>导航/菜单名称</code></p><a id="more"></a><h2 id="2、修改主题菜单-导航配置"><a href="#2、修改主题菜单-导航配置" class="headerlink" title="2、修改主题菜单/导航配置"></a>2、修改主题菜单/导航配置</h2><ol><li>打开 <code>hexo/_config.yml</code> 文件，找到 <code>language:</code>，这行代码。例如我的语言是 <code>language: zh-CN</code> 。</li><li>打开文件 <code>hexo/themes/next/language</code>（<code>next</code>主题，打开你当前主题里的 <code>language</code> 文件夹）。那么我就打开 <code>language/zh-CN.yml</code>，与你的语言对应的文件。</li><li>在 Menu: 下方添加一行 <code>导航/菜单 英文 : 导航/菜单 中文</code>，就修改成 <code>导航/菜单 中文</code>了。</li><li>打开新建菜单文件下的 <code>index.md</code> ，修改成 <code>title: 写成你想要的名字</code>  即可（可省略）。</li></ol><h2 id="3、实现新建导航下多篇文章（这里用到的办法借用了-categories-的分类功能，其实就是将某个分类移到了左侧菜单上）"><a href="#3、实现新建导航下多篇文章（这里用到的办法借用了-categories-的分类功能，其实就是将某个分类移到了左侧菜单上）" class="headerlink" title="3、实现新建导航下多篇文章（这里用到的办法借用了 categories 的分类功能，其实就是将某个分类移到了左侧菜单上）"></a>3、实现新建导航下多篇文章（这里用到的办法借用了 categories 的分类功能，其实就是将某个分类移到了左侧菜单上）</h2><ol><li>我们在 <code>_post</code> 目录下有几篇文章想放到该菜单下，我们给这些文章分类为 <code>categories: - 新建导航/菜单 的英文</code> 。</li><li>打开 <code>hexo/themes/next/_config.yml</code> 文件，找到 <code>menu:</code>，添加一行 <code>新建导航/菜单 的英文: //categories/ &#39;新建导航/菜单 的英文&#39; / || icon的名称(可以参照 home 项更改)</code> 即可。</li><li>这时我们点击，该菜单，就会发现里面可以显示这几篇文章。</li></ol>]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
            <tag> add article </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Blog</title>
      <link href="/2020/05/27/First-Blog/"/>
      <url>/2020/05/27/First-Blog/</url>
      
        <content type="html"><![CDATA[<p>利用 <code>github</code> 的二级域名搭建个人博客（默认已经拥有了<code>node</code>, <code>git</code>, <code>github</code>）等基础要求；</p><h3 id="1、github-构建新仓库"><a href="#1、github-构建新仓库" class="headerlink" title="1、github 构建新仓库"></a>1、github 构建新仓库</h3><p>构建新仓库注意 构建的这个博客仓库具有唯一性 所以名称格式为 username.github.io</p><a id="more"></a><h3 id="2、生成本地-ssh"><a href="#2、生成本地-ssh" class="headerlink" title="2、生成本地 ssh"></a>2、生成本地 ssh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;github账号&#39;</span><br></pre></td></tr></table></figure><p>生成的 ssh 信息 默认为 用户/当前账户/.ssh/id_rsa.pub 文件内 可以用记事本打开</p><p>MAC 查看 SSH 信息命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>返回以 <code>ssh-rsa</code> 开头的 ssh 秘钥</p><h3 id="3、生成-ssh-保存到-github"><a href="#3、生成-ssh-保存到-github" class="headerlink" title="3、生成 ssh 保存到 github"></a>3、生成 ssh 保存到 github</h3><p>右上角个人信息 -&gt; settings -&gt; SSH and GPG keys -&gt; new SSH key 填入上一步生成的 ssh 信息</p><p>测试 ssh  和本地是否连通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>回车 输入<code>yes</code><br>果看到Hi后面是你的用户名，就说明成功了</p><h3 id="4、本地安装-hexo-主题"><a href="#4、本地安装-hexo-主题" class="headerlink" title="4、本地安装 hexo 主题"></a>4、本地安装 hexo 主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><p>修改配置信息 打开 <code>_congfig.yml</code> 文件 修改 <code>deploy</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:username&#x2F;username.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><h3 id="5、设置本地账户信息"><a href="#5、设置本地账户信息" class="headerlink" title="5、设置本地账户信息"></a>5、设置本地账户信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email youeremail@example.com</span><br></pre></td></tr></table></figure><h3 id="6、执行命令"><a href="#6、执行命令" class="headerlink" title="6、执行命令"></a>6、执行命令</h3><p>生成静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g  &#x2F;&#x2F; 生成文件</span><br></pre></td></tr></table></figure><p>预览静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s  &#x2F;&#x2F; 预览静态文件 访问localhost:4000</span><br></pre></td></tr></table></figure><p>发布到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这一步默认会报错 提示没有git 错误： <code>Deployer not found: git</code><br><strong>解决办法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后再次执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>即可发布到远程仓库<br>最后可以通过 <code>yourname.github.io</code> 访问博客</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog,learn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
